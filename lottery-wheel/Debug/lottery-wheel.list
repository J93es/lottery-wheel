
lottery-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  08007750  08007750  00017750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eac  08007eac  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  08007eac  08007eac  00017eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb4  08007eb4  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08007ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000228  080080e4  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  080080e4  00021518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a054  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280a  00000000  00000000  0002a2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000940  00000000  00000000  0002d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154f2  00000000  00000000  0002e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb02  00000000  00000000  000435da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075062  00000000  00000000  0004f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043b4  00000000  00000000  000c4140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c84f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007734 	.word	0x08007734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	08007734 	.word	0x08007734

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800100e:	b480      	push	{r7}
 8001010:	b089      	sub	sp, #36	; 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	332c      	adds	r3, #44	; 0x2c
 800101e:	4619      	mov	r1, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001026:	f44f 7240 	mov.w	r2, #768	; 0x300
 800102a:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	fa92 f2a2 	rbit	r2, r2
 8001032:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	40d3      	lsrs	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	211f      	movs	r1, #31
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 011f 	and.w	r1, r3, #31
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	431a      	orrs	r2, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08d      	sub	sp, #52	; 0x34
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	330c      	adds	r3, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	fa92 f2a2 	rbit	r2, r2
 80010c4:	617a      	str	r2, [r7, #20]
  return result;
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	40d3      	lsrs	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80010e0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80010e4:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	6a39      	ldr	r1, [r7, #32]
 80010e8:	fa91 f1a1 	rbit	r1, r1
 80010ec:	61f9      	str	r1, [r7, #28]
  return result;
 80010ee:	69f9      	ldr	r1, [r7, #28]
 80010f0:	fab1 f181 	clz	r1, r1
 80010f4:	b2c9      	uxtb	r1, r1
 80010f6:	40cb      	lsrs	r3, r1
 80010f8:	2107      	movs	r1, #7
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001108:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800110c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001110:	fa91 f1a1 	rbit	r1, r1
 8001114:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001118:	fab1 f181 	clz	r1, r1
 800111c:	b2c9      	uxtb	r1, r1
 800111e:	40cb      	lsrs	r3, r1
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	431a      	orrs	r2, r3
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800112c:	bf00      	nop
 800112e:	3734      	adds	r7, #52	; 0x34
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60da      	str	r2, [r3, #12]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f023 0201 	bic.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <LL_RCC_HSI_Enable+0x1c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LL_RCC_HSI_IsReady+0x20>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40023800 	.word	0x40023800

08001204 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4904      	ldr	r1, [pc, #16]	; (800122c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 0203 	bic.w	r2, r3, #3
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <LL_RCC_SetSysClkSource+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40023800 	.word	0x40023800

08001258 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <LL_RCC_GetSysClkSource+0x18>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <LL_RCC_SetAHBPrescaler+0x24>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40023800 	.word	0x40023800

0800129c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ac:	4904      	ldr	r1, [pc, #16]	; (80012c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 80012f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80012fe:	4905      	ldr	r1, [pc, #20]	; (8001314 <LL_RCC_SetTIMPrescaler+0x28>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40023800 	.word	0x40023800

08001318 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <LL_RCC_PLL_Enable+0x1c>)
 8001322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <LL_RCC_PLL_IsReady+0x24>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001374:	4013      	ands	r3, r2
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4311      	orrs	r1, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	430a      	orrs	r2, r1
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001390:	4904      	ldr	r1, [pc, #16]	; (80013a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40023800 	.word	0x40023800
 80013a8:	ffbf8000 	.word	0xffbf8000

080013ac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40023800 	.word	0x40023800

080013dc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800

0800140c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40023800 	.word	0x40023800

0800143c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3302      	adds	r3, #2
 800144e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	43db      	mvns	r3, r3
 8001458:	ea02 0103 	and.w	r1, r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	0c1b      	lsrs	r3, r3, #16
 8001460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	60bb      	str	r3, [r7, #8]
  return result;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	fa03 f202 	lsl.w	r2, r3, r2
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <LL_SYSCFG_SetEXTISource+0x58>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	430a      	orrs	r2, r1
 8001482:	3302      	adds	r3, #2
 8001484:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40013800 	.word	0x40013800

08001498 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 0207 	bic.w	r2, r3, #7
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <LL_FLASH_SetLatency+0x24>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LL_FLASH_GetLatency+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80014ec:	4904      	ldr	r1, [pc, #16]	; (8001500 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40007000 	.word	0x40007000

08001504 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 0210 	bic.w	r2, r3, #16
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	605a      	str	r2, [r3, #4]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0208 	bic.w	r2, r3, #8
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	f023 0307 	bic.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	615a      	str	r2, [r3, #20]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	613b      	str	r3, [r7, #16]
  return result;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2103      	movs	r1, #3
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	61bb      	str	r3, [r7, #24]
  return result;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b089      	sub	sp, #36	; 0x24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	613b      	str	r3, [r7, #16]
  return result;
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2103      	movs	r1, #3
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	401a      	ands	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	61bb      	str	r3, [r7, #24]
  return result;
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	60da      	str	r2, [r3, #12]
}
 8001724:	bf00      	nop
 8001726:	3724      	adds	r7, #36	; 0x24
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001752:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001756:	f7ff fe59 	bl	800140c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800175a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800175e:	f7ff fe3d 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001762:	2007      	movs	r0, #7
 8001764:	f7ff fba6 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001768:	f000 f816 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176c:	f000 fad4 	bl	8001d18 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001770:	f000 f860 	bl	8001834 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001774:	f000 f8cc 	bl	8001910 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001778:	f000 f98c 	bl	8001a94 <MX_TIM2_Init>
  MX_TIM3_Init();
 800177c:	f000 f9c2 	bl	8001b04 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001780:	f000 fa7a 	bl	8001c78 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001784:	f000 fa3e 	bl	8001c04 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001788:	f000 f930 	bl	80019ec <MX_SPI2_Init>
  MX_TIM4_Init();
 800178c:	f000 f9fa 	bl	8001b84 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001790:	f002 ffba 	bl	8004708 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001794:	e7fe      	b.n	8001794 <main+0x46>
	...

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 800179c:	2003      	movs	r0, #3
 800179e:	f7ff fe7b 	bl	8001498 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80017a2:	bf00      	nop
 80017a4:	f7ff fe8c 	bl	80014c0 <LL_FLASH_GetLatency>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d1fa      	bne.n	80017a4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80017ae:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80017b2:	f7ff fe93 	bl	80014dc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80017b6:	2010      	movs	r0, #16
 80017b8:	f7ff fd24 	bl	8001204 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80017bc:	f7ff fd00 	bl	80011c0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017c0:	bf00      	nop
 80017c2:	f7ff fd0d 	bl	80011e0 <LL_RCC_HSI_IsReady>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d1fa      	bne.n	80017c2 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 80017cc:	2300      	movs	r3, #0
 80017ce:	2264      	movs	r2, #100	; 0x64
 80017d0:	2108      	movs	r1, #8
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fdc4 	bl	8001360 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80017d8:	f7ff fd9e 	bl	8001318 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80017dc:	bf00      	nop
 80017de:	f7ff fdab 	bl	8001338 <LL_RCC_PLL_IsReady>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d1fa      	bne.n	80017de <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80017e8:	bf00      	nop
 80017ea:	f7ff fe8b 	bl	8001504 <LL_PWR_IsActiveFlag_VOS>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0fa      	beq.n	80017ea <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fd3d 	bl	8001274 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80017fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017fe:	f7ff fd4d 	bl	800129c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fd5e 	bl	80012c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff fd11 	bl	8001230 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800180e:	bf00      	nop
 8001810:	f7ff fd22 	bl	8001258 <LL_RCC_GetSysClkSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b08      	cmp	r3, #8
 8001818:	d1fa      	bne.n	8001810 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <SystemClock_Config+0x98>)
 800181c:	f001 ff4e 	bl	80036bc <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <SystemClock_Config+0x98>)
 8001822:	f001 ff59 	bl	80036d8 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff fd60 	bl	80012ec <LL_RCC_SetTIMPrescaler>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	05f5e100 	.word	0x05f5e100

08001834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b090      	sub	sp, #64	; 0x40
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800183a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800186a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800186e:	f7ff fdcd 	bl	800140c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff fd9a 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_IN6
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001878:	2340      	movs	r3, #64	; 0x40
 800187a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800187c:	2303      	movs	r3, #3
 800187e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	481d      	ldr	r0, [pc, #116]	; (8001900 <MX_ADC1_Init+0xcc>)
 800188a:	f001 f813 	bl	80028b4 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001892:	2300      	movs	r3, #0
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800189a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800189e:	4619      	mov	r1, r3
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <MX_ADC1_Init+0xd0>)
 80018a2:	f000 fd7d 	bl	80023a0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	4619      	mov	r1, r3
 80018c0:	4810      	ldr	r0, [pc, #64]	; (8001904 <MX_ADC1_Init+0xd0>)
 80018c2:	f000 fd99 	bl	80023f8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80018c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_ADC1_Init+0xd0>)
 80018cc:	f7ff fbd5 	bl	800107a <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80018d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d4:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	480a      	ldr	r0, [pc, #40]	; (8001908 <MX_ADC1_Init+0xd4>)
 80018de:	f000 fd41 	bl	8002364 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <MX_ADC1_Init+0xd8>)
 80018e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e8:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_ADC1_Init+0xd0>)
 80018ea:	f7ff fb90 	bl	800100e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_15CYCLES);
 80018ee:	2201      	movs	r2, #1
 80018f0:	4906      	ldr	r1, [pc, #24]	; (800190c <MX_ADC1_Init+0xd8>)
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_ADC1_Init+0xd0>)
 80018f4:	f7ff fbd4 	bl	80010a0 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3740      	adds	r7, #64	; 0x40
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40020000 	.word	0x40020000
 8001904:	40012000 	.word	0x40012000
 8001908:	40012300 	.word	0x40012300
 800190c:	03200006 	.word	0x03200006

08001910 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	2220      	movs	r2, #32
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fdcc 	bl	80054bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	463b      	mov	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001934:	2004      	movs	r0, #4
 8001936:	f7ff fd39 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fd36 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001944:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001946:	2302      	movs	r3, #2
 8001948:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800194e:	2301      	movs	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001952:	2301      	movs	r3, #1
 8001954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001956:	2304      	movs	r3, #4
 8001958:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	481f      	ldr	r0, [pc, #124]	; (80019dc <MX_I2C3_Init+0xcc>)
 8001960:	f000 ffa8 	bl	80028b4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800196a:	2302      	movs	r3, #2
 800196c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001972:	2301      	movs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001976:	2301      	movs	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800197a:	2304      	movs	r3, #4
 800197c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	463b      	mov	r3, r7
 8001980:	4619      	mov	r1, r3
 8001982:	4817      	ldr	r0, [pc, #92]	; (80019e0 <MX_I2C3_Init+0xd0>)
 8001984:	f000 ff96 	bl	80028b4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8001988:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800198c:	f7ff fd26 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8001990:	4814      	ldr	r0, [pc, #80]	; (80019e4 <MX_I2C3_Init+0xd4>)
 8001992:	f7ff fc04 	bl	800119e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8001996:	4813      	ldr	r0, [pc, #76]	; (80019e4 <MX_I2C3_Init+0xd4>)
 8001998:	f7ff fbde 	bl	8001158 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800199c:	4811      	ldr	r0, [pc, #68]	; (80019e4 <MX_I2C3_Init+0xd4>)
 800199e:	f7ff fbcb 	bl	8001138 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_I2C3_Init+0xd8>)
 80019a8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	4619      	mov	r1, r3
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_I2C3_Init+0xd4>)
 80019c6:	f001 f8f5 	bl	8002bb4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 80019ca:	2100      	movs	r1, #0
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_I2C3_Init+0xd4>)
 80019ce:	f7ff fbd3 	bl	8001178 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	3738      	adds	r7, #56	; 0x38
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40005c00 	.word	0x40005c00
 80019e8:	000186a0 	.word	0x000186a0

080019ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b090      	sub	sp, #64	; 0x40
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80019f2:	f107 0318 	add.w	r3, r7, #24
 80019f6:	2228      	movs	r2, #40	; 0x28
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fd5e 	bl	80054bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001a10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a14:	f7ff fce2 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7ff fcc7 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001a1e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a24:	2302      	movs	r3, #2
 8001a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001a34:	2305      	movs	r3, #5
 8001a36:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	463b      	mov	r3, r7
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <MX_SPI2_Init+0xa0>)
 8001a3e:	f000 ff39 	bl	80028b4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001a46:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001a4a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001a6e:	f107 0318 	add.w	r3, r7, #24
 8001a72:	4619      	mov	r1, r3
 8001a74:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MX_SPI2_Init+0xa4>)
 8001a76:	f001 fa34 	bl	8002ee2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_SPI2_Init+0xa4>)
 8001a7e:	f7ff fd55 	bl	800152c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3740      	adds	r7, #64	; 0x40
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40003800 	.word	0x40003800

08001a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff fc97 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001aae:	2363      	movs	r3, #99	; 0x63
 8001ab0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aba:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ac8:	f001 fa98 	bl	8002ffc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001acc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ad0:	f7ff fd62 	bl	8001598 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ada:	f7ff fd6d 	bl	80015b8 <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 8001ade:	2108      	movs	r1, #8
 8001ae0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ae4:	f7ff fd35 	bl	8001552 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001aee:	f7ff fd78 	bl	80015e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001af2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001af6:	f7ff fd87 	bl	8001608 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7ff fc5f 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b1e:	f7ff f9ed 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fa3d 	bl	8000fa8 <NVIC_EncodePriority>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	201d      	movs	r0, #29
 8001b34:	f7ff fa0e 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001b38:	201d      	movs	r0, #29
 8001b3a:	f7ff f9ed 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001b3e:	2363      	movs	r3, #99	; 0x63
 8001b40:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <MX_TIM3_Init+0x7c>)
 8001b56:	f001 fa51 	bl	8002ffc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <MX_TIM3_Init+0x7c>)
 8001b5c:	f7ff fd0c 	bl	8001578 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <MX_TIM3_Init+0x7c>)
 8001b64:	f7ff fd28 	bl	80015b8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_TIM3_Init+0x7c>)
 8001b6c:	f7ff fd39 	bl	80015e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <MX_TIM3_Init+0x7c>)
 8001b72:	f7ff fd49 	bl	8001608 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40000400 	.word	0x40000400

08001b84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001b98:	2004      	movs	r0, #4
 8001b9a:	f7ff fc1f 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b9e:	f7ff f9ad 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f9fd 	bl	8000fa8 <NVIC_EncodePriority>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	201e      	movs	r0, #30
 8001bb4:	f7ff f9ce 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8001bb8:	201e      	movs	r0, #30
 8001bba:	f7ff f9ad 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001bbe:	2363      	movs	r3, #99	; 0x63
 8001bc0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bca:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <MX_TIM4_Init+0x7c>)
 8001bd6:	f001 fa11 	bl	8002ffc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <MX_TIM4_Init+0x7c>)
 8001bdc:	f7ff fccc 	bl	8001578 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001be0:	2100      	movs	r1, #0
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM4_Init+0x7c>)
 8001be4:	f7ff fce8 	bl	80015b8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001be8:	2100      	movs	r1, #0
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_TIM4_Init+0x7c>)
 8001bec:	f7ff fcf9 	bl	80015e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM4_Init+0x7c>)
 8001bf2:	f7ff fd09 	bl	8001608 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40000800 	.word	0x40000800

08001c04 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8001c18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c1c:	f7ff fbf6 	bl	800140c <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8001c20:	f7ff f96c 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2201      	movs	r2, #1
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f9bc 	bl	8000fa8 <NVIC_EncodePriority>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4619      	mov	r1, r3
 8001c34:	2018      	movs	r0, #24
 8001c36:	f7ff f98d 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c3a:	2018      	movs	r0, #24
 8001c3c:	f7ff f96c 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8001c48:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001c4c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_TIM9_Init+0x70>)
 8001c58:	f001 f9d0 	bl	8002ffc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_TIM9_Init+0x70>)
 8001c5e:	f7ff fc9b 	bl	8001598 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c62:	2100      	movs	r1, #0
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <MX_TIM9_Init+0x70>)
 8001c66:	f7ff fca7 	bl	80015b8 <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40014000 	.word	0x40014000

08001c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	; 0x38
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]
 8001c8e:	615a      	str	r2, [r3, #20]
 8001c90:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
 8001ca0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001ca2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ca6:	f7ff fb99 	bl	80013dc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff fb7e 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001cc4:	2307      	movs	r3, #7
 8001cc6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <MX_USART2_UART_Init+0x98>)
 8001cce:	f000 fdf1 	bl	80028b4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001cd2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cd6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4807      	ldr	r0, [pc, #28]	; (8001d14 <MX_USART2_UART_Init+0x9c>)
 8001cf8:	f001 fc62 	bl	80035c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART2_UART_Init+0x9c>)
 8001cfe:	f7ff fca3 	bl	8001648 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_USART2_UART_Init+0x9c>)
 8001d04:	f7ff fc90 	bl	8001628 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3738      	adds	r7, #56	; 0x38
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40004400 	.word	0x40004400

08001d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001d1e:	f107 0318 	add.w	r3, r7, #24
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001d38:	2004      	movs	r0, #4
 8001d3a:	f7ff fb37 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001d3e:	2080      	movs	r0, #128	; 0x80
 8001d40:	f7ff fb34 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7ff fb31 	bl	80013ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f7ff fb2e 	bl	80013ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001d50:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001d54:	4842      	ldr	r0, [pc, #264]	; (8001e60 <MX_GPIO_Init+0x148>)
 8001d56:	f7ff fceb 	bl	8001730 <LL_GPIO_ResetOutputPin>
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8001d5a:	2130      	movs	r1, #48	; 0x30
 8001d5c:	4841      	ldr	r0, [pc, #260]	; (8001e64 <MX_GPIO_Init+0x14c>)
 8001d5e:	f7ff fce7 	bl	8001730 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_CS_Pin|Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin
 8001d62:	f247 3104 	movw	r1, #29444	; 0x7304
 8001d66:	4840      	ldr	r0, [pc, #256]	; (8001e68 <MX_GPIO_Init+0x150>)
 8001d68:	f7ff fce2 	bl	8001730 <LL_GPIO_ResetOutputPin>
                          |Motor_L2_Pin|Motor_R2_Pin);

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001d6c:	493f      	ldr	r1, [pc, #252]	; (8001e6c <MX_GPIO_Init+0x154>)
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f7ff fb64 	bl	800143c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d78:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001d82:	2302      	movs	r3, #2
 8001d84:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fc0e 	bl	80025ac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001d90:	2200      	movs	r2, #0
 8001d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d96:	4832      	ldr	r0, [pc, #200]	; (8001e60 <MX_GPIO_Init+0x148>)
 8001d98:	f7ff fc9b 	bl	80016d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da2:	482f      	ldr	r0, [pc, #188]	; (8001e60 <MX_GPIO_Init+0x148>)
 8001da4:	f7ff fc66 	bl	8001674 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = Sensor_Mux0_Pin|Sensor_Mux1_Pin|Sensor_Mux2_Pin|Sensor_MuxX_Pin
 8001da8:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001dac:	603b      	str	r3, [r7, #0]
                          |Motor_R1_Pin|Motor_R3_Pin|Motor_R4_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dae:	2301      	movs	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4827      	ldr	r0, [pc, #156]	; (8001e60 <MX_GPIO_Init+0x148>)
 8001dc4:	f000 fd76 	bl	80028b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001dc8:	2310      	movs	r3, #16
 8001dca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	463b      	mov	r3, r7
 8001dde:	4619      	mov	r1, r3
 8001de0:	4820      	ldr	r0, [pc, #128]	; (8001e64 <MX_GPIO_Init+0x14c>)
 8001de2:	f000 fd67 	bl	80028b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001de6:	2320      	movs	r3, #32
 8001de8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dea:	2301      	movs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4819      	ldr	r0, [pc, #100]	; (8001e64 <MX_GPIO_Init+0x14c>)
 8001e00:	f000 fd58 	bl	80028b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001e04:	2304      	movs	r3, #4
 8001e06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001e14:	2302      	movs	r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001e18:	463b      	mov	r3, r7
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <MX_GPIO_Init+0x150>)
 8001e1e:	f000 fd49 	bl	80028b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Motor_L1_Pin|Motor_L3_Pin|Motor_L4_Pin|Motor_L2_Pin
 8001e22:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8001e26:	603b      	str	r3, [r7, #0]
                          |Motor_R2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <MX_GPIO_Init+0x150>)
 8001e3e:	f000 fd39 	bl	80028b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SWL_Pin|SWR_Pin;
 8001e42:	2330      	movs	r3, #48	; 0x30
 8001e44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	463b      	mov	r3, r7
 8001e50:	4619      	mov	r1, r3
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_GPIO_Init+0x150>)
 8001e54:	f000 fd2e 	bl	80028b4 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e58:	bf00      	nop
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	00f00003 	.word	0x00f00003

08001e70 <LL_TIM_SetAutoReload>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f06f 0201 	mvn.w	r2, #1
 8001e9a:	611a      	str	r2, [r3, #16]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <Custom_GPIO_Set_t>:
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}

static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d002      	beq.n	8001ed2 <Custom_GPIO_Set_t+0x2a>
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed0:	e000      	b.n	8001ed4 <Custom_GPIO_Set_t+0x2c>
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8001eda:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8001edc:	615a      	str	r2, [r3, #20]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <Motor_L_TIM3_IRQ>:





__STATIC_INLINE void	Motor_L_TIM3_IRQ() {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0

	// motorL phase 잡기
	Custom_GPIO_Set_t(motorL + 0, (phaseL_table[phaseL] >> 0) & 0x01);
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <Motor_L_TIM3_IRQ+0x98>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <Motor_L_TIM3_IRQ+0x9c>)
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	4619      	mov	r1, r3
 8001f04:	4821      	ldr	r0, [pc, #132]	; (8001f8c <Motor_L_TIM3_IRQ+0xa0>)
 8001f06:	f7ff ffcf 	bl	8001ea8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, (phaseL_table[phaseL] >> 1) & 0x01);
 8001f0a:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <Motor_L_TIM3_IRQ+0xa4>)
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <Motor_L_TIM3_IRQ+0x98>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4619      	mov	r1, r3
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <Motor_L_TIM3_IRQ+0x9c>)
 8001f16:	5c5b      	ldrb	r3, [r3, r1]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f7ff ffbf 	bl	8001ea8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, (phaseL_table[phaseL] >> 2) & 0x01);
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <Motor_L_TIM3_IRQ+0xa8>)
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <Motor_L_TIM3_IRQ+0x98>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <Motor_L_TIM3_IRQ+0x9c>)
 8001f36:	5c5b      	ldrb	r3, [r3, r1]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f7ff ffaf 	bl	8001ea8 <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, (phaseL_table[phaseL] >> 3) & 0x01);
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <Motor_L_TIM3_IRQ+0xac>)
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <Motor_L_TIM3_IRQ+0x98>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4619      	mov	r1, r3
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <Motor_L_TIM3_IRQ+0x9c>)
 8001f56:	5c5b      	ldrb	r3, [r3, r1]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f7ff ff9f 	bl	8001ea8 <Custom_GPIO_Set_t>

	phaseL = (phaseL + 1) & 0x07;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <Motor_L_TIM3_IRQ+0x98>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <Motor_L_TIM3_IRQ+0x98>)
 8001f7c:	701a      	strb	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200013c8 	.word	0x200013c8
 8001f88:	20000058 	.word	0x20000058
 8001f8c:	20000018 	.word	0x20000018
 8001f90:	20000020 	.word	0x20000020
 8001f94:	20000028 	.word	0x20000028
 8001f98:	20000030 	.word	0x20000030

08001f9c <Motor_L_Speed_Control>:

void	Drive_Speed_Accele_Cntl();



__STATIC_INLINE void	Motor_L_Speed_Control(float speed) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM3, SPEED_COEF / speed - 1);
 8001fa6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001fd0 <Motor_L_Speed_Control+0x34>
 8001faa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbe:	ee17 1a90 	vmov	r1, s15
 8001fc2:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <Motor_L_Speed_Control+0x38>)
 8001fc4:	f7ff ff54 	bl	8001e70 <LL_TIM_SetAutoReload>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	43cc3418 	.word	0x43cc3418
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <Motor_R_Speed_Control>:



__STATIC_INLINE void	Motor_R_Speed_Control(float speed) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	ed87 0a01 	vstr	s0, [r7, #4]
	LL_TIM_SetAutoReload(TIM4, SPEED_COEF / speed - 1);
 8001fe2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800200c <Motor_R_Speed_Control+0x34>
 8001fe6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffa:	ee17 1a90 	vmov	r1, s15
 8001ffe:	4804      	ldr	r0, [pc, #16]	; (8002010 <Motor_R_Speed_Control+0x38>)
 8002000:	f7ff ff36 	bl	8001e70 <LL_TIM_SetAutoReload>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	43cc3418 	.word	0x43cc3418
 8002010:	40000800 	.word	0x40000800

08002014 <Drive_TIM9_IRQ>:




// 500us마다 호출됨.
__STATIC_INLINE void	Drive_TIM9_IRQ() {
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0

	// 가속도 및 속도 제어
	Drive_Speed_Accele_Cntl();
 8002018:	f002 f9b2 	bl	8004380 <Drive_Speed_Accele_Cntl>

	Motor_L_Speed_Control(curSpeed);
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <Drive_TIM9_IRQ+0x28>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	eeb0 0a67 	vmov.f32	s0, s15
 8002026:	f7ff ffb9 	bl	8001f9c <Motor_L_Speed_Control>
	Motor_R_Speed_Control(curSpeed);
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <Drive_TIM9_IRQ+0x28>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	eeb0 0a67 	vmov.f32	s0, s15
 8002034:	f7ff ffd0 	bl	8001fd8 <Motor_R_Speed_Control>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000010 	.word	0x20000010

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Motor_Power_Off();
 800204a:	f002 fc71 	bl	8004930 <Motor_Power_Off>
 800204e:	e7fc      	b.n	800204a <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Motor_Power_Off();
 8002054:	f002 fc6c 	bl	8004930 <Motor_Power_Off>
 8002058:	e7fc      	b.n	8002054 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Motor_Power_Off();
 800205e:	f002 fc67 	bl	8004930 <Motor_Power_Off>
 8002062:	e7fc      	b.n	800205e <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Motor_Power_Off();
 8002068:	f002 fc62 	bl	8004930 <Motor_Power_Off>
 800206c:	e7fc      	b.n	8002068 <UsageFault_Handler+0x4>

0800206e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Handler+0x18>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <SysTick_Handler+0x18>)
 80020a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	20000244 	.word	0x20000244

080020b4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  Drive_TIM9_IRQ();
 80020b8:	f7ff ffac 	bl	8002014 <Drive_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM9);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80020be:	f7ff fee5 	bl	8001e8c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40014000 	.word	0x40014000

080020cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  Motor_L_TIM3_IRQ();
 80020d0:	f7ff ff0c 	bl	8001eec <Motor_L_TIM3_IRQ>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM3);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <TIM3_IRQHandler+0x14>)
 80020d6:	f7ff fed9 	bl	8001e8c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40000400 	.word	0x40000400

080020e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
	return 1;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_kill>:

int _kill(int pid, int sig)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800210c:	f003 f9e2 	bl	80054d4 <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	2216      	movs	r2, #22
 8002114:	601a      	str	r2, [r3, #0]
	return -1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_exit>:

void _exit (int status)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800212a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffe7 	bl	8002102 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002134:	e7fe      	b.n	8002134 <_exit+0x12>

08002136 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e00a      	b.n	800215e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002148:	f3af 8000 	nop.w
 800214c:	4601      	mov	r1, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	60ba      	str	r2, [r7, #8]
 8002154:	b2ca      	uxtb	r2, r1
 8002156:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	dbf0      	blt.n	8002148 <_read+0x12>
	}

return len;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	e009      	b.n	8002196 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	60ba      	str	r2, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f002 f9d2 	bl	8004534 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	dbf1      	blt.n	8002182 <_write+0x12>
	}
	return len;
 800219e:	687b      	ldr	r3, [r7, #4]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_close>:

int _close(int file)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	return -1;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d0:	605a      	str	r2, [r3, #4]
	return 0;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_isatty>:

int _isatty(int file)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	return 1;
 80021e8:	2301      	movs	r3, #1
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
	return 0;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <_sbrk+0x5c>)
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <_sbrk+0x60>)
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <_sbrk+0x64>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <_sbrk+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d207      	bcs.n	8002250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002240:	f003 f948 	bl	80054d4 <__errno>
 8002244:	4603      	mov	r3, r0
 8002246:	220c      	movs	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224e:	e009      	b.n	8002264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <_sbrk+0x64>)
 8002260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20020000 	.word	0x20020000
 8002270:	00000400 	.word	0x00000400
 8002274:	20000248 	.word	0x20000248
 8002278:	20001518 	.word	0x20001518

0800227c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <SystemInit+0x20>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <SystemInit+0x20>)
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a6:	490e      	ldr	r1, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022bc:	4c0b      	ldr	r4, [pc, #44]	; (80022ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ca:	f7ff ffd7 	bl	800227c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ce:	f003 f907 	bl	80054e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d2:	f7ff fa3c 	bl	800174e <main>
  bx  lr    
 80022d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80022e4:	08007ebc 	.word	0x08007ebc
  ldr r2, =_sbss
 80022e8:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80022ec:	20001518 	.word	0x20001518

080022f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC_IRQHandler>

080022f2 <LL_ADC_SetCommonClock>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	605a      	str	r2, [r3, #4]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_REG_SetSequencerLength>:
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002372:	480a      	ldr	r0, [pc, #40]	; (800239c <LL_ADC_CommonInit+0x38>)
 8002374:	f7ff ffe3 	bl	800233e <LL_ADC_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ffb4 	bl	80022f2 <LL_ADC_SetCommonClock>
 800238a:	e001      	b.n	8002390 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40012000 	.word	0x40012000

080023a0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffc5 	bl	800233e <LL_ADC_IsEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d117      	bne.n	80023ea <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80023c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	6811      	ldr	r1, [r2, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	e001      	b.n	80023ee <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff99 	bl	800233e <LL_ADC_IsEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d12b      	bne.n	800246a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	e005      	b.n	800243a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <LL_ADC_REG_Init+0x80>)
 8002440:	4013      	ands	r3, r2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	68d2      	ldr	r2, [r2, #12]
 800244e:	4311      	orrs	r1, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	6912      	ldr	r2, [r2, #16]
 8002454:	430a      	orrs	r2, r1
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ff58 	bl	8002318 <LL_ADC_REG_SetSequencerLength>
 8002468:	e001      	b.n	800246e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	c0fffcfd 	.word	0xc0fffcfd

0800247c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <LL_EXTI_EnableIT_0_31+0x20>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4904      	ldr	r1, [pc, #16]	; (800249c <LL_EXTI_EnableIT_0_31+0x20>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40013c00 	.word	0x40013c00

080024a0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <LL_EXTI_DisableIT_0_31+0x24>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	4904      	ldr	r1, [pc, #16]	; (80024c4 <LL_EXTI_DisableIT_0_31+0x24>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4904      	ldr	r1, [pc, #16]	; (80024e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]

}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40013c00 	.word	0x40013c00

080024ec <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <LL_EXTI_DisableEvent_0_31+0x24>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	4904      	ldr	r1, [pc, #16]	; (8002510 <LL_EXTI_DisableEvent_0_31+0x24>)
 80024fe:	4013      	ands	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40013c00 	.word	0x40013c00

08002514 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	4904      	ldr	r1, [pc, #16]	; (8002534 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]

}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40013c00 	.word	0x40013c00

08002538 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	43db      	mvns	r3, r3
 8002548:	4904      	ldr	r1, [pc, #16]	; (800255c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800254a:	4013      	ands	r3, r2
 800254c:	608b      	str	r3, [r1, #8]

}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40013c00 	.word	0x40013c00

08002560 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	4904      	ldr	r1, [pc, #16]	; (8002580 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4313      	orrs	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40013c00 	.word	0x40013c00

08002584 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	43db      	mvns	r3, r3
 8002594:	4904      	ldr	r1, [pc, #16]	; (80025a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002596:	4013      	ands	r3, r2
 8002598:	60cb      	str	r3, [r1, #12]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40013c00 	.word	0x40013c00

080025ac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	791b      	ldrb	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d065      	beq.n	800268c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d06b      	beq.n	80026a0 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	795b      	ldrb	r3, [r3, #5]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d01c      	beq.n	800260a <LL_EXTI_Init+0x5e>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	dc25      	bgt.n	8002620 <LL_EXTI_Init+0x74>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <LL_EXTI_Init+0x32>
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d00b      	beq.n	80025f4 <LL_EXTI_Init+0x48>
 80025dc:	e020      	b.n	8002620 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff82 	bl	80024ec <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff45 	bl	800247c <LL_EXTI_EnableIT_0_31>
          break;
 80025f2:	e018      	b.n	8002626 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff51 	bl	80024a0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff60 	bl	80024c8 <LL_EXTI_EnableEvent_0_31>
          break;
 8002608:	e00d      	b.n	8002626 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff34 	bl	800247c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff55 	bl	80024c8 <LL_EXTI_EnableEvent_0_31>
          break;
 800261e:	e002      	b.n	8002626 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
          break;
 8002624:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	799b      	ldrb	r3, [r3, #6]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d038      	beq.n	80026a0 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	799b      	ldrb	r3, [r3, #6]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d01c      	beq.n	8002670 <LL_EXTI_Init+0xc4>
 8002636:	2b03      	cmp	r3, #3
 8002638:	dc25      	bgt.n	8002686 <LL_EXTI_Init+0xda>
 800263a:	2b01      	cmp	r3, #1
 800263c:	d002      	beq.n	8002644 <LL_EXTI_Init+0x98>
 800263e:	2b02      	cmp	r3, #2
 8002640:	d00b      	beq.n	800265a <LL_EXTI_Init+0xae>
 8002642:	e020      	b.n	8002686 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff9b 	bl	8002584 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff5e 	bl	8002514 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002658:	e022      	b.n	80026a0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff6a 	bl	8002538 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff79 	bl	8002560 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800266e:	e017      	b.n	80026a0 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff4d 	bl	8002514 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff6e 	bl	8002560 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002684:	e00c      	b.n	80026a0 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
            break;
 800268a:	e009      	b.n	80026a0 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff05 	bl	80024a0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff26 	bl	80024ec <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <LL_GPIO_SetPinMode>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	b089      	sub	sp, #36	; 0x24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	613b      	str	r3, [r7, #16]
  return result;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2103      	movs	r1, #3
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	401a      	ands	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	61bb      	str	r3, [r7, #24]
  return result;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	431a      	orrs	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_GPIO_SetPinOutputType>:
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	43db      	mvns	r3, r3
 800271c:	401a      	ands	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	431a      	orrs	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_GPIO_SetPinSpeed>:
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	613b      	str	r3, [r7, #16]
  return result;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2103      	movs	r1, #3
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	401a      	ands	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	61bb      	str	r3, [r7, #24]
  return result;
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	431a      	orrs	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	609a      	str	r2, [r3, #8]
}
 800278a:	bf00      	nop
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_GPIO_SetPinPull>:
{
 8002796:	b480      	push	{r7}
 8002798:	b089      	sub	sp, #36	; 0x24
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	613b      	str	r3, [r7, #16]
  return result;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2103      	movs	r1, #3
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	401a      	ands	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	61bb      	str	r3, [r7, #24]
  return result;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_GPIO_SetAFPin_0_7>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	613b      	str	r3, [r7, #16]
  return result;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	210f      	movs	r1, #15
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	401a      	ands	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	61bb      	str	r3, [r7, #24]
  return result;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	431a      	orrs	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	bf00      	nop
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_GPIO_SetAFPin_8_15>:
{
 8002852:	b480      	push	{r7}
 8002854:	b089      	sub	sp, #36	; 0x24
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	613b      	str	r3, [r7, #16]
  return result;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	210f      	movs	r1, #15
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	61bb      	str	r3, [r7, #24]
  return result;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	431a      	orrs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028a8:	bf00      	nop
 80028aa:	3724      	adds	r7, #36	; 0x24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	613b      	str	r3, [r7, #16]
  return result;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028de:	e050      	b.n	8002982 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d042      	beq.n	800297c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d003      	beq.n	8002906 <LL_GPIO_Init+0x52>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d10d      	bne.n	8002922 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	461a      	mov	r2, r3
 800290c:	69b9      	ldr	r1, [r7, #24]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff12 	bl	8002738 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	461a      	mov	r2, r3
 800291a:	69b9      	ldr	r1, [r7, #24]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fef3 	bl	8002708 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	461a      	mov	r2, r3
 8002928:	69b9      	ldr	r1, [r7, #24]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff33 	bl	8002796 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d11a      	bne.n	800296e <LL_GPIO_Init+0xba>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	60bb      	str	r3, [r7, #8]
  return result;
 8002944:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b07      	cmp	r3, #7
 800294e:	d807      	bhi.n	8002960 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	461a      	mov	r2, r3
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff4b 	bl	80027f4 <LL_GPIO_SetAFPin_0_7>
 800295e:	e006      	b.n	800296e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	461a      	mov	r2, r3
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff72 	bl	8002852 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	69b9      	ldr	r1, [r7, #24]
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fe97 	bl	80026aa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1a7      	bne.n	80028e0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <LL_I2C_Enable>:
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_I2C_Disable>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0201 	bic.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_I2C_ConfigFilters>:
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f023 021f 	bic.w	r2, r3, #31
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	430b      	orrs	r3, r1
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_I2C_SetOwnAddress1>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4a42      	ldr	r2, [pc, #264]	; (8002b5c <LL_I2C_ConfigSpeed+0x124>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0c9b      	lsrs	r3, r3, #18
 8002a58:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	493a      	ldr	r1, [pc, #232]	; (8002b60 <LL_I2C_ConfigSpeed+0x128>)
 8002a76:	428b      	cmp	r3, r1
 8002a78:	d802      	bhi.n	8002a80 <LL_I2C_ConfigSpeed+0x48>
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	e009      	b.n	8002a94 <LL_I2C_ConfigSpeed+0x5c>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4936      	ldr	r1, [pc, #216]	; (8002b64 <LL_I2C_ConfigSpeed+0x12c>)
 8002a8c:	fba1 1303 	umull	r1, r3, r1, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	3301      	adds	r3, #1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <LL_I2C_ConfigSpeed+0x128>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d939      	bls.n	8002b16 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d117      	bne.n	8002ad8 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad0:	e01d      	b.n	8002b0e <LL_I2C_ConfigSpeed+0xd6>
 8002ad2:	f248 0301 	movw	r3, #32769	; 0x8001
 8002ad6:	e01a      	b.n	8002b0e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b08:	e001      	b.n	8002b0e <LL_I2C_ConfigSpeed+0xd6>
 8002b0a:	f248 0301 	movw	r3, #32769	; 0x8001
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e011      	b.n	8002b3a <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b24:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	e000      	b.n	8002b38 <LL_I2C_ConfigSpeed+0x100>
 8002b36:	2304      	movs	r3, #4
 8002b38:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	61da      	str	r2, [r3, #28]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	431bde83 	.word	0x431bde83
 8002b60:	000186a0 	.word	0x000186a0
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 021a 	bic.w	r2, r3, #26
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fefb 	bl	80029ba <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f89d 	bl	8002d08 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68d9      	ldr	r1, [r3, #12]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fefe 	bl	80029da <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002bde:	6939      	ldr	r1, [r7, #16]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff25 	bl	8002a38 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff04 	bl	8002a06 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ffaf 	bl	8002b68 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fec5 	bl	800299a <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffb9 	bl	8002b8e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <LL_RCC_GetSysClkSource>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <LL_RCC_GetSysClkSource+0x18>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800

08002c44 <LL_RCC_GetAHBPrescaler>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <LL_RCC_GetAHBPrescaler+0x18>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <LL_RCC_GetAPB1Prescaler>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <LL_RCC_GetAPB2Prescaler>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <LL_RCC_PLL_GetMainSource+0x18>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <LL_RCC_PLL_GetN+0x18>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <LL_RCC_PLL_GetP+0x18>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <LL_RCC_PLL_GetDivider+0x18>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002d10:	f000 f820 	bl	8002d54 <RCC_GetSystemClockFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f840 	bl	8002da4 <RCC_GetHCLKClockFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f84e 	bl	8002dd0 <RCC_GetPCLK1ClockFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f85a 	bl	8002df8 <RCC_GetPCLK2ClockFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60da      	str	r2, [r3, #12]
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002d5e:	f7ff ff63 	bl	8002c28 <LL_RCC_GetSysClkSource>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d00c      	beq.n	8002d82 <RCC_GetSystemClockFreq+0x2e>
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d80f      	bhi.n	8002d8c <RCC_GetSystemClockFreq+0x38>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <RCC_GetSystemClockFreq+0x22>
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d003      	beq.n	8002d7c <RCC_GetSystemClockFreq+0x28>
 8002d74:	e00a      	b.n	8002d8c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <RCC_GetSystemClockFreq+0x48>)
 8002d78:	607b      	str	r3, [r7, #4]
      break;
 8002d7a:	e00a      	b.n	8002d92 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <RCC_GetSystemClockFreq+0x4c>)
 8002d7e:	607b      	str	r3, [r7, #4]
      break;
 8002d80:	e007      	b.n	8002d92 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002d82:	2008      	movs	r0, #8
 8002d84:	f000 f84c 	bl	8002e20 <RCC_PLL_GetFreqDomain_SYS>
 8002d88:	6078      	str	r0, [r7, #4]
      break;
 8002d8a:	e002      	b.n	8002d92 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <RCC_GetSystemClockFreq+0x48>)
 8002d8e:	607b      	str	r3, [r7, #4]
      break;
 8002d90:	bf00      	nop
  }

  return frequency;
 8002d92:	687b      	ldr	r3, [r7, #4]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200

08002da4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002dac:	f7ff ff4a 	bl	8002c44 <LL_RCC_GetAHBPrescaler>
 8002db0:	4603      	mov	r3, r0
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <RCC_GetHCLKClockFreq+0x28>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	40d3      	lsrs	r3, r2
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	080078a4 	.word	0x080078a4

08002dd0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002dd8:	f7ff ff42 	bl	8002c60 <LL_RCC_GetAPB1Prescaler>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	0a9b      	lsrs	r3, r3, #10
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <RCC_GetPCLK1ClockFreq+0x24>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	461a      	mov	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	40d3      	lsrs	r3, r2
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	080078b4 	.word	0x080078b4

08002df8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002e00:	f7ff ff3c 	bl	8002c7c <LL_RCC_GetAPB2Prescaler>
 8002e04:	4603      	mov	r3, r0
 8002e06:	0b5b      	lsrs	r3, r3, #13
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <RCC_GetPCLK2ClockFreq+0x24>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	40d3      	lsrs	r3, r2
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	080078b4 	.word	0x080078b4

08002e20 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002e34:	f7ff ff30 	bl	8002c98 <LL_RCC_PLL_GetMainSource>
 8002e38:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e46:	d003      	beq.n	8002e50 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002e48:	e005      	b.n	8002e56 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	e005      	b.n	8002e5c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002e52:	617b      	str	r3, [r7, #20]
      break;
 8002e54:	e002      	b.n	8002e5c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d113      	bne.n	8002e8a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e62:	f7ff ff43 	bl	8002cec <LL_RCC_PLL_GetDivider>
 8002e66:	4602      	mov	r2, r0
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fbb3 f4f2 	udiv	r4, r3, r2
 8002e6e:	f7ff ff21 	bl	8002cb4 <LL_RCC_PLL_GetN>
 8002e72:	4603      	mov	r3, r0
 8002e74:	fb03 f404 	mul.w	r4, r3, r4
 8002e78:	f7ff ff2a 	bl	8002cd0 <LL_RCC_PLL_GetP>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	3301      	adds	r3, #1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e88:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002e8a:	693b      	ldr	r3, [r7, #16]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	00f42400 	.word	0x00f42400
 8002e98:	007a1200 	.word	0x007a1200

08002e9c <LL_SPI_IsEnabled>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d101      	bne.n	8002eb4 <LL_SPI_IsEnabled+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_SPI_IsEnabled+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffd3 	bl	8002e9c <LL_SPI_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d139      	bne.n	8002f70 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f04:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	6811      	ldr	r1, [r2, #0]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	4311      	orrs	r1, r2
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	6892      	ldr	r2, [r2, #8]
 8002f16:	4311      	orrs	r1, r2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	68d2      	ldr	r2, [r2, #12]
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	6912      	ldr	r2, [r2, #16]
 8002f22:	4311      	orrs	r1, r2
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	6952      	ldr	r2, [r2, #20]
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	6992      	ldr	r2, [r2, #24]
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	69d2      	ldr	r2, [r2, #28]
 8002f34:	4311      	orrs	r1, r2
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	6a12      	ldr	r2, [r2, #32]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 0204 	bic.w	r2, r3, #4
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	d105      	bne.n	8002f6c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffab 	bl	8002ec2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	61da      	str	r2, [r3, #28]
  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <LL_TIM_SetPrescaler>:
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_TIM_SetAutoReload>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_TIM_SetRepetitionCounter>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	615a      	str	r2, [r3, #20]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <LL_TIM_Init+0xd8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00f      	beq.n	8003034 <LL_TIM_Init+0x38>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d00b      	beq.n	8003034 <LL_TIM_Init+0x38>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a2e      	ldr	r2, [pc, #184]	; (80030d8 <LL_TIM_Init+0xdc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d007      	beq.n	8003034 <LL_TIM_Init+0x38>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <LL_TIM_Init+0xe0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <LL_TIM_Init+0x38>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <LL_TIM_Init+0xe4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d106      	bne.n	8003042 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <LL_TIM_Init+0xd8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01b      	beq.n	8003082 <LL_TIM_Init+0x86>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d017      	beq.n	8003082 <LL_TIM_Init+0x86>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a20      	ldr	r2, [pc, #128]	; (80030d8 <LL_TIM_Init+0xdc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <LL_TIM_Init+0x86>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <LL_TIM_Init+0xe0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00f      	beq.n	8003082 <LL_TIM_Init+0x86>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <LL_TIM_Init+0xe4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00b      	beq.n	8003082 <LL_TIM_Init+0x86>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <LL_TIM_Init+0xe8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <LL_TIM_Init+0x86>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <LL_TIM_Init+0xec>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <LL_TIM_Init+0x86>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <LL_TIM_Init+0xf0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d106      	bne.n	8003090 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff80 	bl	8002fa2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff6c 	bl	8002f86 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <LL_TIM_Init+0xd8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d105      	bne.n	80030c2 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff7e 	bl	8002fbe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff89 	bl	8002fda <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40014000 	.word	0x40014000
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800

080030f0 <LL_USART_IsEnabled>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003104:	bf0c      	ite	eq
 8003106:	2301      	moveq	r3, #1
 8003108:	2300      	movne	r3, #0
 800310a:	b2db      	uxtb	r3, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_USART_SetStopBitsLength>:
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_USART_SetHWFlowCtrl>:
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	615a      	str	r2, [r3, #20]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_USART_SetBaudRate>:
{
 8003164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003168:	b0c0      	sub	sp, #256	; 0x100
 800316a:	af00      	add	r7, sp, #0
 800316c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003170:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003174:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003178:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	f040 810c 	bne.w	80033a0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003188:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6639      	str	r1, [r7, #96]	; 0x60
 80031a2:	415b      	adcs	r3, r3
 80031a4:	667b      	str	r3, [r7, #100]	; 0x64
 80031a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80031aa:	4621      	mov	r1, r4
 80031ac:	eb12 0801 	adds.w	r8, r2, r1
 80031b0:	4629      	mov	r1, r5
 80031b2:	eb43 0901 	adc.w	r9, r3, r1
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ca:	4690      	mov	r8, r2
 80031cc:	4699      	mov	r9, r3
 80031ce:	4623      	mov	r3, r4
 80031d0:	eb18 0303 	adds.w	r3, r8, r3
 80031d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031d8:	462b      	mov	r3, r5
 80031da:	eb49 0303 	adc.w	r3, r9, r3
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031e6:	2200      	movs	r2, #0
 80031e8:	469a      	mov	sl, r3
 80031ea:	4693      	mov	fp, r2
 80031ec:	eb1a 030a 	adds.w	r3, sl, sl
 80031f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80031f2:	eb4b 030b 	adc.w	r3, fp, fp
 80031f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003200:	f7fd fcda 	bl	8000bb8 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <LL_USART_SetBaudRate+0x238>)
 800320a:	fba3 2302 	umull	r2, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	b29b      	uxth	r3, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	b29c      	uxth	r4, r3
 8003216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003220:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003224:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	1891      	adds	r1, r2, r2
 800322e:	6539      	str	r1, [r7, #80]	; 0x50
 8003230:	415b      	adcs	r3, r3
 8003232:	657b      	str	r3, [r7, #84]	; 0x54
 8003234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003238:	4641      	mov	r1, r8
 800323a:	1851      	adds	r1, r2, r1
 800323c:	64b9      	str	r1, [r7, #72]	; 0x48
 800323e:	4649      	mov	r1, r9
 8003240:	414b      	adcs	r3, r1
 8003242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003250:	4659      	mov	r1, fp
 8003252:	00cb      	lsls	r3, r1, #3
 8003254:	4651      	mov	r1, sl
 8003256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325a:	4651      	mov	r1, sl
 800325c:	00ca      	lsls	r2, r1, #3
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	4603      	mov	r3, r0
 8003264:	4642      	mov	r2, r8
 8003266:	189b      	adds	r3, r3, r2
 8003268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800326c:	464b      	mov	r3, r9
 800326e:	460a      	mov	r2, r1
 8003270:	eb42 0303 	adc.w	r3, r2, r3
 8003274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003278:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800327c:	2200      	movs	r2, #0
 800327e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003282:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003286:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800328a:	460b      	mov	r3, r1
 800328c:	18db      	adds	r3, r3, r3
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
 8003290:	4613      	mov	r3, r2
 8003292:	eb42 0303 	adc.w	r3, r2, r3
 8003296:	647b      	str	r3, [r7, #68]	; 0x44
 8003298:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800329c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80032a0:	f7fd fc8a 	bl	8000bb8 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4611      	mov	r1, r2
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <LL_USART_SetBaudRate+0x238>)
 80032ac:	fba3 2301 	umull	r2, r3, r3, r1
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	2264      	movs	r2, #100	; 0x64
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	1acb      	subs	r3, r1, r3
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <LL_USART_SetBaudRate+0x238>)
 80032c2:	fba3 2302 	umull	r2, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4423      	add	r3, r4
 80032d6:	b29c      	uxth	r4, r3
 80032d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032e2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032e6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80032ea:	4642      	mov	r2, r8
 80032ec:	464b      	mov	r3, r9
 80032ee:	1891      	adds	r1, r2, r2
 80032f0:	63b9      	str	r1, [r7, #56]	; 0x38
 80032f2:	415b      	adcs	r3, r3
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032fa:	4641      	mov	r1, r8
 80032fc:	1851      	adds	r1, r2, r1
 80032fe:	6339      	str	r1, [r7, #48]	; 0x30
 8003300:	4649      	mov	r1, r9
 8003302:	414b      	adcs	r3, r1
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003312:	4659      	mov	r1, fp
 8003314:	00cb      	lsls	r3, r1, #3
 8003316:	4651      	mov	r1, sl
 8003318:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331c:	4651      	mov	r1, sl
 800331e:	00ca      	lsls	r2, r1, #3
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	4603      	mov	r3, r0
 8003326:	4642      	mov	r2, r8
 8003328:	189b      	adds	r3, r3, r2
 800332a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800332e:	464b      	mov	r3, r9
 8003330:	460a      	mov	r2, r1
 8003332:	eb42 0303 	adc.w	r3, r2, r3
 8003336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800333a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800333e:	2200      	movs	r2, #0
 8003340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003344:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003348:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800334c:	460b      	mov	r3, r1
 800334e:	18db      	adds	r3, r3, r3
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
 8003352:	4613      	mov	r3, r2
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800335e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003362:	f7fd fc29 	bl	8000bb8 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <LL_USART_SetBaudRate+0x238>)
 800336c:	fba3 1302 	umull	r1, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a07      	ldr	r2, [pc, #28]	; (800339c <LL_USART_SetBaudRate+0x238>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	b29b      	uxth	r3, r3
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	b29b      	uxth	r3, r3
 800338e:	4423      	add	r3, r4
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	e108      	b.n	80035ae <LL_USART_SetBaudRate+0x44a>
 800339c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80033a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033ae:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80033b2:	4642      	mov	r2, r8
 80033b4:	464b      	mov	r3, r9
 80033b6:	1891      	adds	r1, r2, r2
 80033b8:	6239      	str	r1, [r7, #32]
 80033ba:	415b      	adcs	r3, r3
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c2:	4641      	mov	r1, r8
 80033c4:	1854      	adds	r4, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb43 0501 	adc.w	r5, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	00eb      	lsls	r3, r5, #3
 80033d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033da:	00e2      	lsls	r2, r4, #3
 80033dc:	4614      	mov	r4, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	4643      	mov	r3, r8
 80033e2:	18e3      	adds	r3, r4, r3
 80033e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e8:	464b      	mov	r3, r9
 80033ea:	eb45 0303 	adc.w	r3, r5, r3
 80033ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800340c:	4629      	mov	r1, r5
 800340e:	008b      	lsls	r3, r1, #2
 8003410:	4621      	mov	r1, r4
 8003412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003416:	4621      	mov	r1, r4
 8003418:	008a      	lsls	r2, r1, #2
 800341a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800341e:	f7fd fbcb 	bl	8000bb8 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4b65      	ldr	r3, [pc, #404]	; (80035bc <LL_USART_SetBaudRate+0x458>)
 8003428:	fba3 2302 	umull	r2, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	b29b      	uxth	r3, r3
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	b29c      	uxth	r4, r3
 8003434:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003438:	2200      	movs	r2, #0
 800343a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003442:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003446:	4642      	mov	r2, r8
 8003448:	464b      	mov	r3, r9
 800344a:	1891      	adds	r1, r2, r2
 800344c:	61b9      	str	r1, [r7, #24]
 800344e:	415b      	adcs	r3, r3
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003456:	4641      	mov	r1, r8
 8003458:	1851      	adds	r1, r2, r1
 800345a:	6139      	str	r1, [r7, #16]
 800345c:	4649      	mov	r1, r9
 800345e:	414b      	adcs	r3, r1
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800346e:	4659      	mov	r1, fp
 8003470:	00cb      	lsls	r3, r1, #3
 8003472:	4651      	mov	r1, sl
 8003474:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003478:	4651      	mov	r1, sl
 800347a:	00ca      	lsls	r2, r1, #3
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	4603      	mov	r3, r0
 8003482:	4642      	mov	r2, r8
 8003484:	189b      	adds	r3, r3, r2
 8003486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800348a:	464b      	mov	r3, r9
 800348c:	460a      	mov	r2, r1
 800348e:	eb42 0303 	adc.w	r3, r2, r3
 8003492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003496:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800349a:	2200      	movs	r2, #0
 800349c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80034b0:	4649      	mov	r1, r9
 80034b2:	008b      	lsls	r3, r1, #2
 80034b4:	4641      	mov	r1, r8
 80034b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ba:	4641      	mov	r1, r8
 80034bc:	008a      	lsls	r2, r1, #2
 80034be:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80034c2:	f7fd fb79 	bl	8000bb8 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <LL_USART_SetBaudRate+0x458>)
 80034ce:	fba3 2301 	umull	r2, r3, r3, r1
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	3332      	adds	r3, #50	; 0x32
 80034e0:	4a36      	ldr	r2, [pc, #216]	; (80035bc <LL_USART_SetBaudRate+0x458>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4423      	add	r3, r4
 80034f2:	b29c      	uxth	r4, r3
 80034f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034f8:	2200      	movs	r2, #0
 80034fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80034fc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034fe:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003502:	4642      	mov	r2, r8
 8003504:	464b      	mov	r3, r9
 8003506:	1891      	adds	r1, r2, r2
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	415b      	adcs	r3, r3
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003512:	4641      	mov	r1, r8
 8003514:	1851      	adds	r1, r2, r1
 8003516:	6039      	str	r1, [r7, #0]
 8003518:	4649      	mov	r1, r9
 800351a:	414b      	adcs	r3, r1
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800352a:	4659      	mov	r1, fp
 800352c:	00cb      	lsls	r3, r1, #3
 800352e:	4651      	mov	r1, sl
 8003530:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003534:	4651      	mov	r1, sl
 8003536:	00ca      	lsls	r2, r1, #3
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	4603      	mov	r3, r0
 800353e:	4642      	mov	r2, r8
 8003540:	189b      	adds	r3, r3, r2
 8003542:	673b      	str	r3, [r7, #112]	; 0x70
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	677b      	str	r3, [r7, #116]	; 0x74
 800354e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003552:	2200      	movs	r2, #0
 8003554:	66bb      	str	r3, [r7, #104]	; 0x68
 8003556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003564:	4649      	mov	r1, r9
 8003566:	008b      	lsls	r3, r1, #2
 8003568:	4641      	mov	r1, r8
 800356a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800356e:	4641      	mov	r1, r8
 8003570:	008a      	lsls	r2, r1, #2
 8003572:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003576:	f7fd fb1f 	bl	8000bb8 <__aeabi_uldivmod>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <LL_USART_SetBaudRate+0x458>)
 8003580:	fba3 1302 	umull	r1, r3, r3, r2
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	2164      	movs	r1, #100	; 0x64
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	3332      	adds	r3, #50	; 0x32
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <LL_USART_SetBaudRate+0x458>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	b29b      	uxth	r3, r3
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4423      	add	r3, r4
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ac:	609a      	str	r2, [r3, #8]
}
 80035ae:	bf00      	nop
 80035b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035b4:	46bd      	mov	sp, r7
 80035b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ba:	bf00      	nop
 80035bc:	51eb851f 	.word	0x51eb851f

080035c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fd8c 	bl	80030f0 <LL_USART_IsEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d149      	bne.n	8003672 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035e6:	f023 030c 	bic.w	r3, r3, #12
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	6851      	ldr	r1, [r2, #4]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	4311      	orrs	r1, r2
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	6912      	ldr	r2, [r2, #16]
 80035f8:	4311      	orrs	r1, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6992      	ldr	r2, [r2, #24]
 80035fe:	430a      	orrs	r2, r1
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fd83 	bl	8003118 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fd90 	bl	800313e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800361e:	f107 0308 	add.w	r3, r7, #8
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fb70 	bl	8002d08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a14      	ldr	r2, [pc, #80]	; (800367c <LL_USART_Init+0xbc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d102      	bne.n	8003636 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e00c      	b.n	8003650 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a11      	ldr	r2, [pc, #68]	; (8003680 <LL_USART_Init+0xc0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d102      	bne.n	8003644 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e005      	b.n	8003650 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <LL_USART_Init+0xc4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800365e:	2300      	movs	r3, #0
 8003660:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fd79 	bl	8003164 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003672:	7ffb      	ldrb	r3, [r7, #31]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40011000 	.word	0x40011000
 8003680:	40004400 	.word	0x40004400
 8003684:	40011400 	.word	0x40011400

08003688 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <LL_InitTick+0x30>)
 800369c:	3b01      	subs	r3, #1
 800369e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <LL_InitTick+0x30>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a6:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <LL_InitTick+0x30>)
 80036a8:	2205      	movs	r2, #5
 80036aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000e010 	.word	0xe000e010

080036bc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80036c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ffdd 	bl	8003688 <LL_InitTick>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <LL_SetSystemCoreClock+0x1c>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000000 	.word	0x20000000

080036f8 <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
	_file = file;
 8003704:	4a07      	ldr	r2, [pc, #28]	; (8003724 <__Custom_Exception_Set_Message+0x2c>)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6013      	str	r3, [r2, #0]
	_line = line;
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <__Custom_Exception_Set_Message+0x30>)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6013      	str	r3, [r2, #0]
	_message = message;
 8003710:	4a06      	ldr	r2, [pc, #24]	; (800372c <__Custom_Exception_Set_Message+0x34>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6013      	str	r3, [r2, #0]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	2000024c 	.word	0x2000024c
 8003728:	20000250 	.word	0x20000250
 800372c:	20000254 	.word	0x20000254

08003730 <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8003734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003738:	4803      	ldr	r0, [pc, #12]	; (8003748 <Custom_FileSystem_Load+0x18>)
 800373a:	f000 f851 	bl	80037e0 <Custom_Flash_Read>
	filesystemLoaded = true;
 800373e:	4b03      	ldr	r3, [pc, #12]	; (800374c <Custom_FileSystem_Load+0x1c>)
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000258 	.word	0x20000258
 800374c:	20001259 	.word	0x20001259

08003750 <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <Custom_Flash_Check_Error+0x78>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <Custom_Flash_Check_Error+0x24>
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <Custom_Flash_Check_Error+0x7c>)
 8003768:	2113      	movs	r1, #19
 800376a:	4819      	ldr	r0, [pc, #100]	; (80037d0 <Custom_Flash_Check_Error+0x80>)
 800376c:	f7ff ffc4 	bl	80036f8 <__Custom_Exception_Set_Message>
 8003770:	2300      	movs	r3, #0
 8003772:	e024      	b.n	80037be <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <Custom_Flash_Check_Error+0x3c>
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <Custom_Flash_Check_Error+0x84>)
 8003780:	2114      	movs	r1, #20
 8003782:	4813      	ldr	r0, [pc, #76]	; (80037d0 <Custom_Flash_Check_Error+0x80>)
 8003784:	f7ff ffb8 	bl	80036f8 <__Custom_Exception_Set_Message>
 8003788:	2300      	movs	r3, #0
 800378a:	e018      	b.n	80037be <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <Custom_Flash_Check_Error+0x54>
 8003796:	4a10      	ldr	r2, [pc, #64]	; (80037d8 <Custom_Flash_Check_Error+0x88>)
 8003798:	2115      	movs	r1, #21
 800379a:	480d      	ldr	r0, [pc, #52]	; (80037d0 <Custom_Flash_Check_Error+0x80>)
 800379c:	f7ff ffac 	bl	80036f8 <__Custom_Exception_Set_Message>
 80037a0:	2300      	movs	r3, #0
 80037a2:	e00c      	b.n	80037be <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <Custom_Flash_Check_Error+0x6c>
 80037ae:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <Custom_Flash_Check_Error+0x8c>)
 80037b0:	2116      	movs	r1, #22
 80037b2:	4807      	ldr	r0, [pc, #28]	; (80037d0 <Custom_Flash_Check_Error+0x80>)
 80037b4:	f7ff ffa0 	bl	80036f8 <__Custom_Exception_Set_Message>
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <Custom_Flash_Check_Error+0x6e>

	return true;
 80037bc:	2301      	movs	r3, #1
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00
 80037cc:	08007750 	.word	0x08007750
 80037d0:	0800776c 	.word	0x0800776c
 80037d4:	08007794 	.word	0x08007794
 80037d8:	080077b4 	.word	0x080077b4
 80037dc:	080077d4 	.word	0x080077d4

080037e0 <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037f0:	d306      	bcc.n	8003800 <Custom_Flash_Read+0x20>
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <Custom_Flash_Read+0x5c>)
 80037f4:	211d      	movs	r1, #29
 80037f6:	4812      	ldr	r0, [pc, #72]	; (8003840 <Custom_Flash_Read+0x60>)
 80037f8:	f7ff ff7e 	bl	80036f8 <__Custom_Exception_Set_Message>
 80037fc:	2300      	movs	r3, #0
 80037fe:	e019      	b.n	8003834 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e00f      	b.n	8003826 <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800380c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8003810:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	440b      	add	r3, r1
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d8eb      	bhi.n	8003806 <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 800382e:	f7ff ff8f 	bl	8003750 <Custom_Flash_Check_Error>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	080077ec 	.word	0x080077ec
 8003840:	0800776c 	.word	0x0800776c

08003844 <LL_SPI_Enable>:
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	601a      	str	r2, [r3, #0]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_SPI_SetTransferDirection>:
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d101      	bne.n	80038a2 <LL_SPI_IsActiveFlag_TXE+0x18>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d101      	bne.n	80038c8 <LL_SPI_IsActiveFlag_BSY+0x18>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <LL_SPI_IsActiveFlag_BSY+0x1a>
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	330c      	adds	r3, #12
 80038e6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <Custom_GPIO_Set>:
		uint32_t value) {
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	43db      	mvns	r3, r3
 800390e:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <Custom_GPIO_Set+0x22>
 8003916:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800391a:	e000      	b.n	800391e <Custom_GPIO_Set+0x24>
 800391c:	2100      	movs	r1, #0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	400b      	ands	r3, r1
 8003922:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	615a      	str	r2, [r3, #20]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 800393e:	bf00      	nop
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8003942:	f7ff ffa2 	bl	800388a <LL_SPI_IsActiveFlag_TXE>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f9      	beq.n	8003940 <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	4619      	mov	r1, r3
 8003950:	4807      	ldr	r0, [pc, #28]	; (8003970 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8003952:	f7ff ffc0 	bl	80038d6 <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 8003956:	bf00      	nop
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 800395a:	f7ff ffa9 	bl	80038b0 <LL_SPI_IsActiveFlag_BSY>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f9      	bne.n	8003958 <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40003800 	.word	0x40003800

08003974 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 800397e:	2200      	movs	r2, #0
 8003980:	2110      	movs	r1, #16
 8003982:	4811      	ldr	r0, [pc, #68]	; (80039c8 <Custom_OLED_Write_Command+0x54>)
 8003984:	f7ff ffb9 	bl	80038fa <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8003988:	2200      	movs	r2, #0
 800398a:	2104      	movs	r1, #4
 800398c:	480f      	ldr	r0, [pc, #60]	; (80039cc <Custom_OLED_Write_Command+0x58>)
 800398e:	f7ff ffb4 	bl	80038fa <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	e009      	b.n	80039ac <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ffc7 	bl	8003934 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d8f1      	bhi.n	8003998 <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 80039b4:	2201      	movs	r2, #1
 80039b6:	2104      	movs	r1, #4
 80039b8:	4804      	ldr	r0, [pc, #16]	; (80039cc <Custom_OLED_Write_Command+0x58>)
 80039ba:	f7ff ff9e 	bl	80038fa <Custom_GPIO_Set>
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40020000 	.word	0x40020000
 80039cc:	40020400 	.word	0x40020400

080039d0 <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 80039da:	2201      	movs	r2, #1
 80039dc:	2110      	movs	r1, #16
 80039de:	4817      	ldr	r0, [pc, #92]	; (8003a3c <Custom_OLED_Write_Data+0x6c>)
 80039e0:	f7ff ff8b 	bl	80038fa <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2104      	movs	r1, #4
 80039e8:	4815      	ldr	r0, [pc, #84]	; (8003a40 <Custom_OLED_Write_Data+0x70>)
 80039ea:	f7ff ff86 	bl	80038fa <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e016      	b.n	8003a22 <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff95 	bl	8003934 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ff8c 	bl	8003934 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d8e4      	bhi.n	80039f4 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2104      	movs	r1, #4
 8003a2e:	4804      	ldr	r0, [pc, #16]	; (8003a40 <Custom_OLED_Write_Data+0x70>)
 8003a30:	f7ff ff63 	bl	80038fa <Custom_GPIO_Set>
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	40020400 	.word	0x40020400

08003a44 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4623      	mov	r3, r4
 8003a54:	71fb      	strb	r3, [r7, #7]
 8003a56:	4603      	mov	r3, r0
 8003a58:	71bb      	strb	r3, [r7, #6]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	717b      	strb	r3, [r7, #5]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 8003a62:	2315      	movs	r3, #21
 8003a64:	723b      	strb	r3, [r7, #8]
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	727b      	strb	r3, [r7, #9]
 8003a6a:	797b      	ldrb	r3, [r7, #5]
 8003a6c:	72bb      	strb	r3, [r7, #10]
 8003a6e:	2375      	movs	r3, #117	; 0x75
 8003a70:	72fb      	strb	r3, [r7, #11]
 8003a72:	79bb      	ldrb	r3, [r7, #6]
 8003a74:	733b      	strb	r3, [r7, #12]
 8003a76:	793b      	ldrb	r3, [r7, #4]
 8003a78:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	2106      	movs	r1, #6
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff77 	bl	8003974 <Custom_OLED_Write_Command>
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd90      	pop	{r4, r7, pc}

08003a8e <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 8003a94:	2300      	movs	r3, #0
 8003a96:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 8003a98:	233f      	movs	r3, #63	; 0x3f
 8003a9a:	225f      	movs	r2, #95	; 0x5f
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7ff ffd0 	bl	8003a44 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	e007      	b.n	8003aba <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff8e 	bl	80039d0 <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003ac0:	dbf3      	blt.n	8003aaa <Custom_OLED_Clear+0x1c>
    }
}
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <Custom_OLED_Init>:

void Custom_OLED_Init() {
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 8003ad2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003ad6:	480e      	ldr	r0, [pc, #56]	; (8003b10 <Custom_OLED_Init+0x44>)
 8003ad8:	f7ff fec4 	bl	8003864 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <Custom_OLED_Init+0x44>)
 8003ade:	f7ff feb1 	bl	8003844 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <Custom_OLED_Init+0x48>)
 8003ae4:	463c      	mov	r4, r7
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003af4:	6020      	str	r0, [r4, #0]
 8003af6:	3404      	adds	r4, #4
 8003af8:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 8003afa:	463b      	mov	r3, r7
 8003afc:	2125      	movs	r1, #37	; 0x25
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff38 	bl	8003974 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8003b04:	f7ff ffc3 	bl	8003a8e <Custom_OLED_Clear>
}
 8003b08:	bf00      	nop
 8003b0a:	3728      	adds	r7, #40	; 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b10:	40003800 	.word	0x40003800
 8003b14:	08007834 	.word	0x08007834

08003b18 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4623      	mov	r3, r4
 8003b28:	71fb      	strb	r3, [r7, #7]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80bb      	strh	r3, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	71bb      	strb	r3, [r7, #6]
 8003b32:	4613      	mov	r3, r2
 8003b34:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 8003b36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	79bb      	ldrb	r3, [r7, #6]
 8003b44:	4413      	add	r3, r2
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 8003b4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	4413      	add	r3, r2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b5f      	cmp	r3, #95	; 0x5f
 8003b62:	d802      	bhi.n	8003b6a <Custom_OLED_Putchar+0x52>
 8003b64:	7bbb      	ldrb	r3, [r7, #14]
 8003b66:	2b3f      	cmp	r3, #63	; 0x3f
 8003b68:	d902      	bls.n	8003b70 <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b6e:	e06a      	b.n	8003c46 <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 8003b70:	7bbb      	ldrb	r3, [r7, #14]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	78f9      	ldrb	r1, [r7, #3]
 8003b76:	79b8      	ldrb	r0, [r7, #6]
 8003b78:	f7ff ff64 	bl	8003a44 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 8003b7c:	79fa      	ldrb	r2, [r7, #7]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	4a32      	ldr	r2, [pc, #200]	; (8003c50 <Custom_OLED_Putchar+0x138>)
 8003b86:	4413      	add	r3, r2
 8003b88:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e048      	b.n	8003c22 <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e03f      	b.n	8003c16 <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e034      	b.n	8003c06 <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	e029      	b.n	8003bf6 <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fa42 f303 	asr.w	r3, r2, r3
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <Custom_OLED_Putchar+0xa6>
 8003bba:	88b8      	ldrh	r0, [r7, #4]
 8003bbc:	e000      	b.n	8003bc0 <Custom_OLED_Putchar+0xa8>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003bc4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003bc8:	69f9      	ldr	r1, [r7, #28]
 8003bca:	fb02 f101 	mul.w	r1, r2, r1
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	00da      	lsls	r2, r3, #3
 8003bd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	441a      	add	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <Custom_OLED_Putchar+0x13c>)
 8003bea:	4601      	mov	r1, r0
 8003bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbd0      	blt.n	8003ba2 <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3301      	adds	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	dbc5      	blt.n	8003b9c <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b07      	cmp	r3, #7
 8003c1a:	ddbc      	ble.n	8003b96 <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	ddb3      	ble.n	8003b90 <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 8003c28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c2c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003c30:	fb03 f202 	mul.w	r2, r3, r2
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4805      	ldr	r0, [pc, #20]	; (8003c54 <Custom_OLED_Putchar+0x13c>)
 8003c40:	f7ff fec6 	bl	80039d0 <Custom_OLED_Write_Data>
	return 0;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	080078bc 	.word	0x080078bc
 8003c54:	2000125c 	.word	0x2000125c

08003c58 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 8003c58:	b40f      	push	{r0, r1, r2, r3}
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8003c60:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 8003c6e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8003c72:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003c76:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003c7a:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 8003c7c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003c80:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003c84:	f107 0008 	add.w	r0, r7, #8
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8003c8e:	f001 fc0b 	bl	80054a8 <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 8003c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c9c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 8003ca6:	e226      	b.n	80040f6 <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 8003ca8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003cac:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8003cb0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8003cba:	f040 81f7 	bne.w	80040ac <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 8003cbe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003cc8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003ccc:	5cd3      	ldrb	r3, [r2, r3]
 8003cce:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 8003cd2:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8003cd6:	2b2f      	cmp	r3, #47	; 0x2f
 8003cd8:	d105      	bne.n	8003ce6 <Custom_OLED_Printf+0x8e>
				cursor += 1;
 8003cda:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8003ce4:	e1e2      	b.n	80040ac <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 8003ce6:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8003cea:	3b23      	subs	r3, #35	; 0x23
 8003cec:	2b56      	cmp	r3, #86	; 0x56
 8003cee:	f200 81d7 	bhi.w	80040a0 <Custom_OLED_Printf+0x448>
 8003cf2:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <Custom_OLED_Printf+0xa0>)
 8003cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf8:	08003f11 	.word	0x08003f11
 8003cfc:	080040a1 	.word	0x080040a1
 8003d00:	080040a1 	.word	0x080040a1
 8003d04:	080040a1 	.word	0x080040a1
 8003d08:	080040a1 	.word	0x080040a1
 8003d0c:	080040a1 	.word	0x080040a1
 8003d10:	080040a1 	.word	0x080040a1
 8003d14:	080040a1 	.word	0x080040a1
 8003d18:	080040a1 	.word	0x080040a1
 8003d1c:	080040a1 	.word	0x080040a1
 8003d20:	080040a1 	.word	0x080040a1
 8003d24:	080040a1 	.word	0x080040a1
 8003d28:	080040a1 	.word	0x080040a1
 8003d2c:	08003e55 	.word	0x08003e55
 8003d30:	08003e55 	.word	0x08003e55
 8003d34:	08003e55 	.word	0x08003e55
 8003d38:	08003e55 	.word	0x08003e55
 8003d3c:	08003e55 	.word	0x08003e55
 8003d40:	08003e55 	.word	0x08003e55
 8003d44:	08003e55 	.word	0x08003e55
 8003d48:	080040a1 	.word	0x080040a1
 8003d4c:	080040a1 	.word	0x080040a1
 8003d50:	080040a1 	.word	0x080040a1
 8003d54:	080040a1 	.word	0x080040a1
 8003d58:	080040a1 	.word	0x080040a1
 8003d5c:	080040a1 	.word	0x080040a1
 8003d60:	080040a1 	.word	0x080040a1
 8003d64:	080040a1 	.word	0x080040a1
 8003d68:	080040a1 	.word	0x080040a1
 8003d6c:	080040a1 	.word	0x080040a1
 8003d70:	08003f01 	.word	0x08003f01
 8003d74:	080040a1 	.word	0x080040a1
 8003d78:	080040a1 	.word	0x080040a1
 8003d7c:	080040a1 	.word	0x080040a1
 8003d80:	080040a1 	.word	0x080040a1
 8003d84:	080040a1 	.word	0x080040a1
 8003d88:	080040a1 	.word	0x080040a1
 8003d8c:	080040a1 	.word	0x080040a1
 8003d90:	080040a1 	.word	0x080040a1
 8003d94:	080040a1 	.word	0x080040a1
 8003d98:	08003eef 	.word	0x08003eef
 8003d9c:	080040a1 	.word	0x080040a1
 8003da0:	080040a1 	.word	0x080040a1
 8003da4:	080040a1 	.word	0x080040a1
 8003da8:	080040a1 	.word	0x080040a1
 8003dac:	080040a1 	.word	0x080040a1
 8003db0:	080040a1 	.word	0x080040a1
 8003db4:	080040a1 	.word	0x080040a1
 8003db8:	080040a1 	.word	0x080040a1
 8003dbc:	080040a1 	.word	0x080040a1
 8003dc0:	080040a1 	.word	0x080040a1
 8003dc4:	080040a1 	.word	0x080040a1
 8003dc8:	080040a1 	.word	0x080040a1
 8003dcc:	080040a1 	.word	0x080040a1
 8003dd0:	080040a1 	.word	0x080040a1
 8003dd4:	080040a1 	.word	0x080040a1
 8003dd8:	080040a1 	.word	0x080040a1
 8003ddc:	080040a1 	.word	0x080040a1
 8003de0:	080040a1 	.word	0x080040a1
 8003de4:	080040a1 	.word	0x080040a1
 8003de8:	080040a1 	.word	0x080040a1
 8003dec:	080040a1 	.word	0x080040a1
 8003df0:	08003f09 	.word	0x08003f09
 8003df4:	08003e8d 	.word	0x08003e8d
 8003df8:	08003e9f 	.word	0x08003e9f
 8003dfc:	080040a1 	.word	0x080040a1
 8003e00:	080040a1 	.word	0x080040a1
 8003e04:	080040a1 	.word	0x080040a1
 8003e08:	08003e83 	.word	0x08003e83
 8003e0c:	080040a1 	.word	0x080040a1
 8003e10:	080040a1 	.word	0x080040a1
 8003e14:	080040a1 	.word	0x080040a1
 8003e18:	08003ef9 	.word	0x08003ef9
 8003e1c:	08003ebd 	.word	0x08003ebd
 8003e20:	08003ea9 	.word	0x08003ea9
 8003e24:	080040a1 	.word	0x080040a1
 8003e28:	08003eb3 	.word	0x08003eb3
 8003e2c:	08003ee5 	.word	0x08003ee5
 8003e30:	080040a1 	.word	0x080040a1
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003ed1 	.word	0x08003ed1
 8003e3c:	08003ec7 	.word	0x08003ec7
 8003e40:	080040a1 	.word	0x080040a1
 8003e44:	08003edb 	.word	0x08003edb
 8003e48:	08003e6f 	.word	0x08003e6f
 8003e4c:	080040a1 	.word	0x080040a1
 8003e50:	08003e95 	.word	0x08003e95
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 8003e5a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8003e5e:	3b30      	subs	r3, #48	; 0x30
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	00d2      	lsls	r2, r2, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 8003e6c:	e118      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 8003e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e72:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003e76:	e113      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 8003e78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e7c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003e80:	e10e      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 8003e82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e86:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003e8a:	e109      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 8003e8c:	231f      	movs	r3, #31
 8003e8e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003e92:	e105      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 8003e94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e98:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003e9c:	e100      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 8003e9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003ea2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003ea6:	e0fb      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 8003ea8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003eac:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003eb0:	e0f6      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 8003eb2:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8003eb6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003eba:	e0f1      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 8003ebc:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 8003ec0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003ec4:	e0ec      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 8003ec6:	f240 73ef 	movw	r3, #2031	; 0x7ef
 8003eca:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003ece:	e0e7      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 8003ed0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003ed4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003ed8:	e0e2      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 8003eda:	f647 031f 	movw	r3, #30751	; 0x781f
 8003ede:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003ee2:	e0dd      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 8003ee4:	f64f 030f 	movw	r3, #63503	; 0xf80f
 8003ee8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003eec:	e0d8      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 8003eee:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ef2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003ef6:	e0d3      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003efe:	e0cf      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8003f06:	e0cb      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8003f0e:	e0c7      	b.n	80040a0 <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003f1c:	e099      	b.n	8004052 <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 8003f1e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003f22:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f26:	4413      	add	r3, r2
 8003f28:	3302      	adds	r3, #2
 8003f2a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003f2e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d924      	bls.n	8003f82 <Custom_OLED_Printf+0x32a>
 8003f38:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003f3c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f40:	4413      	add	r3, r2
 8003f42:	3302      	adds	r3, #2
 8003f44:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003f48:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	2b46      	cmp	r3, #70	; 0x46
 8003f50:	d817      	bhi.n	8003f82 <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 8003f52:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 8003f5c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003f60:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f64:	4413      	add	r3, r2
 8003f66:	3302      	adds	r3, #2
 8003f68:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003f6c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003f78:	4413      	add	r3, r2
 8003f7a:	3b37      	subs	r3, #55	; 0x37
 8003f7c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003f80:	e062      	b.n	8004048 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 8003f82:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003f86:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003f92:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d924      	bls.n	8003fe6 <Custom_OLED_Printf+0x38e>
 8003f9c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003fa0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003fac:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003fb0:	5cd3      	ldrb	r3, [r2, r3]
 8003fb2:	2b66      	cmp	r3, #102	; 0x66
 8003fb4:	d817      	bhi.n	8003fe6 <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 8003fb6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 8003fc0:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003fc4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003fc8:	4413      	add	r3, r2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003fd0:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003fd4:	5cd3      	ldrb	r3, [r2, r3]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003fdc:	4413      	add	r3, r2
 8003fde:	3b57      	subs	r3, #87	; 0x57
 8003fe0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003fe4:	e030      	b.n	8004048 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 8003fe6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003fea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003fee:	4413      	add	r3, r2
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003ff6:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	2b2f      	cmp	r3, #47	; 0x2f
 8003ffe:	d923      	bls.n	8004048 <Custom_OLED_Printf+0x3f0>
 8004000:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004004:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004008:	4413      	add	r3, r2
 800400a:	3302      	adds	r3, #2
 800400c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004010:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004014:	5cd3      	ldrb	r3, [r2, r3]
 8004016:	2b39      	cmp	r3, #57	; 0x39
 8004018:	d816      	bhi.n	8004048 <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 800401a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8004024:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004028:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800402c:	4413      	add	r3, r2
 800402e:	3302      	adds	r3, #2
 8004030:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004034:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004038:	5cd3      	ldrb	r3, [r2, r3]
 800403a:	461a      	mov	r2, r3
 800403c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004040:	4413      	add	r3, r2
 8004042:	3b30      	subs	r3, #48	; 0x30
 8004044:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8004048:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800404c:	3301      	adds	r3, #1
 800404e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004052:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004056:	2b05      	cmp	r3, #5
 8004058:	f67f af61 	bls.w	8003f1e <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 800405c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004068:	f023 0307 	bic.w	r3, r3, #7
 800406c:	b29a      	uxth	r2, r3
 800406e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	b29b      	uxth	r3, r3
 8004076:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800407a:	b29b      	uxth	r3, r3
 800407c:	4313      	orrs	r3, r2
 800407e:	b29a      	uxth	r2, r3
 8004080:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	b29b      	uxth	r3, r3
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	b29b      	uxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 8004094:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004098:	3306      	adds	r3, #6
 800409a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 800409e:	bf00      	nop
				}

				cursor += 2;
 80040a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80040a4:	3302      	adds	r3, #2
 80040a6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 80040aa:	e024      	b.n	80040f6 <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 80040ac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80040b0:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80040b4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80040b8:	4413      	add	r3, r2
 80040ba:	7818      	ldrb	r0, [r3, #0]
 80040bc:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 80040c0:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80040c4:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 80040c8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4623      	mov	r3, r4
 80040d0:	f7ff fd22 	bl	8003b18 <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 80040d4:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80040d8:	461a      	mov	r2, r3
 80040da:	0052      	lsls	r2, r2, #1
 80040dc:	4413      	add	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80040e6:	4413      	add	r3, r2
 80040e8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 80040ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80040f0:	3301      	adds	r3, #1
 80040f2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 80040f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80040fa:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80040fe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f47f adce 	bne.w	8003ca8 <Custom_OLED_Printf+0x50>
	}
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800411a:	b004      	add	sp, #16
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop

08004120 <LL_GPIO_ReadInputPort>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
	return uwTick;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <Custom_Delay_Get_SysTick+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000244 	.word	0x20000244

08004150 <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 800416e:	f7ff ffe3 	bl	8004138 <Custom_Delay_Get_SysTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	741a      	strb	r2, [r3, #16]
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ffc3 	bl	8004120 <LL_GPIO_ReadInputPort>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 80041b0:	f7ff ffc2 	bl	8004138 <Custom_Delay_Get_SysTick>
 80041b4:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	7c1b      	ldrb	r3, [r3, #16]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	2b07      	cmp	r3, #7
 80041be:	d873      	bhi.n	80042a8 <Custom_Switch_State_Machine+0x120>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <Custom_Switch_State_Machine+0x40>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041e9 	.word	0x080041e9
 80041cc:	080041fd 	.word	0x080041fd
 80041d0:	080042a9 	.word	0x080042a9
 80041d4:	08004233 	.word	0x08004233
 80041d8:	080042a9 	.word	0x080042a9
 80041dc:	080042a9 	.word	0x080042a9
 80041e0:	080042a9 	.word	0x080042a9
 80041e4:	0800427d 	.word	0x0800427d

		case LONG_OFF:
			if (currentPushed) {
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d05b      	beq.n	80042a6 <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2250      	movs	r2, #80	; 0x50
 80041f8:	609a      	str	r2, [r3, #8]
			}
			break;
 80041fa:	e054      	b.n	80042a6 <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	1acb      	subs	r3, r1, r3
 8004208:	429a      	cmp	r2, r3
 800420a:	d808      	bhi.n	800421e <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2204      	movs	r2, #4
 8004214:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800421c:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68d9      	ldr	r1, [r3, #12]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	1acb      	subs	r3, r1, r3
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	609a      	str	r2, [r3, #8]
			break;
 8004230:	e03a      	b.n	80042a8 <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 8004232:	7bbb      	ldrb	r3, [r7, #14]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d006      	beq.n	800424c <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2208      	movs	r2, #8
 8004242:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2250      	movs	r2, #80	; 0x50
 8004248:	609a      	str	r2, [r3, #8]
				break;
 800424a:	e02d      	b.n	80042a8 <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	1acb      	subs	r3, r1, r3
 8004258:	429a      	cmp	r2, r3
 800425a:	d805      	bhi.n	8004268 <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004266:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68d9      	ldr	r1, [r3, #12]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	1acb      	subs	r3, r1, r3
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]
			break;
 800427a:	e015      	b.n	80042a8 <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	1acb      	subs	r3, r1, r3
 8004288:	429a      	cmp	r2, r3
 800428a:	d802      	bhi.n	8004292 <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68d9      	ldr	r1, [r3, #12]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1acb      	subs	r3, r1, r3
 800429e:	441a      	add	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]
			break;
 80042a4:	e000      	b.n	80042a8 <Custom_Switch_State_Machine+0x120>
			break;
 80042a6:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	60da      	str	r2, [r3, #12]

	return pushEvent;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2;
	if (!isInitialized) {
 80042be:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <Custom_Switch_Read+0xb8>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <Custom_Switch_Read+0x2e>
		isInitialized = true;
 80042cc:	4b28      	ldr	r3, [pc, #160]	; (8004370 <Custom_Switch_Read+0xb8>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 80042d2:	2210      	movs	r2, #16
 80042d4:	4927      	ldr	r1, [pc, #156]	; (8004374 <Custom_Switch_Read+0xbc>)
 80042d6:	4828      	ldr	r0, [pc, #160]	; (8004378 <Custom_Switch_Read+0xc0>)
 80042d8:	f7ff ff3a 	bl	8004150 <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 80042dc:	2220      	movs	r2, #32
 80042de:	4925      	ldr	r1, [pc, #148]	; (8004374 <Custom_Switch_Read+0xbc>)
 80042e0:	4826      	ldr	r0, [pc, #152]	; (800437c <Custom_Switch_Read+0xc4>)
 80042e2:	f7ff ff35 	bl	8004150 <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 80042e6:	4824      	ldr	r0, [pc, #144]	; (8004378 <Custom_Switch_Read+0xc0>)
 80042e8:	f7ff ff4e 	bl	8004188 <Custom_Switch_State_Machine>
 80042ec:	4603      	mov	r3, r0
 80042ee:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 80042f0:	4822      	ldr	r0, [pc, #136]	; (800437c <Custom_Switch_Read+0xc4>)
 80042f2:	f7ff ff49 	bl	8004188 <Custom_Switch_State_Machine>
 80042f6:	4603      	mov	r3, r0
 80042f8:	71bb      	strb	r3, [r7, #6]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if ((sw1.state & SHORT_ON) && sw2PushEvent) {
 80042fa:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <Custom_Switch_Read+0xc0>)
 80042fc:	7c1b      	ldrb	r3, [r3, #16]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <Custom_Switch_Read+0x68>
 8004306:	79bb      	ldrb	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <Custom_Switch_Read+0x68>
		sw1PushEvent = true;
 800430c:	2301      	movs	r3, #1
 800430e:	71fb      	strb	r3, [r7, #7]
		sw1.state = sw2.state;
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <Custom_Switch_Read+0xc4>)
 8004312:	7c1a      	ldrb	r2, [r3, #16]
 8004314:	4b18      	ldr	r3, [pc, #96]	; (8004378 <Custom_Switch_Read+0xc0>)
 8004316:	741a      	strb	r2, [r3, #16]
		sw1.timer = sw2.timer;
 8004318:	4b18      	ldr	r3, [pc, #96]	; (800437c <Custom_Switch_Read+0xc4>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <Custom_Switch_Read+0xc0>)
 800431e:	6093      	str	r3, [r2, #8]
	}
	if ((sw2.state & SHORT_ON) && sw1PushEvent) {
 8004320:	4b16      	ldr	r3, [pc, #88]	; (800437c <Custom_Switch_Read+0xc4>)
 8004322:	7c1b      	ldrb	r3, [r3, #16]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <Custom_Switch_Read+0x8e>
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <Custom_Switch_Read+0x8e>
		sw2PushEvent = true;
 8004332:	2301      	movs	r3, #1
 8004334:	71bb      	strb	r3, [r7, #6]
		sw2.state = sw1.state;
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <Custom_Switch_Read+0xc0>)
 8004338:	7c1a      	ldrb	r2, [r3, #16]
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <Custom_Switch_Read+0xc4>)
 800433c:	741a      	strb	r2, [r3, #16]
		sw2.timer = sw1.timer;
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <Custom_Switch_Read+0xc0>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4a0e      	ldr	r2, [pc, #56]	; (800437c <Custom_Switch_Read+0xc4>)
 8004344:	6093      	str	r3, [r2, #8]
	}

	uint8_t buttonPushEvent = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	717b      	strb	r3, [r7, #5]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <Custom_Switch_Read+0xa0>
 8004350:	797b      	ldrb	r3, [r7, #5]
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	717b      	strb	r3, [r7, #5]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8004358:	79bb      	ldrb	r3, [r7, #6]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <Custom_Switch_Read+0xae>
 800435e:	797b      	ldrb	r3, [r7, #5]
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	717b      	strb	r3, [r7, #5]

	return buttonPushEvent;
 8004366:	797b      	ldrb	r3, [r7, #5]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	2000139c 	.word	0x2000139c
 8004374:	40020400 	.word	0x40020400
 8004378:	200013a0 	.word	0x200013a0
 800437c:	200013b4 	.word	0x200013b4

08004380 <Drive_Speed_Accele_Cntl>:




// 가속도 및 속도 제어
void	Drive_Speed_Accele_Cntl() {
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0


	if (curSpeed < targetSpeed) {
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 8004386:	ed93 7a00 	vldr	s14, [r3]
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <Drive_Speed_Accele_Cntl+0xa8>)
 800438c:	edd3 7a00 	vldr	s15, [r3]
 8004390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004398:	d51f      	bpl.n	80043da <Drive_Speed_Accele_Cntl+0x5a>

		// 속도 제어
		curSpeed += accele / 2000;
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <Drive_Speed_Accele_Cntl+0xac>)
 800439c:	edd3 7a00 	vldr	s15, [r3]
 80043a0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004430 <Drive_Speed_Accele_Cntl+0xb0>
 80043a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 80043aa:	edd3 7a00 	vldr	s15, [r3]
 80043ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 80043b4:	edc3 7a00 	vstr	s15, [r3]

		if (curSpeed > targetSpeed) {
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 80043ba:	ed93 7a00 	vldr	s14, [r3]
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <Drive_Speed_Accele_Cntl+0xa8>)
 80043c0:	edd3 7a00 	vldr	s15, [r3]
 80043c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	dc00      	bgt.n	80043d0 <Drive_Speed_Accele_Cntl+0x50>
		if (curSpeed < targetSpeed) {

			curSpeed = targetSpeed;
		}
	}
}
 80043ce:	e023      	b.n	8004418 <Drive_Speed_Accele_Cntl+0x98>
			curSpeed = targetSpeed;
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <Drive_Speed_Accele_Cntl+0xa8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a13      	ldr	r2, [pc, #76]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	e01e      	b.n	8004418 <Drive_Speed_Accele_Cntl+0x98>
		curSpeed -= decele / 2000;
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <Drive_Speed_Accele_Cntl+0xb4>)
 80043dc:	ed93 7a00 	vldr	s14, [r3]
 80043e0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004430 <Drive_Speed_Accele_Cntl+0xb0>
 80043e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 80043ea:	ed93 7a00 	vldr	s14, [r3]
 80043ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 80043f4:	edc3 7a00 	vstr	s15, [r3]
		if (curSpeed < targetSpeed) {
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 80043fa:	ed93 7a00 	vldr	s14, [r3]
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <Drive_Speed_Accele_Cntl+0xa8>)
 8004400:	edd3 7a00 	vldr	s15, [r3]
 8004404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	d400      	bmi.n	8004410 <Drive_Speed_Accele_Cntl+0x90>
}
 800440e:	e003      	b.n	8004418 <Drive_Speed_Accele_Cntl+0x98>
			curSpeed = targetSpeed;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <Drive_Speed_Accele_Cntl+0xa8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a03      	ldr	r2, [pc, #12]	; (8004424 <Drive_Speed_Accele_Cntl+0xa4>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000010 	.word	0x20000010
 8004428:	2000000c 	.word	0x2000000c
 800442c:	20000004 	.word	0x20000004
 8004430:	44fa0000 	.word	0x44fa0000
 8004434:	20000008 	.word	0x20000008

08004438 <LL_USART_Enable>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 80044a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 80044ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 80044be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 80044ce:	bf00      	nop
 80044d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d1f8      	bne.n	80044d0 <Custom_Delay_us+0x34>
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff ffcc 	bl	800449c <Custom_Delay_us>
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
	uwTick = 0;
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <Custom_Delay_Init_SysTick+0x20>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <Custom_Delay_Init_SysTick+0x24>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <Custom_Delay_Init_SysTick+0x24>)
 800451c:	f043 0307 	orr.w	r3, r3, #7
 8004520:	6013      	str	r3, [r2, #0]
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000244 	.word	0x20000244
 8004530:	e000e010 	.word	0xe000e010

08004534 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 800453c:	bf00      	nop
 800453e:	4808      	ldr	r0, [pc, #32]	; (8004560 <__io_putchar+0x2c>)
 8004540:	f7ff ff8a 	bl	8004458 <LL_USART_IsActiveFlag_TXE>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f9      	beq.n	800453e <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4619      	mov	r1, r3
 8004550:	4803      	ldr	r0, [pc, #12]	; (8004560 <__io_putchar+0x2c>)
 8004552:	f7ff ff94 	bl	800447e <LL_USART_TransmitData8>
	return ch;
 8004556:	687b      	ldr	r3, [r7, #4]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40004400 	.word	0x40004400

08004564 <Pre_Drive_Var_Adjust>:




// 주행 전 초기값 조정
static void Pre_Drive_Var_Adjust() {
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0

	uint8_t	sw = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	73fb      	strb	r3, [r7, #15]


	accele = ACCELE_INIT;
 800456e:	4b58      	ldr	r3, [pc, #352]	; (80046d0 <Pre_Drive_Var_Adjust+0x16c>)
 8004570:	4a58      	ldr	r2, [pc, #352]	; (80046d4 <Pre_Drive_Var_Adjust+0x170>)
 8004572:	601a      	str	r2, [r3, #0]
	decele = DECELE_INIT;
 8004574:	4b58      	ldr	r3, [pc, #352]	; (80046d8 <Pre_Drive_Var_Adjust+0x174>)
 8004576:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800457a:	601a      	str	r2, [r3, #0]

	targetSpeed = TARGET_SPEED_INIT;
 800457c:	4b57      	ldr	r3, [pc, #348]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 800457e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004582:	601a      	str	r2, [r3, #0]
	curSpeed = MIN_SPEED;
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <Pre_Drive_Var_Adjust+0x17c>)
 8004586:	4a57      	ldr	r2, [pc, #348]	; (80046e4 <Pre_Drive_Var_Adjust+0x180>)
 8004588:	601a      	str	r2, [r3, #0]


	Custom_OLED_Clear();
 800458a:	f7ff fa80 	bl	8003a8e <Custom_OLED_Clear>


	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 800458e:	e028      	b.n	80045e2 <Pre_Drive_Var_Adjust+0x7e>

		// OLED에 변수명 변수값 출력
		Custom_OLED_Printf("/2time");
 8004590:	4855      	ldr	r0, [pc, #340]	; (80046e8 <Pre_Drive_Var_Adjust+0x184>)
 8004592:	f7ff fb61 	bl	8003c58 <Custom_OLED_Printf>
		Custom_OLED_Printf("/A/4%5d", targetTime);
 8004596:	4b55      	ldr	r3, [pc, #340]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4619      	mov	r1, r3
 800459c:	4854      	ldr	r0, [pc, #336]	; (80046f0 <Pre_Drive_Var_Adjust+0x18c>)
 800459e:	f7ff fb5b 	bl	8003c58 <Custom_OLED_Printf>

		// 변수 값 빼기
		if (sw == CUSTOM_SW_1) {
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d105      	bne.n	80045b4 <Pre_Drive_Var_Adjust+0x50>
			targetTime -= 1;
 80045a8:	4b50      	ldr	r3, [pc, #320]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	4a4f      	ldr	r2, [pc, #316]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e007      	b.n	80045c4 <Pre_Drive_Var_Adjust+0x60>
		}
		// 변수값 더하기
		else if (sw == CUSTOM_SW_2) {
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d104      	bne.n	80045c4 <Pre_Drive_Var_Adjust+0x60>
			targetTime += 1;
 80045ba:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a4a      	ldr	r2, [pc, #296]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045c2:	6013      	str	r3, [r2, #0]
		}

		if (targetTime < TIME_MIN) {
 80045c4:	4b49      	ldr	r3, [pc, #292]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	dc03      	bgt.n	80045d4 <Pre_Drive_Var_Adjust+0x70>
			targetTime = TIME_MIN;
 80045cc:	4b47      	ldr	r3, [pc, #284]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045ce:	2205      	movs	r2, #5
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e006      	b.n	80045e2 <Pre_Drive_Var_Adjust+0x7e>
		}
		else if (targetTime > TIME_MAX) {
 80045d4:	4b45      	ldr	r3, [pc, #276]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b14      	cmp	r3, #20
 80045da:	dd02      	ble.n	80045e2 <Pre_Drive_Var_Adjust+0x7e>
			targetTime = TIME_MAX;
 80045dc:	4b43      	ldr	r3, [pc, #268]	; (80046ec <Pre_Drive_Var_Adjust+0x188>)
 80045de:	2214      	movs	r2, #20
 80045e0:	601a      	str	r2, [r3, #0]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80045e2:	f7ff fe69 	bl	80042b8 <Custom_Switch_Read>
 80045e6:	4603      	mov	r3, r0
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d1cf      	bne.n	8004590 <Pre_Drive_Var_Adjust+0x2c>
		}
	}


	Custom_OLED_Clear();
 80045f0:	f7ff fa4d 	bl	8003a8e <Custom_OLED_Clear>

	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80045f4:	e05e      	b.n	80046b4 <Pre_Drive_Var_Adjust+0x150>

		uint32_t num1 = (uint32_t)targetSpeed;
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 80045f8:	edd3 7a00 	vldr	s15, [r3]
 80045fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004600:	ee17 3a90 	vmov	r3, s15
 8004604:	60bb      	str	r3, [r7, #8]
		uint32_t num2 = (uint32_t)( targetSpeed * 100000 - num1 * 100000 );
 8004606:	4b35      	ldr	r3, [pc, #212]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80046f4 <Pre_Drive_Var_Adjust+0x190>
 8004610:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <Pre_Drive_Var_Adjust+0x194>)
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	ee07 3a90 	vmov	s15, r3
 8004620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462c:	ee17 3a90 	vmov	r3, s15
 8004630:	607b      	str	r3, [r7, #4]

		// OLED에 변수명 변수값 출력
		Custom_OLED_Printf("/2speed");
 8004632:	4832      	ldr	r0, [pc, #200]	; (80046fc <Pre_Drive_Var_Adjust+0x198>)
 8004634:	f7ff fb10 	bl	8003c58 <Custom_OLED_Printf>
		Custom_OLED_Printf("/A/4%u.%05u", num1, num2);
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4830      	ldr	r0, [pc, #192]	; (8004700 <Pre_Drive_Var_Adjust+0x19c>)
 800463e:	f7ff fb0b 	bl	8003c58 <Custom_OLED_Printf>

		// 변수 값 빼기
		if (sw == CUSTOM_SW_1) {
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10a      	bne.n	800465e <Pre_Drive_Var_Adjust+0xfa>
			targetSpeed -= 0.1f;
 8004648:	4b24      	ldr	r3, [pc, #144]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004704 <Pre_Drive_Var_Adjust+0x1a0>
 8004652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 8004658:	edc3 7a00 	vstr	s15, [r3]
 800465c:	e00c      	b.n	8004678 <Pre_Drive_Var_Adjust+0x114>
		}
		// 변수값 더하기
		else if (sw == CUSTOM_SW_2) {
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d109      	bne.n	8004678 <Pre_Drive_Var_Adjust+0x114>
			targetSpeed += 0.1f;
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004704 <Pre_Drive_Var_Adjust+0x1a0>
 800466e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004672:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 8004674:	edc3 7a00 	vstr	s15, [r3]
		}

		if (targetSpeed < SPEED_MIN) {
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 800467a:	edd3 7a00 	vldr	s15, [r3]
 800467e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	d504      	bpl.n	8004696 <Pre_Drive_Var_Adjust+0x132>
			targetSpeed = SPEED_MIN;
 800468c:	4b13      	ldr	r3, [pc, #76]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 800468e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e00e      	b.n	80046b4 <Pre_Drive_Var_Adjust+0x150>
		}
		else if (targetSpeed > SPEED_MAX) {
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 8004698:	edd3 7a00 	vldr	s15, [r3]
 800469c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80046a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	dc00      	bgt.n	80046ac <Pre_Drive_Var_Adjust+0x148>
 80046aa:	e003      	b.n	80046b4 <Pre_Drive_Var_Adjust+0x150>
			targetSpeed = SPEED_MAX;
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <Pre_Drive_Var_Adjust+0x178>)
 80046ae:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80046b2:	601a      	str	r2, [r3, #0]
	while (CUSTOM_SW_BOTH != (sw = Custom_Switch_Read())) {
 80046b4:	f7ff fe00 	bl	80042b8 <Custom_Switch_Read>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d199      	bne.n	80045f6 <Pre_Drive_Var_Adjust+0x92>
		}
	}

	Custom_OLED_Clear();
 80046c2:	f7ff f9e4 	bl	8003a8e <Custom_OLED_Clear>
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000004 	.word	0x20000004
 80046d4:	40400000 	.word	0x40400000
 80046d8:	20000008 	.word	0x20000008
 80046dc:	2000000c 	.word	0x2000000c
 80046e0:	20000010 	.word	0x20000010
 80046e4:	3c23d70a 	.word	0x3c23d70a
 80046e8:	0800785c 	.word	0x0800785c
 80046ec:	20000014 	.word	0x20000014
 80046f0:	08007864 	.word	0x08007864
 80046f4:	47c35000 	.word	0x47c35000
 80046f8:	000186a0 	.word	0x000186a0
 80046fc:	0800786c 	.word	0x0800786c
 8004700:	08007874 	.word	0x08007874
 8004704:	3dcccccd 	.word	0x3dcccccd

08004708 <Init>:




void Init() {
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 800470e:	484c      	ldr	r0, [pc, #304]	; (8004840 <Init+0x138>)
 8004710:	f7ff fe92 	bl	8004438 <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8004714:	f7ff fefa 	bl	800450c <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8004718:	f7ff f9d8 	bl	8003acc <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 800471c:	f7ff f808 	bl	8003730 <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 8004720:	f7ff f9d4 	bl	8003acc <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8004724:	4847      	ldr	r0, [pc, #284]	; (8004844 <Init+0x13c>)
 8004726:	f7ff fa97 	bl	8003c58 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 800472a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800472e:	f7ff fedd 	bl	80044ec <Custom_Delay_ms>


	while(1) {

		Pre_Drive_Var_Adjust();
 8004732:	f7ff ff17 	bl	8004564 <Pre_Drive_Var_Adjust>
		Motor_Start();
 8004736:	f000 f935 	bl	80049a4 <Motor_Start>
		Speed_Control_Start();
 800473a:	f000 f95f 	bl	80049fc <Speed_Control_Start>

		float startTime = uwTick / 1000.f;
 800473e:	4b42      	ldr	r3, [pc, #264]	; (8004848 <Init+0x140>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800474a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800484c <Init+0x144>
 800474e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004752:	edc7 7a03 	vstr	s15, [r7, #12]
		float endTime = startTime + (float)targetTime;
 8004756:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <Init+0x148>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004762:	ed97 7a03 	vldr	s14, [r7, #12]
 8004766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476a:	edc7 7a02 	vstr	s15, [r7, #8]


		while (1) {

			float curTime = uwTick / 1000.f;
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <Init+0x140>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800477a:	eddf 6a34 	vldr	s13, [pc, #208]	; 800484c <Init+0x144>
 800477e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004782:	edc7 7a01 	vstr	s15, [r7, #4]

			if ( curSpeed / decele > endTime - curTime ) {
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <Init+0x14c>)
 8004788:	edd3 6a00 	vldr	s13, [r3]
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <Init+0x150>)
 800478e:	edd3 7a00 	vldr	s15, [r3]
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	edd7 6a02 	vldr	s13, [r7, #8]
 800479a:	edd7 7a01 	vldr	s15, [r7, #4]
 800479e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80047a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	dd28      	ble.n	80047fe <Init+0xf6>

				targetSpeed = 0;
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <Init+0x154>)
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
				while (curSpeed > MIN_SPEED) {
 80047b4:	e018      	b.n	80047e8 <Init+0xe0>

					Custom_OLED_Printf("/A/2%f", curSpeed);
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <Init+0x14c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fb fecc 	bl	8000558 <__aeabi_f2d>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4826      	ldr	r0, [pc, #152]	; (8004860 <Init+0x158>)
 80047c6:	f7ff fa47 	bl	8003c58 <Custom_OLED_Printf>
					Custom_OLED_Printf("/A/4%f", (endTime - curTime));
 80047ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80047ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d6:	ee17 0a90 	vmov	r0, s15
 80047da:	f7fb febd 	bl	8000558 <__aeabi_f2d>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4820      	ldr	r0, [pc, #128]	; (8004864 <Init+0x15c>)
 80047e4:	f7ff fa38 	bl	8003c58 <Custom_OLED_Printf>
				while (curSpeed > MIN_SPEED) {
 80047e8:	4b1a      	ldr	r3, [pc, #104]	; (8004854 <Init+0x14c>)
 80047ea:	edd3 7a00 	vldr	s15, [r3]
 80047ee:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004868 <Init+0x160>
 80047f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	dcdc      	bgt.n	80047b6 <Init+0xae>
				}
				break;
 80047fc:	e019      	b.n	8004832 <Init+0x12a>
			}

			Custom_OLED_Printf("/A/2%f", curSpeed);
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <Init+0x14c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fb fea8 	bl	8000558 <__aeabi_f2d>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4814      	ldr	r0, [pc, #80]	; (8004860 <Init+0x158>)
 800480e:	f7ff fa23 	bl	8003c58 <Custom_OLED_Printf>
			Custom_OLED_Printf("/A/4%f", (endTime - curTime));
 8004812:	ed97 7a02 	vldr	s14, [r7, #8]
 8004816:	edd7 7a01 	vldr	s15, [r7, #4]
 800481a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481e:	ee17 0a90 	vmov	r0, s15
 8004822:	f7fb fe99 	bl	8000558 <__aeabi_f2d>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	480e      	ldr	r0, [pc, #56]	; (8004864 <Init+0x15c>)
 800482c:	f7ff fa14 	bl	8003c58 <Custom_OLED_Printf>
		while (1) {
 8004830:	e79d      	b.n	800476e <Init+0x66>

		}

		Motor_Stop();
 8004832:	f000 f8cb 	bl	80049cc <Motor_Stop>
		Speed_Control_Stop();
 8004836:	f000 f8ed 	bl	8004a14 <Speed_Control_Stop>
		Custom_OLED_Clear();
 800483a:	f7ff f928 	bl	8003a8e <Custom_OLED_Clear>
	while(1) {
 800483e:	e778      	b.n	8004732 <Init+0x2a>
 8004840:	40004400 	.word	0x40004400
 8004844:	08007880 	.word	0x08007880
 8004848:	20000244 	.word	0x20000244
 800484c:	447a0000 	.word	0x447a0000
 8004850:	20000014 	.word	0x20000014
 8004854:	20000010 	.word	0x20000010
 8004858:	20000008 	.word	0x20000008
 800485c:	2000000c 	.word	0x2000000c
 8004860:	08007894 	.word	0x08007894
 8004864:	0800789c 	.word	0x0800789c
 8004868:	3c23d70a 	.word	0x3c23d70a

0800486c <LL_TIM_EnableCounter>:
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_TIM_DisableCounter>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 0201 	bic.w	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_TIM_EnableIT_UPDATE>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f043 0201 	orr.w	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_TIM_DisableIT_UPDATE>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f023 0201 	bic.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60da      	str	r2, [r3, #12]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <Custom_GPIO_Set_t>:
static inline void Custom_GPIO_Set_t(Custom_GPIO_t *Pin, uint32_t value) {
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	43db      	mvns	r3, r3
 8004902:	ea02 0103 	and.w	r1, r2, r3
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	2a00      	cmp	r2, #0
 800490e:	d002      	beq.n	8004916 <Custom_GPIO_Set_t+0x2a>
 8004910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004914:	e000      	b.n	8004918 <Custom_GPIO_Set_t+0x2c>
 8004916:	2200      	movs	r2, #0
 8004918:	401a      	ands	r2, r3
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
			| (Pin->pinMask & (((!!value) << 31) >> 31));
 800491e:	430a      	orrs	r2, r1
	Pin->port->ODR = (Pin->port->ODR & ~Pin->pinMask)
 8004920:	615a      	str	r2, [r3, #20]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <Motor_Power_Off>:
volatile uint8_t	phaseL  = 0;
volatile uint8_t	phaseR  = 0;



void Motor_Power_Off() {
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0

	Custom_GPIO_Set_t(motorL + 0, 0);
 8004934:	2100      	movs	r1, #0
 8004936:	4813      	ldr	r0, [pc, #76]	; (8004984 <Motor_Power_Off+0x54>)
 8004938:	f7ff ffd8 	bl	80048ec <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 1, 0);
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <Motor_Power_Off+0x58>)
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ffd3 	bl	80048ec <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 2, 0);
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <Motor_Power_Off+0x5c>)
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ffce 	bl	80048ec <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorL + 3, 0);
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <Motor_Power_Off+0x60>)
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ffc9 	bl	80048ec <Custom_GPIO_Set_t>

	Custom_GPIO_Set_t(motorR + 0, 0);
 800495a:	2100      	movs	r1, #0
 800495c:	480d      	ldr	r0, [pc, #52]	; (8004994 <Motor_Power_Off+0x64>)
 800495e:	f7ff ffc5 	bl	80048ec <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 1, 0);
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <Motor_Power_Off+0x68>)
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ffc0 	bl	80048ec <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 2, 0);
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <Motor_Power_Off+0x6c>)
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ffbb 	bl	80048ec <Custom_GPIO_Set_t>
	Custom_GPIO_Set_t(motorR + 3, 0);
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <Motor_Power_Off+0x70>)
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff ffb6 	bl	80048ec <Custom_GPIO_Set_t>
}
 8004980:	bf00      	nop
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000018 	.word	0x20000018
 8004988:	20000020 	.word	0x20000020
 800498c:	20000028 	.word	0x20000028
 8004990:	20000030 	.word	0x20000030
 8004994:	20000038 	.word	0x20000038
 8004998:	20000040 	.word	0x20000040
 800499c:	20000048 	.word	0x20000048
 80049a0:	20000050 	.word	0x20000050

080049a4 <Motor_Start>:





void Motor_Start() {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM3);
 80049a8:	4806      	ldr	r0, [pc, #24]	; (80049c4 <Motor_Start+0x20>)
 80049aa:	f7ff ff5f 	bl	800486c <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM3);
 80049ae:	4805      	ldr	r0, [pc, #20]	; (80049c4 <Motor_Start+0x20>)
 80049b0:	f7ff ff7c 	bl	80048ac <LL_TIM_EnableIT_UPDATE>

	LL_TIM_EnableCounter(TIM4);
 80049b4:	4804      	ldr	r0, [pc, #16]	; (80049c8 <Motor_Start+0x24>)
 80049b6:	f7ff ff59 	bl	800486c <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM4);
 80049ba:	4803      	ldr	r0, [pc, #12]	; (80049c8 <Motor_Start+0x24>)
 80049bc:	f7ff ff76 	bl	80048ac <LL_TIM_EnableIT_UPDATE>
}
 80049c0:	bf00      	nop
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800

080049cc <Motor_Stop>:





void Motor_Stop() {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
	Motor_Power_Off();
 80049d0:	f7ff ffae 	bl	8004930 <Motor_Power_Off>

	LL_TIM_DisableIT_UPDATE(TIM3);
 80049d4:	4807      	ldr	r0, [pc, #28]	; (80049f4 <Motor_Stop+0x28>)
 80049d6:	f7ff ff79 	bl	80048cc <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM3);
 80049da:	4806      	ldr	r0, [pc, #24]	; (80049f4 <Motor_Stop+0x28>)
 80049dc:	f7ff ff56 	bl	800488c <LL_TIM_DisableCounter>

	LL_TIM_DisableIT_UPDATE(TIM4);
 80049e0:	4805      	ldr	r0, [pc, #20]	; (80049f8 <Motor_Stop+0x2c>)
 80049e2:	f7ff ff73 	bl	80048cc <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM4);
 80049e6:	4804      	ldr	r0, [pc, #16]	; (80049f8 <Motor_Stop+0x2c>)
 80049e8:	f7ff ff50 	bl	800488c <LL_TIM_DisableCounter>

	Motor_Power_Off();
 80049ec:	f7ff ffa0 	bl	8004930 <Motor_Power_Off>
}
 80049f0:	bf00      	nop
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800

080049fc <Speed_Control_Start>:




void Speed_Control_Start(){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM9);
 8004a00:	4803      	ldr	r0, [pc, #12]	; (8004a10 <Speed_Control_Start+0x14>)
 8004a02:	f7ff ff33 	bl	800486c <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM9);
 8004a06:	4802      	ldr	r0, [pc, #8]	; (8004a10 <Speed_Control_Start+0x14>)
 8004a08:	f7ff ff50 	bl	80048ac <LL_TIM_EnableIT_UPDATE>
}
 8004a0c:	bf00      	nop
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40014000 	.word	0x40014000

08004a14 <Speed_Control_Stop>:




void Speed_Control_Stop(){
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
	LL_TIM_DisableIT_UPDATE(TIM9);
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <Speed_Control_Stop+0x14>)
 8004a1a:	f7ff ff57 	bl	80048cc <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM9);
 8004a1e:	4802      	ldr	r0, [pc, #8]	; (8004a28 <Speed_Control_Stop+0x14>)
 8004a20:	f7ff ff34 	bl	800488c <LL_TIM_DisableCounter>
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40014000 	.word	0x40014000

08004a2c <__cvt>:
 8004a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	ec55 4b10 	vmov	r4, r5, d0
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	460e      	mov	r6, r1
 8004a38:	4619      	mov	r1, r3
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	bfbb      	ittet	lt
 8004a3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a42:	461d      	movlt	r5, r3
 8004a44:	2300      	movge	r3, #0
 8004a46:	232d      	movlt	r3, #45	; 0x2d
 8004a48:	700b      	strb	r3, [r1, #0]
 8004a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a50:	4691      	mov	r9, r2
 8004a52:	f023 0820 	bic.w	r8, r3, #32
 8004a56:	bfbc      	itt	lt
 8004a58:	4622      	movlt	r2, r4
 8004a5a:	4614      	movlt	r4, r2
 8004a5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a60:	d005      	beq.n	8004a6e <__cvt+0x42>
 8004a62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a66:	d100      	bne.n	8004a6a <__cvt+0x3e>
 8004a68:	3601      	adds	r6, #1
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	e000      	b.n	8004a70 <__cvt+0x44>
 8004a6e:	2103      	movs	r1, #3
 8004a70:	ab03      	add	r3, sp, #12
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	ab02      	add	r3, sp, #8
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	ec45 4b10 	vmov	d0, r4, r5
 8004a7c:	4653      	mov	r3, sl
 8004a7e:	4632      	mov	r2, r6
 8004a80:	f000 fdde 	bl	8005640 <_dtoa_r>
 8004a84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a88:	4607      	mov	r7, r0
 8004a8a:	d102      	bne.n	8004a92 <__cvt+0x66>
 8004a8c:	f019 0f01 	tst.w	r9, #1
 8004a90:	d022      	beq.n	8004ad8 <__cvt+0xac>
 8004a92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a96:	eb07 0906 	add.w	r9, r7, r6
 8004a9a:	d110      	bne.n	8004abe <__cvt+0x92>
 8004a9c:	783b      	ldrb	r3, [r7, #0]
 8004a9e:	2b30      	cmp	r3, #48	; 0x30
 8004aa0:	d10a      	bne.n	8004ab8 <__cvt+0x8c>
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fc f815 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aae:	b918      	cbnz	r0, 8004ab8 <__cvt+0x8c>
 8004ab0:	f1c6 0601 	rsb	r6, r6, #1
 8004ab4:	f8ca 6000 	str.w	r6, [sl]
 8004ab8:	f8da 3000 	ldr.w	r3, [sl]
 8004abc:	4499      	add	r9, r3
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f7fc f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aca:	b108      	cbz	r0, 8004ad0 <__cvt+0xa4>
 8004acc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ad0:	2230      	movs	r2, #48	; 0x30
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	454b      	cmp	r3, r9
 8004ad6:	d307      	bcc.n	8004ae8 <__cvt+0xbc>
 8004ad8:	9b03      	ldr	r3, [sp, #12]
 8004ada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004adc:	1bdb      	subs	r3, r3, r7
 8004ade:	4638      	mov	r0, r7
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	b004      	add	sp, #16
 8004ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	9103      	str	r1, [sp, #12]
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e7f0      	b.n	8004ad2 <__cvt+0xa6>

08004af0 <__exponent>:
 8004af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af2:	4603      	mov	r3, r0
 8004af4:	2900      	cmp	r1, #0
 8004af6:	bfb8      	it	lt
 8004af8:	4249      	neglt	r1, r1
 8004afa:	f803 2b02 	strb.w	r2, [r3], #2
 8004afe:	bfb4      	ite	lt
 8004b00:	222d      	movlt	r2, #45	; 0x2d
 8004b02:	222b      	movge	r2, #43	; 0x2b
 8004b04:	2909      	cmp	r1, #9
 8004b06:	7042      	strb	r2, [r0, #1]
 8004b08:	dd2a      	ble.n	8004b60 <__exponent+0x70>
 8004b0a:	f10d 0207 	add.w	r2, sp, #7
 8004b0e:	4617      	mov	r7, r2
 8004b10:	260a      	movs	r6, #10
 8004b12:	4694      	mov	ip, r2
 8004b14:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b18:	fb06 1415 	mls	r4, r6, r5, r1
 8004b1c:	3430      	adds	r4, #48	; 0x30
 8004b1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004b22:	460c      	mov	r4, r1
 8004b24:	2c63      	cmp	r4, #99	; 0x63
 8004b26:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	dcf1      	bgt.n	8004b12 <__exponent+0x22>
 8004b2e:	3130      	adds	r1, #48	; 0x30
 8004b30:	f1ac 0402 	sub.w	r4, ip, #2
 8004b34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b38:	1c41      	adds	r1, r0, #1
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	42ba      	cmp	r2, r7
 8004b3e:	d30a      	bcc.n	8004b56 <__exponent+0x66>
 8004b40:	f10d 0209 	add.w	r2, sp, #9
 8004b44:	eba2 020c 	sub.w	r2, r2, ip
 8004b48:	42bc      	cmp	r4, r7
 8004b4a:	bf88      	it	hi
 8004b4c:	2200      	movhi	r2, #0
 8004b4e:	4413      	add	r3, r2
 8004b50:	1a18      	subs	r0, r3, r0
 8004b52:	b003      	add	sp, #12
 8004b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004b5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004b5e:	e7ed      	b.n	8004b3c <__exponent+0x4c>
 8004b60:	2330      	movs	r3, #48	; 0x30
 8004b62:	3130      	adds	r1, #48	; 0x30
 8004b64:	7083      	strb	r3, [r0, #2]
 8004b66:	70c1      	strb	r1, [r0, #3]
 8004b68:	1d03      	adds	r3, r0, #4
 8004b6a:	e7f1      	b.n	8004b50 <__exponent+0x60>

08004b6c <_printf_float>:
 8004b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	ed2d 8b02 	vpush	{d8}
 8004b74:	b08d      	sub	sp, #52	; 0x34
 8004b76:	460c      	mov	r4, r1
 8004b78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	461f      	mov	r7, r3
 8004b80:	4605      	mov	r5, r0
 8004b82:	f000 fca3 	bl	80054cc <_localeconv_r>
 8004b86:	f8d0 a000 	ldr.w	sl, [r0]
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	f7fb fb78 	bl	8000280 <strlen>
 8004b90:	2300      	movs	r3, #0
 8004b92:	930a      	str	r3, [sp, #40]	; 0x28
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	9305      	str	r3, [sp, #20]
 8004b98:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ba0:	3307      	adds	r3, #7
 8004ba2:	f023 0307 	bic.w	r3, r3, #7
 8004ba6:	f103 0208 	add.w	r2, r3, #8
 8004baa:	f8c8 2000 	str.w	r2, [r8]
 8004bae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bb6:	9307      	str	r3, [sp, #28]
 8004bb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bbc:	ee08 0a10 	vmov	s16, r0
 8004bc0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004bc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bc8:	4b9e      	ldr	r3, [pc, #632]	; (8004e44 <_printf_float+0x2d8>)
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bce:	f7fb ffb5 	bl	8000b3c <__aeabi_dcmpun>
 8004bd2:	bb88      	cbnz	r0, 8004c38 <_printf_float+0xcc>
 8004bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bd8:	4b9a      	ldr	r3, [pc, #616]	; (8004e44 <_printf_float+0x2d8>)
 8004bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bde:	f7fb ff8f 	bl	8000b00 <__aeabi_dcmple>
 8004be2:	bb48      	cbnz	r0, 8004c38 <_printf_float+0xcc>
 8004be4:	2200      	movs	r2, #0
 8004be6:	2300      	movs	r3, #0
 8004be8:	4640      	mov	r0, r8
 8004bea:	4649      	mov	r1, r9
 8004bec:	f7fb ff7e 	bl	8000aec <__aeabi_dcmplt>
 8004bf0:	b110      	cbz	r0, 8004bf8 <_printf_float+0x8c>
 8004bf2:	232d      	movs	r3, #45	; 0x2d
 8004bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf8:	4a93      	ldr	r2, [pc, #588]	; (8004e48 <_printf_float+0x2dc>)
 8004bfa:	4b94      	ldr	r3, [pc, #592]	; (8004e4c <_printf_float+0x2e0>)
 8004bfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c00:	bf94      	ite	ls
 8004c02:	4690      	movls	r8, r2
 8004c04:	4698      	movhi	r8, r3
 8004c06:	2303      	movs	r3, #3
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	9b05      	ldr	r3, [sp, #20]
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	f04f 0900 	mov.w	r9, #0
 8004c16:	9700      	str	r7, [sp, #0]
 8004c18:	4633      	mov	r3, r6
 8004c1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 f9da 	bl	8004fd8 <_printf_common>
 8004c24:	3001      	adds	r0, #1
 8004c26:	f040 8090 	bne.w	8004d4a <_printf_float+0x1de>
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c2e:	b00d      	add	sp, #52	; 0x34
 8004c30:	ecbd 8b02 	vpop	{d8}
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	4649      	mov	r1, r9
 8004c40:	f7fb ff7c 	bl	8000b3c <__aeabi_dcmpun>
 8004c44:	b140      	cbz	r0, 8004c58 <_printf_float+0xec>
 8004c46:	464b      	mov	r3, r9
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bfbc      	itt	lt
 8004c4c:	232d      	movlt	r3, #45	; 0x2d
 8004c4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c52:	4a7f      	ldr	r2, [pc, #508]	; (8004e50 <_printf_float+0x2e4>)
 8004c54:	4b7f      	ldr	r3, [pc, #508]	; (8004e54 <_printf_float+0x2e8>)
 8004c56:	e7d1      	b.n	8004bfc <_printf_float+0x90>
 8004c58:	6863      	ldr	r3, [r4, #4]
 8004c5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c5e:	9206      	str	r2, [sp, #24]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	d13f      	bne.n	8004ce4 <_printf_float+0x178>
 8004c64:	2306      	movs	r3, #6
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	9b05      	ldr	r3, [sp, #20]
 8004c6a:	6861      	ldr	r1, [r4, #4]
 8004c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c70:	2300      	movs	r3, #0
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	ab0a      	add	r3, sp, #40	; 0x28
 8004c76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004c7a:	ab09      	add	r3, sp, #36	; 0x24
 8004c7c:	ec49 8b10 	vmov	d0, r8, r9
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	6022      	str	r2, [r4, #0]
 8004c84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f7ff fecf 	bl	8004a2c <__cvt>
 8004c8e:	9b06      	ldr	r3, [sp, #24]
 8004c90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c92:	2b47      	cmp	r3, #71	; 0x47
 8004c94:	4680      	mov	r8, r0
 8004c96:	d108      	bne.n	8004caa <_printf_float+0x13e>
 8004c98:	1cc8      	adds	r0, r1, #3
 8004c9a:	db02      	blt.n	8004ca2 <_printf_float+0x136>
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	dd41      	ble.n	8004d26 <_printf_float+0x1ba>
 8004ca2:	f1ab 0302 	sub.w	r3, fp, #2
 8004ca6:	fa5f fb83 	uxtb.w	fp, r3
 8004caa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cae:	d820      	bhi.n	8004cf2 <_printf_float+0x186>
 8004cb0:	3901      	subs	r1, #1
 8004cb2:	465a      	mov	r2, fp
 8004cb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cb8:	9109      	str	r1, [sp, #36]	; 0x24
 8004cba:	f7ff ff19 	bl	8004af0 <__exponent>
 8004cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cc0:	1813      	adds	r3, r2, r0
 8004cc2:	2a01      	cmp	r2, #1
 8004cc4:	4681      	mov	r9, r0
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	dc02      	bgt.n	8004cd0 <_printf_float+0x164>
 8004cca:	6822      	ldr	r2, [r4, #0]
 8004ccc:	07d2      	lsls	r2, r2, #31
 8004cce:	d501      	bpl.n	8004cd4 <_printf_float+0x168>
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d09c      	beq.n	8004c16 <_printf_float+0xaa>
 8004cdc:	232d      	movs	r3, #45	; 0x2d
 8004cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce2:	e798      	b.n	8004c16 <_printf_float+0xaa>
 8004ce4:	9a06      	ldr	r2, [sp, #24]
 8004ce6:	2a47      	cmp	r2, #71	; 0x47
 8004ce8:	d1be      	bne.n	8004c68 <_printf_float+0xfc>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1bc      	bne.n	8004c68 <_printf_float+0xfc>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7b9      	b.n	8004c66 <_printf_float+0xfa>
 8004cf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004cf6:	d118      	bne.n	8004d2a <_printf_float+0x1be>
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	dd0b      	ble.n	8004d16 <_printf_float+0x1aa>
 8004cfe:	6121      	str	r1, [r4, #16]
 8004d00:	b913      	cbnz	r3, 8004d08 <_printf_float+0x19c>
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	07d0      	lsls	r0, r2, #31
 8004d06:	d502      	bpl.n	8004d0e <_printf_float+0x1a2>
 8004d08:	3301      	adds	r3, #1
 8004d0a:	440b      	add	r3, r1
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d10:	f04f 0900 	mov.w	r9, #0
 8004d14:	e7de      	b.n	8004cd4 <_printf_float+0x168>
 8004d16:	b913      	cbnz	r3, 8004d1e <_printf_float+0x1b2>
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	07d2      	lsls	r2, r2, #31
 8004d1c:	d501      	bpl.n	8004d22 <_printf_float+0x1b6>
 8004d1e:	3302      	adds	r3, #2
 8004d20:	e7f4      	b.n	8004d0c <_printf_float+0x1a0>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7f2      	b.n	8004d0c <_printf_float+0x1a0>
 8004d26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	db05      	blt.n	8004d3c <_printf_float+0x1d0>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	6121      	str	r1, [r4, #16]
 8004d34:	07d8      	lsls	r0, r3, #31
 8004d36:	d5ea      	bpl.n	8004d0e <_printf_float+0x1a2>
 8004d38:	1c4b      	adds	r3, r1, #1
 8004d3a:	e7e7      	b.n	8004d0c <_printf_float+0x1a0>
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	bfd4      	ite	le
 8004d40:	f1c1 0202 	rsble	r2, r1, #2
 8004d44:	2201      	movgt	r2, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	e7e0      	b.n	8004d0c <_printf_float+0x1a0>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	055a      	lsls	r2, r3, #21
 8004d4e:	d407      	bmi.n	8004d60 <_printf_float+0x1f4>
 8004d50:	6923      	ldr	r3, [r4, #16]
 8004d52:	4642      	mov	r2, r8
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d12c      	bne.n	8004db8 <_printf_float+0x24c>
 8004d5e:	e764      	b.n	8004c2a <_printf_float+0xbe>
 8004d60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d64:	f240 80e0 	bls.w	8004f28 <_printf_float+0x3bc>
 8004d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f7fb feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d034      	beq.n	8004de2 <_printf_float+0x276>
 8004d78:	4a37      	ldr	r2, [pc, #220]	; (8004e58 <_printf_float+0x2ec>)
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f af51 	beq.w	8004c2a <_printf_float+0xbe>
 8004d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	db02      	blt.n	8004d96 <_printf_float+0x22a>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	07d8      	lsls	r0, r3, #31
 8004d94:	d510      	bpl.n	8004db8 <_printf_float+0x24c>
 8004d96:	ee18 3a10 	vmov	r3, s16
 8004d9a:	4652      	mov	r2, sl
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	f43f af41 	beq.w	8004c2a <_printf_float+0xbe>
 8004da8:	f04f 0800 	mov.w	r8, #0
 8004dac:	f104 091a 	add.w	r9, r4, #26
 8004db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	4543      	cmp	r3, r8
 8004db6:	dc09      	bgt.n	8004dcc <_printf_float+0x260>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	079b      	lsls	r3, r3, #30
 8004dbc:	f100 8107 	bmi.w	8004fce <_printf_float+0x462>
 8004dc0:	68e0      	ldr	r0, [r4, #12]
 8004dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc4:	4298      	cmp	r0, r3
 8004dc6:	bfb8      	it	lt
 8004dc8:	4618      	movlt	r0, r3
 8004dca:	e730      	b.n	8004c2e <_printf_float+0xc2>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	464a      	mov	r2, r9
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f43f af27 	beq.w	8004c2a <_printf_float+0xbe>
 8004ddc:	f108 0801 	add.w	r8, r8, #1
 8004de0:	e7e6      	b.n	8004db0 <_printf_float+0x244>
 8004de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dc39      	bgt.n	8004e5c <_printf_float+0x2f0>
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <_printf_float+0x2ec>)
 8004dea:	2301      	movs	r3, #1
 8004dec:	4631      	mov	r1, r6
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	f43f af19 	beq.w	8004c2a <_printf_float+0xbe>
 8004df8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d102      	bne.n	8004e06 <_printf_float+0x29a>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07d9      	lsls	r1, r3, #31
 8004e04:	d5d8      	bpl.n	8004db8 <_printf_float+0x24c>
 8004e06:	ee18 3a10 	vmov	r3, s16
 8004e0a:	4652      	mov	r2, sl
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f af09 	beq.w	8004c2a <_printf_float+0xbe>
 8004e18:	f04f 0900 	mov.w	r9, #0
 8004e1c:	f104 0a1a 	add.w	sl, r4, #26
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	425b      	negs	r3, r3
 8004e24:	454b      	cmp	r3, r9
 8004e26:	dc01      	bgt.n	8004e2c <_printf_float+0x2c0>
 8004e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2a:	e792      	b.n	8004d52 <_printf_float+0x1e6>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4652      	mov	r2, sl
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b8      	blx	r7
 8004e36:	3001      	adds	r0, #1
 8004e38:	f43f aef7 	beq.w	8004c2a <_printf_float+0xbe>
 8004e3c:	f109 0901 	add.w	r9, r9, #1
 8004e40:	e7ee      	b.n	8004e20 <_printf_float+0x2b4>
 8004e42:	bf00      	nop
 8004e44:	7fefffff 	.word	0x7fefffff
 8004e48:	08007b3c 	.word	0x08007b3c
 8004e4c:	08007b40 	.word	0x08007b40
 8004e50:	08007b44 	.word	0x08007b44
 8004e54:	08007b48 	.word	0x08007b48
 8004e58:	08007b4c 	.word	0x08007b4c
 8004e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e60:	429a      	cmp	r2, r3
 8004e62:	bfa8      	it	ge
 8004e64:	461a      	movge	r2, r3
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	4691      	mov	r9, r2
 8004e6a:	dc37      	bgt.n	8004edc <_printf_float+0x370>
 8004e6c:	f04f 0b00 	mov.w	fp, #0
 8004e70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e74:	f104 021a 	add.w	r2, r4, #26
 8004e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e7a:	9305      	str	r3, [sp, #20]
 8004e7c:	eba3 0309 	sub.w	r3, r3, r9
 8004e80:	455b      	cmp	r3, fp
 8004e82:	dc33      	bgt.n	8004eec <_printf_float+0x380>
 8004e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	db3b      	blt.n	8004f04 <_printf_float+0x398>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	07da      	lsls	r2, r3, #31
 8004e90:	d438      	bmi.n	8004f04 <_printf_float+0x398>
 8004e92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e96:	eba2 0903 	sub.w	r9, r2, r3
 8004e9a:	9b05      	ldr	r3, [sp, #20]
 8004e9c:	1ad2      	subs	r2, r2, r3
 8004e9e:	4591      	cmp	r9, r2
 8004ea0:	bfa8      	it	ge
 8004ea2:	4691      	movge	r9, r2
 8004ea4:	f1b9 0f00 	cmp.w	r9, #0
 8004ea8:	dc35      	bgt.n	8004f16 <_printf_float+0x3aa>
 8004eaa:	f04f 0800 	mov.w	r8, #0
 8004eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eb2:	f104 0a1a 	add.w	sl, r4, #26
 8004eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	eba3 0309 	sub.w	r3, r3, r9
 8004ec0:	4543      	cmp	r3, r8
 8004ec2:	f77f af79 	ble.w	8004db8 <_printf_float+0x24c>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4652      	mov	r2, sl
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f43f aeaa 	beq.w	8004c2a <_printf_float+0xbe>
 8004ed6:	f108 0801 	add.w	r8, r8, #1
 8004eda:	e7ec      	b.n	8004eb6 <_printf_float+0x34a>
 8004edc:	4613      	mov	r3, r2
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	47b8      	blx	r7
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d1c0      	bne.n	8004e6c <_printf_float+0x300>
 8004eea:	e69e      	b.n	8004c2a <_printf_float+0xbe>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	9205      	str	r2, [sp, #20]
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f ae97 	beq.w	8004c2a <_printf_float+0xbe>
 8004efc:	9a05      	ldr	r2, [sp, #20]
 8004efe:	f10b 0b01 	add.w	fp, fp, #1
 8004f02:	e7b9      	b.n	8004e78 <_printf_float+0x30c>
 8004f04:	ee18 3a10 	vmov	r3, s16
 8004f08:	4652      	mov	r2, sl
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	d1be      	bne.n	8004e92 <_printf_float+0x326>
 8004f14:	e689      	b.n	8004c2a <_printf_float+0xbe>
 8004f16:	9a05      	ldr	r2, [sp, #20]
 8004f18:	464b      	mov	r3, r9
 8004f1a:	4442      	add	r2, r8
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	d1c1      	bne.n	8004eaa <_printf_float+0x33e>
 8004f26:	e680      	b.n	8004c2a <_printf_float+0xbe>
 8004f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f2a:	2a01      	cmp	r2, #1
 8004f2c:	dc01      	bgt.n	8004f32 <_printf_float+0x3c6>
 8004f2e:	07db      	lsls	r3, r3, #31
 8004f30:	d53a      	bpl.n	8004fa8 <_printf_float+0x43c>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4642      	mov	r2, r8
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f43f ae74 	beq.w	8004c2a <_printf_float+0xbe>
 8004f42:	ee18 3a10 	vmov	r3, s16
 8004f46:	4652      	mov	r2, sl
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f ae6b 	beq.w	8004c2a <_printf_float+0xbe>
 8004f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004f60:	f7fb fdba 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f64:	b9d8      	cbnz	r0, 8004f9e <_printf_float+0x432>
 8004f66:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004f6a:	f108 0201 	add.w	r2, r8, #1
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	d10e      	bne.n	8004f96 <_printf_float+0x42a>
 8004f78:	e657      	b.n	8004c2a <_printf_float+0xbe>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f ae50 	beq.w	8004c2a <_printf_float+0xbe>
 8004f8a:	f108 0801 	add.w	r8, r8, #1
 8004f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f90:	3b01      	subs	r3, #1
 8004f92:	4543      	cmp	r3, r8
 8004f94:	dcf1      	bgt.n	8004f7a <_printf_float+0x40e>
 8004f96:	464b      	mov	r3, r9
 8004f98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f9c:	e6da      	b.n	8004d54 <_printf_float+0x1e8>
 8004f9e:	f04f 0800 	mov.w	r8, #0
 8004fa2:	f104 0a1a 	add.w	sl, r4, #26
 8004fa6:	e7f2      	b.n	8004f8e <_printf_float+0x422>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4642      	mov	r2, r8
 8004fac:	e7df      	b.n	8004f6e <_printf_float+0x402>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	464a      	mov	r2, r9
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae36 	beq.w	8004c2a <_printf_float+0xbe>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fc6:	1a5b      	subs	r3, r3, r1
 8004fc8:	4543      	cmp	r3, r8
 8004fca:	dcf0      	bgt.n	8004fae <_printf_float+0x442>
 8004fcc:	e6f8      	b.n	8004dc0 <_printf_float+0x254>
 8004fce:	f04f 0800 	mov.w	r8, #0
 8004fd2:	f104 0919 	add.w	r9, r4, #25
 8004fd6:	e7f4      	b.n	8004fc2 <_printf_float+0x456>

08004fd8 <_printf_common>:
 8004fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fdc:	4616      	mov	r6, r2
 8004fde:	4699      	mov	r9, r3
 8004fe0:	688a      	ldr	r2, [r1, #8]
 8004fe2:	690b      	ldr	r3, [r1, #16]
 8004fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	bfb8      	it	lt
 8004fec:	4613      	movlt	r3, r2
 8004fee:	6033      	str	r3, [r6, #0]
 8004ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	b10a      	cbz	r2, 8004ffe <_printf_common+0x26>
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	0699      	lsls	r1, r3, #26
 8005002:	bf42      	ittt	mi
 8005004:	6833      	ldrmi	r3, [r6, #0]
 8005006:	3302      	addmi	r3, #2
 8005008:	6033      	strmi	r3, [r6, #0]
 800500a:	6825      	ldr	r5, [r4, #0]
 800500c:	f015 0506 	ands.w	r5, r5, #6
 8005010:	d106      	bne.n	8005020 <_printf_common+0x48>
 8005012:	f104 0a19 	add.w	sl, r4, #25
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	6832      	ldr	r2, [r6, #0]
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	42ab      	cmp	r3, r5
 800501e:	dc26      	bgt.n	800506e <_printf_common+0x96>
 8005020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005024:	1e13      	subs	r3, r2, #0
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	bf18      	it	ne
 800502a:	2301      	movne	r3, #1
 800502c:	0692      	lsls	r2, r2, #26
 800502e:	d42b      	bmi.n	8005088 <_printf_common+0xb0>
 8005030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005034:	4649      	mov	r1, r9
 8005036:	4638      	mov	r0, r7
 8005038:	47c0      	blx	r8
 800503a:	3001      	adds	r0, #1
 800503c:	d01e      	beq.n	800507c <_printf_common+0xa4>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	6922      	ldr	r2, [r4, #16]
 8005042:	f003 0306 	and.w	r3, r3, #6
 8005046:	2b04      	cmp	r3, #4
 8005048:	bf02      	ittt	eq
 800504a:	68e5      	ldreq	r5, [r4, #12]
 800504c:	6833      	ldreq	r3, [r6, #0]
 800504e:	1aed      	subeq	r5, r5, r3
 8005050:	68a3      	ldr	r3, [r4, #8]
 8005052:	bf0c      	ite	eq
 8005054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005058:	2500      	movne	r5, #0
 800505a:	4293      	cmp	r3, r2
 800505c:	bfc4      	itt	gt
 800505e:	1a9b      	subgt	r3, r3, r2
 8005060:	18ed      	addgt	r5, r5, r3
 8005062:	2600      	movs	r6, #0
 8005064:	341a      	adds	r4, #26
 8005066:	42b5      	cmp	r5, r6
 8005068:	d11a      	bne.n	80050a0 <_printf_common+0xc8>
 800506a:	2000      	movs	r0, #0
 800506c:	e008      	b.n	8005080 <_printf_common+0xa8>
 800506e:	2301      	movs	r3, #1
 8005070:	4652      	mov	r2, sl
 8005072:	4649      	mov	r1, r9
 8005074:	4638      	mov	r0, r7
 8005076:	47c0      	blx	r8
 8005078:	3001      	adds	r0, #1
 800507a:	d103      	bne.n	8005084 <_printf_common+0xac>
 800507c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005084:	3501      	adds	r5, #1
 8005086:	e7c6      	b.n	8005016 <_printf_common+0x3e>
 8005088:	18e1      	adds	r1, r4, r3
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	2030      	movs	r0, #48	; 0x30
 800508e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005092:	4422      	add	r2, r4
 8005094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800509c:	3302      	adds	r3, #2
 800509e:	e7c7      	b.n	8005030 <_printf_common+0x58>
 80050a0:	2301      	movs	r3, #1
 80050a2:	4622      	mov	r2, r4
 80050a4:	4649      	mov	r1, r9
 80050a6:	4638      	mov	r0, r7
 80050a8:	47c0      	blx	r8
 80050aa:	3001      	adds	r0, #1
 80050ac:	d0e6      	beq.n	800507c <_printf_common+0xa4>
 80050ae:	3601      	adds	r6, #1
 80050b0:	e7d9      	b.n	8005066 <_printf_common+0x8e>
	...

080050b4 <_printf_i>:
 80050b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	7e0f      	ldrb	r7, [r1, #24]
 80050ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050bc:	2f78      	cmp	r7, #120	; 0x78
 80050be:	4691      	mov	r9, r2
 80050c0:	4680      	mov	r8, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	469a      	mov	sl, r3
 80050c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050ca:	d807      	bhi.n	80050dc <_printf_i+0x28>
 80050cc:	2f62      	cmp	r7, #98	; 0x62
 80050ce:	d80a      	bhi.n	80050e6 <_printf_i+0x32>
 80050d0:	2f00      	cmp	r7, #0
 80050d2:	f000 80d4 	beq.w	800527e <_printf_i+0x1ca>
 80050d6:	2f58      	cmp	r7, #88	; 0x58
 80050d8:	f000 80c0 	beq.w	800525c <_printf_i+0x1a8>
 80050dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050e4:	e03a      	b.n	800515c <_printf_i+0xa8>
 80050e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050ea:	2b15      	cmp	r3, #21
 80050ec:	d8f6      	bhi.n	80050dc <_printf_i+0x28>
 80050ee:	a101      	add	r1, pc, #4	; (adr r1, 80050f4 <_printf_i+0x40>)
 80050f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050f4:	0800514d 	.word	0x0800514d
 80050f8:	08005161 	.word	0x08005161
 80050fc:	080050dd 	.word	0x080050dd
 8005100:	080050dd 	.word	0x080050dd
 8005104:	080050dd 	.word	0x080050dd
 8005108:	080050dd 	.word	0x080050dd
 800510c:	08005161 	.word	0x08005161
 8005110:	080050dd 	.word	0x080050dd
 8005114:	080050dd 	.word	0x080050dd
 8005118:	080050dd 	.word	0x080050dd
 800511c:	080050dd 	.word	0x080050dd
 8005120:	08005265 	.word	0x08005265
 8005124:	0800518d 	.word	0x0800518d
 8005128:	0800521f 	.word	0x0800521f
 800512c:	080050dd 	.word	0x080050dd
 8005130:	080050dd 	.word	0x080050dd
 8005134:	08005287 	.word	0x08005287
 8005138:	080050dd 	.word	0x080050dd
 800513c:	0800518d 	.word	0x0800518d
 8005140:	080050dd 	.word	0x080050dd
 8005144:	080050dd 	.word	0x080050dd
 8005148:	08005227 	.word	0x08005227
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	1d1a      	adds	r2, r3, #4
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	602a      	str	r2, [r5, #0]
 8005154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800515c:	2301      	movs	r3, #1
 800515e:	e09f      	b.n	80052a0 <_printf_i+0x1ec>
 8005160:	6820      	ldr	r0, [r4, #0]
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	0607      	lsls	r7, r0, #24
 8005166:	f103 0104 	add.w	r1, r3, #4
 800516a:	6029      	str	r1, [r5, #0]
 800516c:	d501      	bpl.n	8005172 <_printf_i+0xbe>
 800516e:	681e      	ldr	r6, [r3, #0]
 8005170:	e003      	b.n	800517a <_printf_i+0xc6>
 8005172:	0646      	lsls	r6, r0, #25
 8005174:	d5fb      	bpl.n	800516e <_printf_i+0xba>
 8005176:	f9b3 6000 	ldrsh.w	r6, [r3]
 800517a:	2e00      	cmp	r6, #0
 800517c:	da03      	bge.n	8005186 <_printf_i+0xd2>
 800517e:	232d      	movs	r3, #45	; 0x2d
 8005180:	4276      	negs	r6, r6
 8005182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005186:	485a      	ldr	r0, [pc, #360]	; (80052f0 <_printf_i+0x23c>)
 8005188:	230a      	movs	r3, #10
 800518a:	e012      	b.n	80051b2 <_printf_i+0xfe>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	6029      	str	r1, [r5, #0]
 8005194:	0605      	lsls	r5, r0, #24
 8005196:	d501      	bpl.n	800519c <_printf_i+0xe8>
 8005198:	681e      	ldr	r6, [r3, #0]
 800519a:	e002      	b.n	80051a2 <_printf_i+0xee>
 800519c:	0641      	lsls	r1, r0, #25
 800519e:	d5fb      	bpl.n	8005198 <_printf_i+0xe4>
 80051a0:	881e      	ldrh	r6, [r3, #0]
 80051a2:	4853      	ldr	r0, [pc, #332]	; (80052f0 <_printf_i+0x23c>)
 80051a4:	2f6f      	cmp	r7, #111	; 0x6f
 80051a6:	bf0c      	ite	eq
 80051a8:	2308      	moveq	r3, #8
 80051aa:	230a      	movne	r3, #10
 80051ac:	2100      	movs	r1, #0
 80051ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051b2:	6865      	ldr	r5, [r4, #4]
 80051b4:	60a5      	str	r5, [r4, #8]
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	bfa2      	ittt	ge
 80051ba:	6821      	ldrge	r1, [r4, #0]
 80051bc:	f021 0104 	bicge.w	r1, r1, #4
 80051c0:	6021      	strge	r1, [r4, #0]
 80051c2:	b90e      	cbnz	r6, 80051c8 <_printf_i+0x114>
 80051c4:	2d00      	cmp	r5, #0
 80051c6:	d04b      	beq.n	8005260 <_printf_i+0x1ac>
 80051c8:	4615      	mov	r5, r2
 80051ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80051ce:	fb03 6711 	mls	r7, r3, r1, r6
 80051d2:	5dc7      	ldrb	r7, [r0, r7]
 80051d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051d8:	4637      	mov	r7, r6
 80051da:	42bb      	cmp	r3, r7
 80051dc:	460e      	mov	r6, r1
 80051de:	d9f4      	bls.n	80051ca <_printf_i+0x116>
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d10b      	bne.n	80051fc <_printf_i+0x148>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	07de      	lsls	r6, r3, #31
 80051e8:	d508      	bpl.n	80051fc <_printf_i+0x148>
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	6861      	ldr	r1, [r4, #4]
 80051ee:	4299      	cmp	r1, r3
 80051f0:	bfde      	ittt	le
 80051f2:	2330      	movle	r3, #48	; 0x30
 80051f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80051fc:	1b52      	subs	r2, r2, r5
 80051fe:	6122      	str	r2, [r4, #16]
 8005200:	f8cd a000 	str.w	sl, [sp]
 8005204:	464b      	mov	r3, r9
 8005206:	aa03      	add	r2, sp, #12
 8005208:	4621      	mov	r1, r4
 800520a:	4640      	mov	r0, r8
 800520c:	f7ff fee4 	bl	8004fd8 <_printf_common>
 8005210:	3001      	adds	r0, #1
 8005212:	d14a      	bne.n	80052aa <_printf_i+0x1f6>
 8005214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005218:	b004      	add	sp, #16
 800521a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	f043 0320 	orr.w	r3, r3, #32
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	4833      	ldr	r0, [pc, #204]	; (80052f4 <_printf_i+0x240>)
 8005228:	2778      	movs	r7, #120	; 0x78
 800522a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	6829      	ldr	r1, [r5, #0]
 8005232:	061f      	lsls	r7, r3, #24
 8005234:	f851 6b04 	ldr.w	r6, [r1], #4
 8005238:	d402      	bmi.n	8005240 <_printf_i+0x18c>
 800523a:	065f      	lsls	r7, r3, #25
 800523c:	bf48      	it	mi
 800523e:	b2b6      	uxthmi	r6, r6
 8005240:	07df      	lsls	r7, r3, #31
 8005242:	bf48      	it	mi
 8005244:	f043 0320 	orrmi.w	r3, r3, #32
 8005248:	6029      	str	r1, [r5, #0]
 800524a:	bf48      	it	mi
 800524c:	6023      	strmi	r3, [r4, #0]
 800524e:	b91e      	cbnz	r6, 8005258 <_printf_i+0x1a4>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	f023 0320 	bic.w	r3, r3, #32
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	2310      	movs	r3, #16
 800525a:	e7a7      	b.n	80051ac <_printf_i+0xf8>
 800525c:	4824      	ldr	r0, [pc, #144]	; (80052f0 <_printf_i+0x23c>)
 800525e:	e7e4      	b.n	800522a <_printf_i+0x176>
 8005260:	4615      	mov	r5, r2
 8005262:	e7bd      	b.n	80051e0 <_printf_i+0x12c>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	6826      	ldr	r6, [r4, #0]
 8005268:	6961      	ldr	r1, [r4, #20]
 800526a:	1d18      	adds	r0, r3, #4
 800526c:	6028      	str	r0, [r5, #0]
 800526e:	0635      	lsls	r5, r6, #24
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	d501      	bpl.n	8005278 <_printf_i+0x1c4>
 8005274:	6019      	str	r1, [r3, #0]
 8005276:	e002      	b.n	800527e <_printf_i+0x1ca>
 8005278:	0670      	lsls	r0, r6, #25
 800527a:	d5fb      	bpl.n	8005274 <_printf_i+0x1c0>
 800527c:	8019      	strh	r1, [r3, #0]
 800527e:	2300      	movs	r3, #0
 8005280:	6123      	str	r3, [r4, #16]
 8005282:	4615      	mov	r5, r2
 8005284:	e7bc      	b.n	8005200 <_printf_i+0x14c>
 8005286:	682b      	ldr	r3, [r5, #0]
 8005288:	1d1a      	adds	r2, r3, #4
 800528a:	602a      	str	r2, [r5, #0]
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	6862      	ldr	r2, [r4, #4]
 8005290:	2100      	movs	r1, #0
 8005292:	4628      	mov	r0, r5
 8005294:	f7fa ffa4 	bl	80001e0 <memchr>
 8005298:	b108      	cbz	r0, 800529e <_printf_i+0x1ea>
 800529a:	1b40      	subs	r0, r0, r5
 800529c:	6060      	str	r0, [r4, #4]
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	6123      	str	r3, [r4, #16]
 80052a2:	2300      	movs	r3, #0
 80052a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a8:	e7aa      	b.n	8005200 <_printf_i+0x14c>
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	462a      	mov	r2, r5
 80052ae:	4649      	mov	r1, r9
 80052b0:	4640      	mov	r0, r8
 80052b2:	47d0      	blx	sl
 80052b4:	3001      	adds	r0, #1
 80052b6:	d0ad      	beq.n	8005214 <_printf_i+0x160>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	079b      	lsls	r3, r3, #30
 80052bc:	d413      	bmi.n	80052e6 <_printf_i+0x232>
 80052be:	68e0      	ldr	r0, [r4, #12]
 80052c0:	9b03      	ldr	r3, [sp, #12]
 80052c2:	4298      	cmp	r0, r3
 80052c4:	bfb8      	it	lt
 80052c6:	4618      	movlt	r0, r3
 80052c8:	e7a6      	b.n	8005218 <_printf_i+0x164>
 80052ca:	2301      	movs	r3, #1
 80052cc:	4632      	mov	r2, r6
 80052ce:	4649      	mov	r1, r9
 80052d0:	4640      	mov	r0, r8
 80052d2:	47d0      	blx	sl
 80052d4:	3001      	adds	r0, #1
 80052d6:	d09d      	beq.n	8005214 <_printf_i+0x160>
 80052d8:	3501      	adds	r5, #1
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	9903      	ldr	r1, [sp, #12]
 80052de:	1a5b      	subs	r3, r3, r1
 80052e0:	42ab      	cmp	r3, r5
 80052e2:	dcf2      	bgt.n	80052ca <_printf_i+0x216>
 80052e4:	e7eb      	b.n	80052be <_printf_i+0x20a>
 80052e6:	2500      	movs	r5, #0
 80052e8:	f104 0619 	add.w	r6, r4, #25
 80052ec:	e7f5      	b.n	80052da <_printf_i+0x226>
 80052ee:	bf00      	nop
 80052f0:	08007b4e 	.word	0x08007b4e
 80052f4:	08007b5f 	.word	0x08007b5f

080052f8 <std>:
 80052f8:	2300      	movs	r3, #0
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
 80052fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005306:	6083      	str	r3, [r0, #8]
 8005308:	8181      	strh	r1, [r0, #12]
 800530a:	6643      	str	r3, [r0, #100]	; 0x64
 800530c:	81c2      	strh	r2, [r0, #14]
 800530e:	6183      	str	r3, [r0, #24]
 8005310:	4619      	mov	r1, r3
 8005312:	2208      	movs	r2, #8
 8005314:	305c      	adds	r0, #92	; 0x5c
 8005316:	f000 f8d1 	bl	80054bc <memset>
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <std+0x58>)
 800531c:	6263      	str	r3, [r4, #36]	; 0x24
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <std+0x5c>)
 8005320:	62a3      	str	r3, [r4, #40]	; 0x28
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <std+0x60>)
 8005324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <std+0x64>)
 8005328:	6323      	str	r3, [r4, #48]	; 0x30
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <std+0x68>)
 800532c:	6224      	str	r4, [r4, #32]
 800532e:	429c      	cmp	r4, r3
 8005330:	d006      	beq.n	8005340 <std+0x48>
 8005332:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005336:	4294      	cmp	r4, r2
 8005338:	d002      	beq.n	8005340 <std+0x48>
 800533a:	33d0      	adds	r3, #208	; 0xd0
 800533c:	429c      	cmp	r4, r3
 800533e:	d105      	bne.n	800534c <std+0x54>
 8005340:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005348:	f000 b8ee 	b.w	8005528 <__retarget_lock_init_recursive>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	bf00      	nop
 8005350:	08006e91 	.word	0x08006e91
 8005354:	08006eb3 	.word	0x08006eb3
 8005358:	08006eeb 	.word	0x08006eeb
 800535c:	08006f0f 	.word	0x08006f0f
 8005360:	200013cc 	.word	0x200013cc

08005364 <stdio_exit_handler>:
 8005364:	4a02      	ldr	r2, [pc, #8]	; (8005370 <stdio_exit_handler+0xc>)
 8005366:	4903      	ldr	r1, [pc, #12]	; (8005374 <stdio_exit_handler+0x10>)
 8005368:	4803      	ldr	r0, [pc, #12]	; (8005378 <stdio_exit_handler+0x14>)
 800536a:	f000 b869 	b.w	8005440 <_fwalk_sglue>
 800536e:	bf00      	nop
 8005370:	20000060 	.word	0x20000060
 8005374:	08006731 	.word	0x08006731
 8005378:	2000006c 	.word	0x2000006c

0800537c <cleanup_stdio>:
 800537c:	6841      	ldr	r1, [r0, #4]
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <cleanup_stdio+0x34>)
 8005380:	4299      	cmp	r1, r3
 8005382:	b510      	push	{r4, lr}
 8005384:	4604      	mov	r4, r0
 8005386:	d001      	beq.n	800538c <cleanup_stdio+0x10>
 8005388:	f001 f9d2 	bl	8006730 <_fflush_r>
 800538c:	68a1      	ldr	r1, [r4, #8]
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <cleanup_stdio+0x38>)
 8005390:	4299      	cmp	r1, r3
 8005392:	d002      	beq.n	800539a <cleanup_stdio+0x1e>
 8005394:	4620      	mov	r0, r4
 8005396:	f001 f9cb 	bl	8006730 <_fflush_r>
 800539a:	68e1      	ldr	r1, [r4, #12]
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <cleanup_stdio+0x3c>)
 800539e:	4299      	cmp	r1, r3
 80053a0:	d004      	beq.n	80053ac <cleanup_stdio+0x30>
 80053a2:	4620      	mov	r0, r4
 80053a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a8:	f001 b9c2 	b.w	8006730 <_fflush_r>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	200013cc 	.word	0x200013cc
 80053b4:	20001434 	.word	0x20001434
 80053b8:	2000149c 	.word	0x2000149c

080053bc <global_stdio_init.part.0>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <global_stdio_init.part.0+0x30>)
 80053c0:	4c0b      	ldr	r4, [pc, #44]	; (80053f0 <global_stdio_init.part.0+0x34>)
 80053c2:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <global_stdio_init.part.0+0x38>)
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	4620      	mov	r0, r4
 80053c8:	2200      	movs	r2, #0
 80053ca:	2104      	movs	r1, #4
 80053cc:	f7ff ff94 	bl	80052f8 <std>
 80053d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053d4:	2201      	movs	r2, #1
 80053d6:	2109      	movs	r1, #9
 80053d8:	f7ff ff8e 	bl	80052f8 <std>
 80053dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053e0:	2202      	movs	r2, #2
 80053e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e6:	2112      	movs	r1, #18
 80053e8:	f7ff bf86 	b.w	80052f8 <std>
 80053ec:	20001504 	.word	0x20001504
 80053f0:	200013cc 	.word	0x200013cc
 80053f4:	08005365 	.word	0x08005365

080053f8 <__sfp_lock_acquire>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sfp_lock_acquire+0x8>)
 80053fa:	f000 b896 	b.w	800552a <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20001509 	.word	0x20001509

08005404 <__sfp_lock_release>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__sfp_lock_release+0x8>)
 8005406:	f000 b891 	b.w	800552c <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20001509 	.word	0x20001509

08005410 <__sinit>:
 8005410:	b510      	push	{r4, lr}
 8005412:	4604      	mov	r4, r0
 8005414:	f7ff fff0 	bl	80053f8 <__sfp_lock_acquire>
 8005418:	6a23      	ldr	r3, [r4, #32]
 800541a:	b11b      	cbz	r3, 8005424 <__sinit+0x14>
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f7ff bff0 	b.w	8005404 <__sfp_lock_release>
 8005424:	4b04      	ldr	r3, [pc, #16]	; (8005438 <__sinit+0x28>)
 8005426:	6223      	str	r3, [r4, #32]
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <__sinit+0x2c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f5      	bne.n	800541c <__sinit+0xc>
 8005430:	f7ff ffc4 	bl	80053bc <global_stdio_init.part.0>
 8005434:	e7f2      	b.n	800541c <__sinit+0xc>
 8005436:	bf00      	nop
 8005438:	0800537d 	.word	0x0800537d
 800543c:	20001504 	.word	0x20001504

08005440 <_fwalk_sglue>:
 8005440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005444:	4607      	mov	r7, r0
 8005446:	4688      	mov	r8, r1
 8005448:	4614      	mov	r4, r2
 800544a:	2600      	movs	r6, #0
 800544c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005450:	f1b9 0901 	subs.w	r9, r9, #1
 8005454:	d505      	bpl.n	8005462 <_fwalk_sglue+0x22>
 8005456:	6824      	ldr	r4, [r4, #0]
 8005458:	2c00      	cmp	r4, #0
 800545a:	d1f7      	bne.n	800544c <_fwalk_sglue+0xc>
 800545c:	4630      	mov	r0, r6
 800545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d907      	bls.n	8005478 <_fwalk_sglue+0x38>
 8005468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800546c:	3301      	adds	r3, #1
 800546e:	d003      	beq.n	8005478 <_fwalk_sglue+0x38>
 8005470:	4629      	mov	r1, r5
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	4306      	orrs	r6, r0
 8005478:	3568      	adds	r5, #104	; 0x68
 800547a:	e7e9      	b.n	8005450 <_fwalk_sglue+0x10>

0800547c <_vsiprintf_r>:
 800547c:	b500      	push	{lr}
 800547e:	b09b      	sub	sp, #108	; 0x6c
 8005480:	9100      	str	r1, [sp, #0]
 8005482:	9104      	str	r1, [sp, #16]
 8005484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005488:	9105      	str	r1, [sp, #20]
 800548a:	9102      	str	r1, [sp, #8]
 800548c:	4905      	ldr	r1, [pc, #20]	; (80054a4 <_vsiprintf_r+0x28>)
 800548e:	9103      	str	r1, [sp, #12]
 8005490:	4669      	mov	r1, sp
 8005492:	f000 ff21 	bl	80062d8 <_svfiprintf_r>
 8005496:	9b00      	ldr	r3, [sp, #0]
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	b01b      	add	sp, #108	; 0x6c
 800549e:	f85d fb04 	ldr.w	pc, [sp], #4
 80054a2:	bf00      	nop
 80054a4:	ffff0208 	.word	0xffff0208

080054a8 <vsiprintf>:
 80054a8:	4613      	mov	r3, r2
 80054aa:	460a      	mov	r2, r1
 80054ac:	4601      	mov	r1, r0
 80054ae:	4802      	ldr	r0, [pc, #8]	; (80054b8 <vsiprintf+0x10>)
 80054b0:	6800      	ldr	r0, [r0, #0]
 80054b2:	f7ff bfe3 	b.w	800547c <_vsiprintf_r>
 80054b6:	bf00      	nop
 80054b8:	200000b8 	.word	0x200000b8

080054bc <memset>:
 80054bc:	4402      	add	r2, r0
 80054be:	4603      	mov	r3, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <_localeconv_r>:
 80054cc:	4800      	ldr	r0, [pc, #0]	; (80054d0 <_localeconv_r+0x4>)
 80054ce:	4770      	bx	lr
 80054d0:	200001ac 	.word	0x200001ac

080054d4 <__errno>:
 80054d4:	4b01      	ldr	r3, [pc, #4]	; (80054dc <__errno+0x8>)
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	200000b8 	.word	0x200000b8

080054e0 <__libc_init_array>:
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	4d0d      	ldr	r5, [pc, #52]	; (8005518 <__libc_init_array+0x38>)
 80054e4:	4c0d      	ldr	r4, [pc, #52]	; (800551c <__libc_init_array+0x3c>)
 80054e6:	1b64      	subs	r4, r4, r5
 80054e8:	10a4      	asrs	r4, r4, #2
 80054ea:	2600      	movs	r6, #0
 80054ec:	42a6      	cmp	r6, r4
 80054ee:	d109      	bne.n	8005504 <__libc_init_array+0x24>
 80054f0:	4d0b      	ldr	r5, [pc, #44]	; (8005520 <__libc_init_array+0x40>)
 80054f2:	4c0c      	ldr	r4, [pc, #48]	; (8005524 <__libc_init_array+0x44>)
 80054f4:	f002 f91e 	bl	8007734 <_init>
 80054f8:	1b64      	subs	r4, r4, r5
 80054fa:	10a4      	asrs	r4, r4, #2
 80054fc:	2600      	movs	r6, #0
 80054fe:	42a6      	cmp	r6, r4
 8005500:	d105      	bne.n	800550e <__libc_init_array+0x2e>
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	f855 3b04 	ldr.w	r3, [r5], #4
 8005508:	4798      	blx	r3
 800550a:	3601      	adds	r6, #1
 800550c:	e7ee      	b.n	80054ec <__libc_init_array+0xc>
 800550e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005512:	4798      	blx	r3
 8005514:	3601      	adds	r6, #1
 8005516:	e7f2      	b.n	80054fe <__libc_init_array+0x1e>
 8005518:	08007eb4 	.word	0x08007eb4
 800551c:	08007eb4 	.word	0x08007eb4
 8005520:	08007eb4 	.word	0x08007eb4
 8005524:	08007eb8 	.word	0x08007eb8

08005528 <__retarget_lock_init_recursive>:
 8005528:	4770      	bx	lr

0800552a <__retarget_lock_acquire_recursive>:
 800552a:	4770      	bx	lr

0800552c <__retarget_lock_release_recursive>:
 800552c:	4770      	bx	lr

0800552e <quorem>:
 800552e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005532:	6903      	ldr	r3, [r0, #16]
 8005534:	690c      	ldr	r4, [r1, #16]
 8005536:	42a3      	cmp	r3, r4
 8005538:	4607      	mov	r7, r0
 800553a:	db7e      	blt.n	800563a <quorem+0x10c>
 800553c:	3c01      	subs	r4, #1
 800553e:	f101 0814 	add.w	r8, r1, #20
 8005542:	f100 0514 	add.w	r5, r0, #20
 8005546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005554:	3301      	adds	r3, #1
 8005556:	429a      	cmp	r2, r3
 8005558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800555c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005560:	fbb2 f6f3 	udiv	r6, r2, r3
 8005564:	d331      	bcc.n	80055ca <quorem+0x9c>
 8005566:	f04f 0e00 	mov.w	lr, #0
 800556a:	4640      	mov	r0, r8
 800556c:	46ac      	mov	ip, r5
 800556e:	46f2      	mov	sl, lr
 8005570:	f850 2b04 	ldr.w	r2, [r0], #4
 8005574:	b293      	uxth	r3, r2
 8005576:	fb06 e303 	mla	r3, r6, r3, lr
 800557a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800557e:	0c1a      	lsrs	r2, r3, #16
 8005580:	b29b      	uxth	r3, r3
 8005582:	ebaa 0303 	sub.w	r3, sl, r3
 8005586:	f8dc a000 	ldr.w	sl, [ip]
 800558a:	fa13 f38a 	uxtah	r3, r3, sl
 800558e:	fb06 220e 	mla	r2, r6, lr, r2
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	9b00      	ldr	r3, [sp, #0]
 8005596:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800559a:	b292      	uxth	r2, r2
 800559c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80055a8:	4581      	cmp	r9, r0
 80055aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ae:	f84c 3b04 	str.w	r3, [ip], #4
 80055b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055b6:	d2db      	bcs.n	8005570 <quorem+0x42>
 80055b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80055bc:	b92b      	cbnz	r3, 80055ca <quorem+0x9c>
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	429d      	cmp	r5, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	d32c      	bcc.n	8005622 <quorem+0xf4>
 80055c8:	613c      	str	r4, [r7, #16]
 80055ca:	4638      	mov	r0, r7
 80055cc:	f001 fb60 	bl	8006c90 <__mcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	db22      	blt.n	800561a <quorem+0xec>
 80055d4:	3601      	adds	r6, #1
 80055d6:	4629      	mov	r1, r5
 80055d8:	2000      	movs	r0, #0
 80055da:	f858 2b04 	ldr.w	r2, [r8], #4
 80055de:	f8d1 c000 	ldr.w	ip, [r1]
 80055e2:	b293      	uxth	r3, r2
 80055e4:	1ac3      	subs	r3, r0, r3
 80055e6:	0c12      	lsrs	r2, r2, #16
 80055e8:	fa13 f38c 	uxtah	r3, r3, ip
 80055ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80055f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055fa:	45c1      	cmp	r9, r8
 80055fc:	f841 3b04 	str.w	r3, [r1], #4
 8005600:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005604:	d2e9      	bcs.n	80055da <quorem+0xac>
 8005606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800560a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800560e:	b922      	cbnz	r2, 800561a <quorem+0xec>
 8005610:	3b04      	subs	r3, #4
 8005612:	429d      	cmp	r5, r3
 8005614:	461a      	mov	r2, r3
 8005616:	d30a      	bcc.n	800562e <quorem+0x100>
 8005618:	613c      	str	r4, [r7, #16]
 800561a:	4630      	mov	r0, r6
 800561c:	b003      	add	sp, #12
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	3b04      	subs	r3, #4
 8005626:	2a00      	cmp	r2, #0
 8005628:	d1ce      	bne.n	80055c8 <quorem+0x9a>
 800562a:	3c01      	subs	r4, #1
 800562c:	e7c9      	b.n	80055c2 <quorem+0x94>
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	3b04      	subs	r3, #4
 8005632:	2a00      	cmp	r2, #0
 8005634:	d1f0      	bne.n	8005618 <quorem+0xea>
 8005636:	3c01      	subs	r4, #1
 8005638:	e7eb      	b.n	8005612 <quorem+0xe4>
 800563a:	2000      	movs	r0, #0
 800563c:	e7ee      	b.n	800561c <quorem+0xee>
	...

08005640 <_dtoa_r>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	ed2d 8b04 	vpush	{d8-d9}
 8005648:	69c5      	ldr	r5, [r0, #28]
 800564a:	b093      	sub	sp, #76	; 0x4c
 800564c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005650:	ec57 6b10 	vmov	r6, r7, d0
 8005654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005658:	9107      	str	r1, [sp, #28]
 800565a:	4604      	mov	r4, r0
 800565c:	920a      	str	r2, [sp, #40]	; 0x28
 800565e:	930d      	str	r3, [sp, #52]	; 0x34
 8005660:	b975      	cbnz	r5, 8005680 <_dtoa_r+0x40>
 8005662:	2010      	movs	r0, #16
 8005664:	f000 ff36 	bl	80064d4 <malloc>
 8005668:	4602      	mov	r2, r0
 800566a:	61e0      	str	r0, [r4, #28]
 800566c:	b920      	cbnz	r0, 8005678 <_dtoa_r+0x38>
 800566e:	4bae      	ldr	r3, [pc, #696]	; (8005928 <_dtoa_r+0x2e8>)
 8005670:	21ef      	movs	r1, #239	; 0xef
 8005672:	48ae      	ldr	r0, [pc, #696]	; (800592c <_dtoa_r+0x2ec>)
 8005674:	f001 fcfc 	bl	8007070 <__assert_func>
 8005678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800567c:	6005      	str	r5, [r0, #0]
 800567e:	60c5      	str	r5, [r0, #12]
 8005680:	69e3      	ldr	r3, [r4, #28]
 8005682:	6819      	ldr	r1, [r3, #0]
 8005684:	b151      	cbz	r1, 800569c <_dtoa_r+0x5c>
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	604a      	str	r2, [r1, #4]
 800568a:	2301      	movs	r3, #1
 800568c:	4093      	lsls	r3, r2
 800568e:	608b      	str	r3, [r1, #8]
 8005690:	4620      	mov	r0, r4
 8005692:	f001 f8c1 	bl	8006818 <_Bfree>
 8005696:	69e3      	ldr	r3, [r4, #28]
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	1e3b      	subs	r3, r7, #0
 800569e:	bfbb      	ittet	lt
 80056a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	9303      	strlt	r3, [sp, #12]
 80056a6:	2300      	movge	r3, #0
 80056a8:	2201      	movlt	r2, #1
 80056aa:	bfac      	ite	ge
 80056ac:	f8c8 3000 	strge.w	r3, [r8]
 80056b0:	f8c8 2000 	strlt.w	r2, [r8]
 80056b4:	4b9e      	ldr	r3, [pc, #632]	; (8005930 <_dtoa_r+0x2f0>)
 80056b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80056ba:	ea33 0308 	bics.w	r3, r3, r8
 80056be:	d11b      	bne.n	80056f8 <_dtoa_r+0xb8>
 80056c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80056cc:	4333      	orrs	r3, r6
 80056ce:	f000 8593 	beq.w	80061f8 <_dtoa_r+0xbb8>
 80056d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056d4:	b963      	cbnz	r3, 80056f0 <_dtoa_r+0xb0>
 80056d6:	4b97      	ldr	r3, [pc, #604]	; (8005934 <_dtoa_r+0x2f4>)
 80056d8:	e027      	b.n	800572a <_dtoa_r+0xea>
 80056da:	4b97      	ldr	r3, [pc, #604]	; (8005938 <_dtoa_r+0x2f8>)
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	3308      	adds	r3, #8
 80056e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	9800      	ldr	r0, [sp, #0]
 80056e6:	b013      	add	sp, #76	; 0x4c
 80056e8:	ecbd 8b04 	vpop	{d8-d9}
 80056ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f0:	4b90      	ldr	r3, [pc, #576]	; (8005934 <_dtoa_r+0x2f4>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	3303      	adds	r3, #3
 80056f6:	e7f3      	b.n	80056e0 <_dtoa_r+0xa0>
 80056f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	ec51 0b17 	vmov	r0, r1, d7
 8005702:	eeb0 8a47 	vmov.f32	s16, s14
 8005706:	eef0 8a67 	vmov.f32	s17, s15
 800570a:	2300      	movs	r3, #0
 800570c:	f7fb f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005710:	4681      	mov	r9, r0
 8005712:	b160      	cbz	r0, 800572e <_dtoa_r+0xee>
 8005714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005716:	2301      	movs	r3, #1
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8568 	beq.w	80061f2 <_dtoa_r+0xbb2>
 8005722:	4b86      	ldr	r3, [pc, #536]	; (800593c <_dtoa_r+0x2fc>)
 8005724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	e7da      	b.n	80056e4 <_dtoa_r+0xa4>
 800572e:	aa10      	add	r2, sp, #64	; 0x40
 8005730:	a911      	add	r1, sp, #68	; 0x44
 8005732:	4620      	mov	r0, r4
 8005734:	eeb0 0a48 	vmov.f32	s0, s16
 8005738:	eef0 0a68 	vmov.f32	s1, s17
 800573c:	f001 fb4e 	bl	8006ddc <__d2b>
 8005740:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005744:	4682      	mov	sl, r0
 8005746:	2d00      	cmp	r5, #0
 8005748:	d07f      	beq.n	800584a <_dtoa_r+0x20a>
 800574a:	ee18 3a90 	vmov	r3, s17
 800574e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005756:	ec51 0b18 	vmov	r0, r1, d8
 800575a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800575e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005766:	4619      	mov	r1, r3
 8005768:	2200      	movs	r2, #0
 800576a:	4b75      	ldr	r3, [pc, #468]	; (8005940 <_dtoa_r+0x300>)
 800576c:	f7fa fd94 	bl	8000298 <__aeabi_dsub>
 8005770:	a367      	add	r3, pc, #412	; (adr r3, 8005910 <_dtoa_r+0x2d0>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa ff47 	bl	8000608 <__aeabi_dmul>
 800577a:	a367      	add	r3, pc, #412	; (adr r3, 8005918 <_dtoa_r+0x2d8>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa fd8c 	bl	800029c <__adddf3>
 8005784:	4606      	mov	r6, r0
 8005786:	4628      	mov	r0, r5
 8005788:	460f      	mov	r7, r1
 800578a:	f7fa fed3 	bl	8000534 <__aeabi_i2d>
 800578e:	a364      	add	r3, pc, #400	; (adr r3, 8005920 <_dtoa_r+0x2e0>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa ff38 	bl	8000608 <__aeabi_dmul>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4630      	mov	r0, r6
 800579e:	4639      	mov	r1, r7
 80057a0:	f7fa fd7c 	bl	800029c <__adddf3>
 80057a4:	4606      	mov	r6, r0
 80057a6:	460f      	mov	r7, r1
 80057a8:	f7fb f9de 	bl	8000b68 <__aeabi_d2iz>
 80057ac:	2200      	movs	r2, #0
 80057ae:	4683      	mov	fp, r0
 80057b0:	2300      	movs	r3, #0
 80057b2:	4630      	mov	r0, r6
 80057b4:	4639      	mov	r1, r7
 80057b6:	f7fb f999 	bl	8000aec <__aeabi_dcmplt>
 80057ba:	b148      	cbz	r0, 80057d0 <_dtoa_r+0x190>
 80057bc:	4658      	mov	r0, fp
 80057be:	f7fa feb9 	bl	8000534 <__aeabi_i2d>
 80057c2:	4632      	mov	r2, r6
 80057c4:	463b      	mov	r3, r7
 80057c6:	f7fb f987 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ca:	b908      	cbnz	r0, 80057d0 <_dtoa_r+0x190>
 80057cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80057d0:	f1bb 0f16 	cmp.w	fp, #22
 80057d4:	d857      	bhi.n	8005886 <_dtoa_r+0x246>
 80057d6:	4b5b      	ldr	r3, [pc, #364]	; (8005944 <_dtoa_r+0x304>)
 80057d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	ec51 0b18 	vmov	r0, r1, d8
 80057e4:	f7fb f982 	bl	8000aec <__aeabi_dcmplt>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d04e      	beq.n	800588a <_dtoa_r+0x24a>
 80057ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80057f0:	2300      	movs	r3, #0
 80057f2:	930c      	str	r3, [sp, #48]	; 0x30
 80057f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057f6:	1b5b      	subs	r3, r3, r5
 80057f8:	1e5a      	subs	r2, r3, #1
 80057fa:	bf45      	ittet	mi
 80057fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005800:	9305      	strmi	r3, [sp, #20]
 8005802:	2300      	movpl	r3, #0
 8005804:	2300      	movmi	r3, #0
 8005806:	9206      	str	r2, [sp, #24]
 8005808:	bf54      	ite	pl
 800580a:	9305      	strpl	r3, [sp, #20]
 800580c:	9306      	strmi	r3, [sp, #24]
 800580e:	f1bb 0f00 	cmp.w	fp, #0
 8005812:	db3c      	blt.n	800588e <_dtoa_r+0x24e>
 8005814:	9b06      	ldr	r3, [sp, #24]
 8005816:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800581a:	445b      	add	r3, fp
 800581c:	9306      	str	r3, [sp, #24]
 800581e:	2300      	movs	r3, #0
 8005820:	9308      	str	r3, [sp, #32]
 8005822:	9b07      	ldr	r3, [sp, #28]
 8005824:	2b09      	cmp	r3, #9
 8005826:	d868      	bhi.n	80058fa <_dtoa_r+0x2ba>
 8005828:	2b05      	cmp	r3, #5
 800582a:	bfc4      	itt	gt
 800582c:	3b04      	subgt	r3, #4
 800582e:	9307      	strgt	r3, [sp, #28]
 8005830:	9b07      	ldr	r3, [sp, #28]
 8005832:	f1a3 0302 	sub.w	r3, r3, #2
 8005836:	bfcc      	ite	gt
 8005838:	2500      	movgt	r5, #0
 800583a:	2501      	movle	r5, #1
 800583c:	2b03      	cmp	r3, #3
 800583e:	f200 8085 	bhi.w	800594c <_dtoa_r+0x30c>
 8005842:	e8df f003 	tbb	[pc, r3]
 8005846:	3b2e      	.short	0x3b2e
 8005848:	5839      	.short	0x5839
 800584a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800584e:	441d      	add	r5, r3
 8005850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005854:	2b20      	cmp	r3, #32
 8005856:	bfc1      	itttt	gt
 8005858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800585c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005860:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005864:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005868:	bfd6      	itet	le
 800586a:	f1c3 0320 	rsble	r3, r3, #32
 800586e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005872:	fa06 f003 	lslle.w	r0, r6, r3
 8005876:	f7fa fe4d 	bl	8000514 <__aeabi_ui2d>
 800587a:	2201      	movs	r2, #1
 800587c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005880:	3d01      	subs	r5, #1
 8005882:	920e      	str	r2, [sp, #56]	; 0x38
 8005884:	e76f      	b.n	8005766 <_dtoa_r+0x126>
 8005886:	2301      	movs	r3, #1
 8005888:	e7b3      	b.n	80057f2 <_dtoa_r+0x1b2>
 800588a:	900c      	str	r0, [sp, #48]	; 0x30
 800588c:	e7b2      	b.n	80057f4 <_dtoa_r+0x1b4>
 800588e:	9b05      	ldr	r3, [sp, #20]
 8005890:	eba3 030b 	sub.w	r3, r3, fp
 8005894:	9305      	str	r3, [sp, #20]
 8005896:	f1cb 0300 	rsb	r3, fp, #0
 800589a:	9308      	str	r3, [sp, #32]
 800589c:	2300      	movs	r3, #0
 800589e:	930b      	str	r3, [sp, #44]	; 0x2c
 80058a0:	e7bf      	b.n	8005822 <_dtoa_r+0x1e2>
 80058a2:	2300      	movs	r3, #0
 80058a4:	9309      	str	r3, [sp, #36]	; 0x24
 80058a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dc52      	bgt.n	8005952 <_dtoa_r+0x312>
 80058ac:	2301      	movs	r3, #1
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	9304      	str	r3, [sp, #16]
 80058b2:	461a      	mov	r2, r3
 80058b4:	920a      	str	r2, [sp, #40]	; 0x28
 80058b6:	e00b      	b.n	80058d0 <_dtoa_r+0x290>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e7f3      	b.n	80058a4 <_dtoa_r+0x264>
 80058bc:	2300      	movs	r3, #0
 80058be:	9309      	str	r3, [sp, #36]	; 0x24
 80058c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c2:	445b      	add	r3, fp
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	3301      	adds	r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	bfb8      	it	lt
 80058ce:	2301      	movlt	r3, #1
 80058d0:	69e0      	ldr	r0, [r4, #28]
 80058d2:	2100      	movs	r1, #0
 80058d4:	2204      	movs	r2, #4
 80058d6:	f102 0614 	add.w	r6, r2, #20
 80058da:	429e      	cmp	r6, r3
 80058dc:	d93d      	bls.n	800595a <_dtoa_r+0x31a>
 80058de:	6041      	str	r1, [r0, #4]
 80058e0:	4620      	mov	r0, r4
 80058e2:	f000 ff59 	bl	8006798 <_Balloc>
 80058e6:	9000      	str	r0, [sp, #0]
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d139      	bne.n	8005960 <_dtoa_r+0x320>
 80058ec:	4b16      	ldr	r3, [pc, #88]	; (8005948 <_dtoa_r+0x308>)
 80058ee:	4602      	mov	r2, r0
 80058f0:	f240 11af 	movw	r1, #431	; 0x1af
 80058f4:	e6bd      	b.n	8005672 <_dtoa_r+0x32>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e7e1      	b.n	80058be <_dtoa_r+0x27e>
 80058fa:	2501      	movs	r5, #1
 80058fc:	2300      	movs	r3, #0
 80058fe:	9307      	str	r3, [sp, #28]
 8005900:	9509      	str	r5, [sp, #36]	; 0x24
 8005902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	9304      	str	r3, [sp, #16]
 800590a:	2200      	movs	r2, #0
 800590c:	2312      	movs	r3, #18
 800590e:	e7d1      	b.n	80058b4 <_dtoa_r+0x274>
 8005910:	636f4361 	.word	0x636f4361
 8005914:	3fd287a7 	.word	0x3fd287a7
 8005918:	8b60c8b3 	.word	0x8b60c8b3
 800591c:	3fc68a28 	.word	0x3fc68a28
 8005920:	509f79fb 	.word	0x509f79fb
 8005924:	3fd34413 	.word	0x3fd34413
 8005928:	08007b7d 	.word	0x08007b7d
 800592c:	08007b94 	.word	0x08007b94
 8005930:	7ff00000 	.word	0x7ff00000
 8005934:	08007b79 	.word	0x08007b79
 8005938:	08007b70 	.word	0x08007b70
 800593c:	08007b4d 	.word	0x08007b4d
 8005940:	3ff80000 	.word	0x3ff80000
 8005944:	08007c90 	.word	0x08007c90
 8005948:	08007bec 	.word	0x08007bec
 800594c:	2301      	movs	r3, #1
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	e7d7      	b.n	8005902 <_dtoa_r+0x2c2>
 8005952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	9304      	str	r3, [sp, #16]
 8005958:	e7ba      	b.n	80058d0 <_dtoa_r+0x290>
 800595a:	3101      	adds	r1, #1
 800595c:	0052      	lsls	r2, r2, #1
 800595e:	e7ba      	b.n	80058d6 <_dtoa_r+0x296>
 8005960:	69e3      	ldr	r3, [r4, #28]
 8005962:	9a00      	ldr	r2, [sp, #0]
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	9b04      	ldr	r3, [sp, #16]
 8005968:	2b0e      	cmp	r3, #14
 800596a:	f200 80a8 	bhi.w	8005abe <_dtoa_r+0x47e>
 800596e:	2d00      	cmp	r5, #0
 8005970:	f000 80a5 	beq.w	8005abe <_dtoa_r+0x47e>
 8005974:	f1bb 0f00 	cmp.w	fp, #0
 8005978:	dd38      	ble.n	80059ec <_dtoa_r+0x3ac>
 800597a:	4bc0      	ldr	r3, [pc, #768]	; (8005c7c <_dtoa_r+0x63c>)
 800597c:	f00b 020f 	and.w	r2, fp, #15
 8005980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005988:	e9d3 6700 	ldrd	r6, r7, [r3]
 800598c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005990:	d019      	beq.n	80059c6 <_dtoa_r+0x386>
 8005992:	4bbb      	ldr	r3, [pc, #748]	; (8005c80 <_dtoa_r+0x640>)
 8005994:	ec51 0b18 	vmov	r0, r1, d8
 8005998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800599c:	f7fa ff5e 	bl	800085c <__aeabi_ddiv>
 80059a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a4:	f008 080f 	and.w	r8, r8, #15
 80059a8:	2503      	movs	r5, #3
 80059aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005c80 <_dtoa_r+0x640>
 80059ae:	f1b8 0f00 	cmp.w	r8, #0
 80059b2:	d10a      	bne.n	80059ca <_dtoa_r+0x38a>
 80059b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b8:	4632      	mov	r2, r6
 80059ba:	463b      	mov	r3, r7
 80059bc:	f7fa ff4e 	bl	800085c <__aeabi_ddiv>
 80059c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059c4:	e02b      	b.n	8005a1e <_dtoa_r+0x3de>
 80059c6:	2502      	movs	r5, #2
 80059c8:	e7ef      	b.n	80059aa <_dtoa_r+0x36a>
 80059ca:	f018 0f01 	tst.w	r8, #1
 80059ce:	d008      	beq.n	80059e2 <_dtoa_r+0x3a2>
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80059d8:	f7fa fe16 	bl	8000608 <__aeabi_dmul>
 80059dc:	3501      	adds	r5, #1
 80059de:	4606      	mov	r6, r0
 80059e0:	460f      	mov	r7, r1
 80059e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80059e6:	f109 0908 	add.w	r9, r9, #8
 80059ea:	e7e0      	b.n	80059ae <_dtoa_r+0x36e>
 80059ec:	f000 809f 	beq.w	8005b2e <_dtoa_r+0x4ee>
 80059f0:	f1cb 0600 	rsb	r6, fp, #0
 80059f4:	4ba1      	ldr	r3, [pc, #644]	; (8005c7c <_dtoa_r+0x63c>)
 80059f6:	4fa2      	ldr	r7, [pc, #648]	; (8005c80 <_dtoa_r+0x640>)
 80059f8:	f006 020f 	and.w	r2, r6, #15
 80059fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	ec51 0b18 	vmov	r0, r1, d8
 8005a08:	f7fa fdfe 	bl	8000608 <__aeabi_dmul>
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	1136      	asrs	r6, r6, #4
 8005a12:	2300      	movs	r3, #0
 8005a14:	2502      	movs	r5, #2
 8005a16:	2e00      	cmp	r6, #0
 8005a18:	d17e      	bne.n	8005b18 <_dtoa_r+0x4d8>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1d0      	bne.n	80059c0 <_dtoa_r+0x380>
 8005a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8084 	beq.w	8005b32 <_dtoa_r+0x4f2>
 8005a2a:	4b96      	ldr	r3, [pc, #600]	; (8005c84 <_dtoa_r+0x644>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fb f85b 	bl	8000aec <__aeabi_dcmplt>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d07b      	beq.n	8005b32 <_dtoa_r+0x4f2>
 8005a3a:	9b04      	ldr	r3, [sp, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d078      	beq.n	8005b32 <_dtoa_r+0x4f2>
 8005a40:	9b01      	ldr	r3, [sp, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dd39      	ble.n	8005aba <_dtoa_r+0x47a>
 8005a46:	4b90      	ldr	r3, [pc, #576]	; (8005c88 <_dtoa_r+0x648>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	f7fa fddb 	bl	8000608 <__aeabi_dmul>
 8005a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a56:	9e01      	ldr	r6, [sp, #4]
 8005a58:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7fa fd66 	bl	8000534 <__aeabi_i2d>
 8005a68:	4642      	mov	r2, r8
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	f7fa fdcc 	bl	8000608 <__aeabi_dmul>
 8005a70:	4b86      	ldr	r3, [pc, #536]	; (8005c8c <_dtoa_r+0x64c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	f7fa fc12 	bl	800029c <__adddf3>
 8005a78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a80:	9303      	str	r3, [sp, #12]
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d158      	bne.n	8005b38 <_dtoa_r+0x4f8>
 8005a86:	4b82      	ldr	r3, [pc, #520]	; (8005c90 <_dtoa_r+0x650>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	f7fa fc03 	bl	8000298 <__aeabi_dsub>
 8005a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a96:	4680      	mov	r8, r0
 8005a98:	4689      	mov	r9, r1
 8005a9a:	f7fb f845 	bl	8000b28 <__aeabi_dcmpgt>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f040 8296 	bne.w	8005fd0 <_dtoa_r+0x990>
 8005aa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005aae:	4649      	mov	r1, r9
 8005ab0:	f7fb f81c 	bl	8000aec <__aeabi_dcmplt>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f040 8289 	bne.w	8005fcc <_dtoa_r+0x98c>
 8005aba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f2c0 814e 	blt.w	8005d62 <_dtoa_r+0x722>
 8005ac6:	f1bb 0f0e 	cmp.w	fp, #14
 8005aca:	f300 814a 	bgt.w	8005d62 <_dtoa_r+0x722>
 8005ace:	4b6b      	ldr	r3, [pc, #428]	; (8005c7c <_dtoa_r+0x63c>)
 8005ad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f280 80dc 	bge.w	8005c98 <_dtoa_r+0x658>
 8005ae0:	9b04      	ldr	r3, [sp, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f300 80d8 	bgt.w	8005c98 <_dtoa_r+0x658>
 8005ae8:	f040 826f 	bne.w	8005fca <_dtoa_r+0x98a>
 8005aec:	4b68      	ldr	r3, [pc, #416]	; (8005c90 <_dtoa_r+0x650>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	4640      	mov	r0, r8
 8005af2:	4649      	mov	r1, r9
 8005af4:	f7fa fd88 	bl	8000608 <__aeabi_dmul>
 8005af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005afc:	f7fb f80a 	bl	8000b14 <__aeabi_dcmpge>
 8005b00:	9e04      	ldr	r6, [sp, #16]
 8005b02:	4637      	mov	r7, r6
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 8245 	bne.w	8005f94 <_dtoa_r+0x954>
 8005b0a:	9d00      	ldr	r5, [sp, #0]
 8005b0c:	2331      	movs	r3, #49	; 0x31
 8005b0e:	f805 3b01 	strb.w	r3, [r5], #1
 8005b12:	f10b 0b01 	add.w	fp, fp, #1
 8005b16:	e241      	b.n	8005f9c <_dtoa_r+0x95c>
 8005b18:	07f2      	lsls	r2, r6, #31
 8005b1a:	d505      	bpl.n	8005b28 <_dtoa_r+0x4e8>
 8005b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b20:	f7fa fd72 	bl	8000608 <__aeabi_dmul>
 8005b24:	3501      	adds	r5, #1
 8005b26:	2301      	movs	r3, #1
 8005b28:	1076      	asrs	r6, r6, #1
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	e773      	b.n	8005a16 <_dtoa_r+0x3d6>
 8005b2e:	2502      	movs	r5, #2
 8005b30:	e775      	b.n	8005a1e <_dtoa_r+0x3de>
 8005b32:	9e04      	ldr	r6, [sp, #16]
 8005b34:	465f      	mov	r7, fp
 8005b36:	e792      	b.n	8005a5e <_dtoa_r+0x41e>
 8005b38:	9900      	ldr	r1, [sp, #0]
 8005b3a:	4b50      	ldr	r3, [pc, #320]	; (8005c7c <_dtoa_r+0x63c>)
 8005b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b40:	4431      	add	r1, r6
 8005b42:	9102      	str	r1, [sp, #8]
 8005b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b46:	eeb0 9a47 	vmov.f32	s18, s14
 8005b4a:	eef0 9a67 	vmov.f32	s19, s15
 8005b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b56:	2900      	cmp	r1, #0
 8005b58:	d044      	beq.n	8005be4 <_dtoa_r+0x5a4>
 8005b5a:	494e      	ldr	r1, [pc, #312]	; (8005c94 <_dtoa_r+0x654>)
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f7fa fe7d 	bl	800085c <__aeabi_ddiv>
 8005b62:	ec53 2b19 	vmov	r2, r3, d9
 8005b66:	f7fa fb97 	bl	8000298 <__aeabi_dsub>
 8005b6a:	9d00      	ldr	r5, [sp, #0]
 8005b6c:	ec41 0b19 	vmov	d9, r0, r1
 8005b70:	4649      	mov	r1, r9
 8005b72:	4640      	mov	r0, r8
 8005b74:	f7fa fff8 	bl	8000b68 <__aeabi_d2iz>
 8005b78:	4606      	mov	r6, r0
 8005b7a:	f7fa fcdb 	bl	8000534 <__aeabi_i2d>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4640      	mov	r0, r8
 8005b84:	4649      	mov	r1, r9
 8005b86:	f7fa fb87 	bl	8000298 <__aeabi_dsub>
 8005b8a:	3630      	adds	r6, #48	; 0x30
 8005b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b90:	ec53 2b19 	vmov	r2, r3, d9
 8005b94:	4680      	mov	r8, r0
 8005b96:	4689      	mov	r9, r1
 8005b98:	f7fa ffa8 	bl	8000aec <__aeabi_dcmplt>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d164      	bne.n	8005c6a <_dtoa_r+0x62a>
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	4937      	ldr	r1, [pc, #220]	; (8005c84 <_dtoa_r+0x644>)
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	f7fa fb76 	bl	8000298 <__aeabi_dsub>
 8005bac:	ec53 2b19 	vmov	r2, r3, d9
 8005bb0:	f7fa ff9c 	bl	8000aec <__aeabi_dcmplt>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	f040 80b6 	bne.w	8005d26 <_dtoa_r+0x6e6>
 8005bba:	9b02      	ldr	r3, [sp, #8]
 8005bbc:	429d      	cmp	r5, r3
 8005bbe:	f43f af7c 	beq.w	8005aba <_dtoa_r+0x47a>
 8005bc2:	4b31      	ldr	r3, [pc, #196]	; (8005c88 <_dtoa_r+0x648>)
 8005bc4:	ec51 0b19 	vmov	r0, r1, d9
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f7fa fd1d 	bl	8000608 <__aeabi_dmul>
 8005bce:	4b2e      	ldr	r3, [pc, #184]	; (8005c88 <_dtoa_r+0x648>)
 8005bd0:	ec41 0b19 	vmov	d9, r0, r1
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fd15 	bl	8000608 <__aeabi_dmul>
 8005bde:	4680      	mov	r8, r0
 8005be0:	4689      	mov	r9, r1
 8005be2:	e7c5      	b.n	8005b70 <_dtoa_r+0x530>
 8005be4:	ec51 0b17 	vmov	r0, r1, d7
 8005be8:	f7fa fd0e 	bl	8000608 <__aeabi_dmul>
 8005bec:	9b02      	ldr	r3, [sp, #8]
 8005bee:	9d00      	ldr	r5, [sp, #0]
 8005bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bf2:	ec41 0b19 	vmov	d9, r0, r1
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	f7fa ffb5 	bl	8000b68 <__aeabi_d2iz>
 8005bfe:	4606      	mov	r6, r0
 8005c00:	f7fa fc98 	bl	8000534 <__aeabi_i2d>
 8005c04:	3630      	adds	r6, #48	; 0x30
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	f7fa fb43 	bl	8000298 <__aeabi_dsub>
 8005c12:	f805 6b01 	strb.w	r6, [r5], #1
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	429d      	cmp	r5, r3
 8005c1a:	4680      	mov	r8, r0
 8005c1c:	4689      	mov	r9, r1
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	d124      	bne.n	8005c6e <_dtoa_r+0x62e>
 8005c24:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <_dtoa_r+0x654>)
 8005c26:	ec51 0b19 	vmov	r0, r1, d9
 8005c2a:	f7fa fb37 	bl	800029c <__adddf3>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f7fa ff77 	bl	8000b28 <__aeabi_dcmpgt>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d173      	bne.n	8005d26 <_dtoa_r+0x6e6>
 8005c3e:	ec53 2b19 	vmov	r2, r3, d9
 8005c42:	4914      	ldr	r1, [pc, #80]	; (8005c94 <_dtoa_r+0x654>)
 8005c44:	2000      	movs	r0, #0
 8005c46:	f7fa fb27 	bl	8000298 <__aeabi_dsub>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4640      	mov	r0, r8
 8005c50:	4649      	mov	r1, r9
 8005c52:	f7fa ff4b 	bl	8000aec <__aeabi_dcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f43f af2f 	beq.w	8005aba <_dtoa_r+0x47a>
 8005c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c5e:	1e6b      	subs	r3, r5, #1
 8005c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c66:	2b30      	cmp	r3, #48	; 0x30
 8005c68:	d0f8      	beq.n	8005c5c <_dtoa_r+0x61c>
 8005c6a:	46bb      	mov	fp, r7
 8005c6c:	e04a      	b.n	8005d04 <_dtoa_r+0x6c4>
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <_dtoa_r+0x648>)
 8005c70:	f7fa fcca 	bl	8000608 <__aeabi_dmul>
 8005c74:	4680      	mov	r8, r0
 8005c76:	4689      	mov	r9, r1
 8005c78:	e7bd      	b.n	8005bf6 <_dtoa_r+0x5b6>
 8005c7a:	bf00      	nop
 8005c7c:	08007c90 	.word	0x08007c90
 8005c80:	08007c68 	.word	0x08007c68
 8005c84:	3ff00000 	.word	0x3ff00000
 8005c88:	40240000 	.word	0x40240000
 8005c8c:	401c0000 	.word	0x401c0000
 8005c90:	40140000 	.word	0x40140000
 8005c94:	3fe00000 	.word	0x3fe00000
 8005c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c9c:	9d00      	ldr	r5, [sp, #0]
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	f7fa fdd9 	bl	800085c <__aeabi_ddiv>
 8005caa:	f7fa ff5d 	bl	8000b68 <__aeabi_d2iz>
 8005cae:	9001      	str	r0, [sp, #4]
 8005cb0:	f7fa fc40 	bl	8000534 <__aeabi_i2d>
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	f7fa fca6 	bl	8000608 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f7fa fae8 	bl	8000298 <__aeabi_dsub>
 8005cc8:	9e01      	ldr	r6, [sp, #4]
 8005cca:	9f04      	ldr	r7, [sp, #16]
 8005ccc:	3630      	adds	r6, #48	; 0x30
 8005cce:	f805 6b01 	strb.w	r6, [r5], #1
 8005cd2:	9e00      	ldr	r6, [sp, #0]
 8005cd4:	1bae      	subs	r6, r5, r6
 8005cd6:	42b7      	cmp	r7, r6
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	d134      	bne.n	8005d48 <_dtoa_r+0x708>
 8005cde:	f7fa fadd 	bl	800029c <__adddf3>
 8005ce2:	4642      	mov	r2, r8
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	460f      	mov	r7, r1
 8005cea:	f7fa ff1d 	bl	8000b28 <__aeabi_dcmpgt>
 8005cee:	b9c8      	cbnz	r0, 8005d24 <_dtoa_r+0x6e4>
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	f7fa feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cfc:	b110      	cbz	r0, 8005d04 <_dtoa_r+0x6c4>
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	07db      	lsls	r3, r3, #31
 8005d02:	d40f      	bmi.n	8005d24 <_dtoa_r+0x6e4>
 8005d04:	4651      	mov	r1, sl
 8005d06:	4620      	mov	r0, r4
 8005d08:	f000 fd86 	bl	8006818 <_Bfree>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d10:	702b      	strb	r3, [r5, #0]
 8005d12:	f10b 0301 	add.w	r3, fp, #1
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f43f ace2 	beq.w	80056e4 <_dtoa_r+0xa4>
 8005d20:	601d      	str	r5, [r3, #0]
 8005d22:	e4df      	b.n	80056e4 <_dtoa_r+0xa4>
 8005d24:	465f      	mov	r7, fp
 8005d26:	462b      	mov	r3, r5
 8005d28:	461d      	mov	r5, r3
 8005d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d2e:	2a39      	cmp	r2, #57	; 0x39
 8005d30:	d106      	bne.n	8005d40 <_dtoa_r+0x700>
 8005d32:	9a00      	ldr	r2, [sp, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d1f7      	bne.n	8005d28 <_dtoa_r+0x6e8>
 8005d38:	9900      	ldr	r1, [sp, #0]
 8005d3a:	2230      	movs	r2, #48	; 0x30
 8005d3c:	3701      	adds	r7, #1
 8005d3e:	700a      	strb	r2, [r1, #0]
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	3201      	adds	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e790      	b.n	8005c6a <_dtoa_r+0x62a>
 8005d48:	4ba3      	ldr	r3, [pc, #652]	; (8005fd8 <_dtoa_r+0x998>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f7fa fc5c 	bl	8000608 <__aeabi_dmul>
 8005d50:	2200      	movs	r2, #0
 8005d52:	2300      	movs	r3, #0
 8005d54:	4606      	mov	r6, r0
 8005d56:	460f      	mov	r7, r1
 8005d58:	f7fa febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d09e      	beq.n	8005c9e <_dtoa_r+0x65e>
 8005d60:	e7d0      	b.n	8005d04 <_dtoa_r+0x6c4>
 8005d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	f000 80ca 	beq.w	8005efe <_dtoa_r+0x8be>
 8005d6a:	9a07      	ldr	r2, [sp, #28]
 8005d6c:	2a01      	cmp	r2, #1
 8005d6e:	f300 80ad 	bgt.w	8005ecc <_dtoa_r+0x88c>
 8005d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	f000 80a5 	beq.w	8005ec4 <_dtoa_r+0x884>
 8005d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d7e:	9e08      	ldr	r6, [sp, #32]
 8005d80:	9d05      	ldr	r5, [sp, #20]
 8005d82:	9a05      	ldr	r2, [sp, #20]
 8005d84:	441a      	add	r2, r3
 8005d86:	9205      	str	r2, [sp, #20]
 8005d88:	9a06      	ldr	r2, [sp, #24]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	441a      	add	r2, r3
 8005d8e:	4620      	mov	r0, r4
 8005d90:	9206      	str	r2, [sp, #24]
 8005d92:	f000 fdf7 	bl	8006984 <__i2b>
 8005d96:	4607      	mov	r7, r0
 8005d98:	b165      	cbz	r5, 8005db4 <_dtoa_r+0x774>
 8005d9a:	9b06      	ldr	r3, [sp, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dd09      	ble.n	8005db4 <_dtoa_r+0x774>
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	9a05      	ldr	r2, [sp, #20]
 8005da4:	bfa8      	it	ge
 8005da6:	462b      	movge	r3, r5
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	9205      	str	r2, [sp, #20]
 8005dac:	9a06      	ldr	r2, [sp, #24]
 8005dae:	1aed      	subs	r5, r5, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	9306      	str	r3, [sp, #24]
 8005db4:	9b08      	ldr	r3, [sp, #32]
 8005db6:	b1f3      	cbz	r3, 8005df6 <_dtoa_r+0x7b6>
 8005db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 80a3 	beq.w	8005f06 <_dtoa_r+0x8c6>
 8005dc0:	2e00      	cmp	r6, #0
 8005dc2:	dd10      	ble.n	8005de6 <_dtoa_r+0x7a6>
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 fe9b 	bl	8006b04 <__pow5mult>
 8005dce:	4652      	mov	r2, sl
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 fdeb 	bl	80069b0 <__multiply>
 8005dda:	4651      	mov	r1, sl
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 fd1a 	bl	8006818 <_Bfree>
 8005de4:	46c2      	mov	sl, r8
 8005de6:	9b08      	ldr	r3, [sp, #32]
 8005de8:	1b9a      	subs	r2, r3, r6
 8005dea:	d004      	beq.n	8005df6 <_dtoa_r+0x7b6>
 8005dec:	4651      	mov	r1, sl
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 fe88 	bl	8006b04 <__pow5mult>
 8005df4:	4682      	mov	sl, r0
 8005df6:	2101      	movs	r1, #1
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fdc3 	bl	8006984 <__i2b>
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	4606      	mov	r6, r0
 8005e04:	f340 8081 	ble.w	8005f0a <_dtoa_r+0x8ca>
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f000 fe79 	bl	8006b04 <__pow5mult>
 8005e12:	9b07      	ldr	r3, [sp, #28]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	4606      	mov	r6, r0
 8005e18:	dd7a      	ble.n	8005f10 <_dtoa_r+0x8d0>
 8005e1a:	f04f 0800 	mov.w	r8, #0
 8005e1e:	6933      	ldr	r3, [r6, #16]
 8005e20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e24:	6918      	ldr	r0, [r3, #16]
 8005e26:	f000 fd5f 	bl	80068e8 <__hi0bits>
 8005e2a:	f1c0 0020 	rsb	r0, r0, #32
 8005e2e:	9b06      	ldr	r3, [sp, #24]
 8005e30:	4418      	add	r0, r3
 8005e32:	f010 001f 	ands.w	r0, r0, #31
 8005e36:	f000 8094 	beq.w	8005f62 <_dtoa_r+0x922>
 8005e3a:	f1c0 0320 	rsb	r3, r0, #32
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	f340 8085 	ble.w	8005f4e <_dtoa_r+0x90e>
 8005e44:	9b05      	ldr	r3, [sp, #20]
 8005e46:	f1c0 001c 	rsb	r0, r0, #28
 8005e4a:	4403      	add	r3, r0
 8005e4c:	9305      	str	r3, [sp, #20]
 8005e4e:	9b06      	ldr	r3, [sp, #24]
 8005e50:	4403      	add	r3, r0
 8005e52:	4405      	add	r5, r0
 8005e54:	9306      	str	r3, [sp, #24]
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dd05      	ble.n	8005e68 <_dtoa_r+0x828>
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fea9 	bl	8006bb8 <__lshift>
 8005e66:	4682      	mov	sl, r0
 8005e68:	9b06      	ldr	r3, [sp, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dd05      	ble.n	8005e7a <_dtoa_r+0x83a>
 8005e6e:	4631      	mov	r1, r6
 8005e70:	461a      	mov	r2, r3
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 fea0 	bl	8006bb8 <__lshift>
 8005e78:	4606      	mov	r6, r0
 8005e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d072      	beq.n	8005f66 <_dtoa_r+0x926>
 8005e80:	4631      	mov	r1, r6
 8005e82:	4650      	mov	r0, sl
 8005e84:	f000 ff04 	bl	8006c90 <__mcmp>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	da6c      	bge.n	8005f66 <_dtoa_r+0x926>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4651      	mov	r1, sl
 8005e90:	220a      	movs	r2, #10
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 fce2 	bl	800685c <__multadd>
 8005e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 81b0 	beq.w	8006206 <_dtoa_r+0xbc6>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	220a      	movs	r2, #10
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 fcd5 	bl	800685c <__multadd>
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	f300 8096 	bgt.w	8005fe8 <_dtoa_r+0x9a8>
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	dc59      	bgt.n	8005f76 <_dtoa_r+0x936>
 8005ec2:	e091      	b.n	8005fe8 <_dtoa_r+0x9a8>
 8005ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005eca:	e758      	b.n	8005d7e <_dtoa_r+0x73e>
 8005ecc:	9b04      	ldr	r3, [sp, #16]
 8005ece:	1e5e      	subs	r6, r3, #1
 8005ed0:	9b08      	ldr	r3, [sp, #32]
 8005ed2:	42b3      	cmp	r3, r6
 8005ed4:	bfbf      	itttt	lt
 8005ed6:	9b08      	ldrlt	r3, [sp, #32]
 8005ed8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005eda:	9608      	strlt	r6, [sp, #32]
 8005edc:	1af3      	sublt	r3, r6, r3
 8005ede:	bfb4      	ite	lt
 8005ee0:	18d2      	addlt	r2, r2, r3
 8005ee2:	1b9e      	subge	r6, r3, r6
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	bfbc      	itt	lt
 8005ee8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005eea:	2600      	movlt	r6, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfb7      	itett	lt
 8005ef0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005ef4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005ef8:	1a9d      	sublt	r5, r3, r2
 8005efa:	2300      	movlt	r3, #0
 8005efc:	e741      	b.n	8005d82 <_dtoa_r+0x742>
 8005efe:	9e08      	ldr	r6, [sp, #32]
 8005f00:	9d05      	ldr	r5, [sp, #20]
 8005f02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f04:	e748      	b.n	8005d98 <_dtoa_r+0x758>
 8005f06:	9a08      	ldr	r2, [sp, #32]
 8005f08:	e770      	b.n	8005dec <_dtoa_r+0x7ac>
 8005f0a:	9b07      	ldr	r3, [sp, #28]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	dc19      	bgt.n	8005f44 <_dtoa_r+0x904>
 8005f10:	9b02      	ldr	r3, [sp, #8]
 8005f12:	b9bb      	cbnz	r3, 8005f44 <_dtoa_r+0x904>
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f1a:	b99b      	cbnz	r3, 8005f44 <_dtoa_r+0x904>
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f22:	0d1b      	lsrs	r3, r3, #20
 8005f24:	051b      	lsls	r3, r3, #20
 8005f26:	b183      	cbz	r3, 8005f4a <_dtoa_r+0x90a>
 8005f28:	9b05      	ldr	r3, [sp, #20]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	9305      	str	r3, [sp, #20]
 8005f2e:	9b06      	ldr	r3, [sp, #24]
 8005f30:	3301      	adds	r3, #1
 8005f32:	9306      	str	r3, [sp, #24]
 8005f34:	f04f 0801 	mov.w	r8, #1
 8005f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f47f af6f 	bne.w	8005e1e <_dtoa_r+0x7de>
 8005f40:	2001      	movs	r0, #1
 8005f42:	e774      	b.n	8005e2e <_dtoa_r+0x7ee>
 8005f44:	f04f 0800 	mov.w	r8, #0
 8005f48:	e7f6      	b.n	8005f38 <_dtoa_r+0x8f8>
 8005f4a:	4698      	mov	r8, r3
 8005f4c:	e7f4      	b.n	8005f38 <_dtoa_r+0x8f8>
 8005f4e:	d082      	beq.n	8005e56 <_dtoa_r+0x816>
 8005f50:	9a05      	ldr	r2, [sp, #20]
 8005f52:	331c      	adds	r3, #28
 8005f54:	441a      	add	r2, r3
 8005f56:	9205      	str	r2, [sp, #20]
 8005f58:	9a06      	ldr	r2, [sp, #24]
 8005f5a:	441a      	add	r2, r3
 8005f5c:	441d      	add	r5, r3
 8005f5e:	9206      	str	r2, [sp, #24]
 8005f60:	e779      	b.n	8005e56 <_dtoa_r+0x816>
 8005f62:	4603      	mov	r3, r0
 8005f64:	e7f4      	b.n	8005f50 <_dtoa_r+0x910>
 8005f66:	9b04      	ldr	r3, [sp, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dc37      	bgt.n	8005fdc <_dtoa_r+0x99c>
 8005f6c:	9b07      	ldr	r3, [sp, #28]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	dd34      	ble.n	8005fdc <_dtoa_r+0x99c>
 8005f72:	9b04      	ldr	r3, [sp, #16]
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	9b01      	ldr	r3, [sp, #4]
 8005f78:	b963      	cbnz	r3, 8005f94 <_dtoa_r+0x954>
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	2205      	movs	r2, #5
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 fc6c 	bl	800685c <__multadd>
 8005f84:	4601      	mov	r1, r0
 8005f86:	4606      	mov	r6, r0
 8005f88:	4650      	mov	r0, sl
 8005f8a:	f000 fe81 	bl	8006c90 <__mcmp>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f73f adbb 	bgt.w	8005b0a <_dtoa_r+0x4ca>
 8005f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f96:	9d00      	ldr	r5, [sp, #0]
 8005f98:	ea6f 0b03 	mvn.w	fp, r3
 8005f9c:	f04f 0800 	mov.w	r8, #0
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 fc38 	bl	8006818 <_Bfree>
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	f43f aeab 	beq.w	8005d04 <_dtoa_r+0x6c4>
 8005fae:	f1b8 0f00 	cmp.w	r8, #0
 8005fb2:	d005      	beq.n	8005fc0 <_dtoa_r+0x980>
 8005fb4:	45b8      	cmp	r8, r7
 8005fb6:	d003      	beq.n	8005fc0 <_dtoa_r+0x980>
 8005fb8:	4641      	mov	r1, r8
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fc2c 	bl	8006818 <_Bfree>
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fc28 	bl	8006818 <_Bfree>
 8005fc8:	e69c      	b.n	8005d04 <_dtoa_r+0x6c4>
 8005fca:	2600      	movs	r6, #0
 8005fcc:	4637      	mov	r7, r6
 8005fce:	e7e1      	b.n	8005f94 <_dtoa_r+0x954>
 8005fd0:	46bb      	mov	fp, r7
 8005fd2:	4637      	mov	r7, r6
 8005fd4:	e599      	b.n	8005b0a <_dtoa_r+0x4ca>
 8005fd6:	bf00      	nop
 8005fd8:	40240000 	.word	0x40240000
 8005fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80c8 	beq.w	8006174 <_dtoa_r+0xb34>
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	dd05      	ble.n	8005ff8 <_dtoa_r+0x9b8>
 8005fec:	4639      	mov	r1, r7
 8005fee:	462a      	mov	r2, r5
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 fde1 	bl	8006bb8 <__lshift>
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	f1b8 0f00 	cmp.w	r8, #0
 8005ffc:	d05b      	beq.n	80060b6 <_dtoa_r+0xa76>
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4620      	mov	r0, r4
 8006002:	f000 fbc9 	bl	8006798 <_Balloc>
 8006006:	4605      	mov	r5, r0
 8006008:	b928      	cbnz	r0, 8006016 <_dtoa_r+0x9d6>
 800600a:	4b83      	ldr	r3, [pc, #524]	; (8006218 <_dtoa_r+0xbd8>)
 800600c:	4602      	mov	r2, r0
 800600e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006012:	f7ff bb2e 	b.w	8005672 <_dtoa_r+0x32>
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	3202      	adds	r2, #2
 800601a:	0092      	lsls	r2, r2, #2
 800601c:	f107 010c 	add.w	r1, r7, #12
 8006020:	300c      	adds	r0, #12
 8006022:	f001 f817 	bl	8007054 <memcpy>
 8006026:	2201      	movs	r2, #1
 8006028:	4629      	mov	r1, r5
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fdc4 	bl	8006bb8 <__lshift>
 8006030:	9b00      	ldr	r3, [sp, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800603a:	4413      	add	r3, r2
 800603c:	9308      	str	r3, [sp, #32]
 800603e:	9b02      	ldr	r3, [sp, #8]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	46b8      	mov	r8, r7
 8006046:	9306      	str	r3, [sp, #24]
 8006048:	4607      	mov	r7, r0
 800604a:	9b04      	ldr	r3, [sp, #16]
 800604c:	4631      	mov	r1, r6
 800604e:	3b01      	subs	r3, #1
 8006050:	4650      	mov	r0, sl
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	f7ff fa6b 	bl	800552e <quorem>
 8006058:	4641      	mov	r1, r8
 800605a:	9002      	str	r0, [sp, #8]
 800605c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006060:	4650      	mov	r0, sl
 8006062:	f000 fe15 	bl	8006c90 <__mcmp>
 8006066:	463a      	mov	r2, r7
 8006068:	9005      	str	r0, [sp, #20]
 800606a:	4631      	mov	r1, r6
 800606c:	4620      	mov	r0, r4
 800606e:	f000 fe2b 	bl	8006cc8 <__mdiff>
 8006072:	68c2      	ldr	r2, [r0, #12]
 8006074:	4605      	mov	r5, r0
 8006076:	bb02      	cbnz	r2, 80060ba <_dtoa_r+0xa7a>
 8006078:	4601      	mov	r1, r0
 800607a:	4650      	mov	r0, sl
 800607c:	f000 fe08 	bl	8006c90 <__mcmp>
 8006080:	4602      	mov	r2, r0
 8006082:	4629      	mov	r1, r5
 8006084:	4620      	mov	r0, r4
 8006086:	9209      	str	r2, [sp, #36]	; 0x24
 8006088:	f000 fbc6 	bl	8006818 <_Bfree>
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006090:	9d04      	ldr	r5, [sp, #16]
 8006092:	ea43 0102 	orr.w	r1, r3, r2
 8006096:	9b06      	ldr	r3, [sp, #24]
 8006098:	4319      	orrs	r1, r3
 800609a:	d110      	bne.n	80060be <_dtoa_r+0xa7e>
 800609c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060a0:	d029      	beq.n	80060f6 <_dtoa_r+0xab6>
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	dd02      	ble.n	80060ae <_dtoa_r+0xa6e>
 80060a8:	9b02      	ldr	r3, [sp, #8]
 80060aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	f883 9000 	strb.w	r9, [r3]
 80060b4:	e774      	b.n	8005fa0 <_dtoa_r+0x960>
 80060b6:	4638      	mov	r0, r7
 80060b8:	e7ba      	b.n	8006030 <_dtoa_r+0x9f0>
 80060ba:	2201      	movs	r2, #1
 80060bc:	e7e1      	b.n	8006082 <_dtoa_r+0xa42>
 80060be:	9b05      	ldr	r3, [sp, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	db04      	blt.n	80060ce <_dtoa_r+0xa8e>
 80060c4:	9907      	ldr	r1, [sp, #28]
 80060c6:	430b      	orrs	r3, r1
 80060c8:	9906      	ldr	r1, [sp, #24]
 80060ca:	430b      	orrs	r3, r1
 80060cc:	d120      	bne.n	8006110 <_dtoa_r+0xad0>
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	dded      	ble.n	80060ae <_dtoa_r+0xa6e>
 80060d2:	4651      	mov	r1, sl
 80060d4:	2201      	movs	r2, #1
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 fd6e 	bl	8006bb8 <__lshift>
 80060dc:	4631      	mov	r1, r6
 80060de:	4682      	mov	sl, r0
 80060e0:	f000 fdd6 	bl	8006c90 <__mcmp>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	dc03      	bgt.n	80060f0 <_dtoa_r+0xab0>
 80060e8:	d1e1      	bne.n	80060ae <_dtoa_r+0xa6e>
 80060ea:	f019 0f01 	tst.w	r9, #1
 80060ee:	d0de      	beq.n	80060ae <_dtoa_r+0xa6e>
 80060f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060f4:	d1d8      	bne.n	80060a8 <_dtoa_r+0xa68>
 80060f6:	9a01      	ldr	r2, [sp, #4]
 80060f8:	2339      	movs	r3, #57	; 0x39
 80060fa:	7013      	strb	r3, [r2, #0]
 80060fc:	462b      	mov	r3, r5
 80060fe:	461d      	mov	r5, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006106:	2a39      	cmp	r2, #57	; 0x39
 8006108:	d06c      	beq.n	80061e4 <_dtoa_r+0xba4>
 800610a:	3201      	adds	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	e747      	b.n	8005fa0 <_dtoa_r+0x960>
 8006110:	2a00      	cmp	r2, #0
 8006112:	dd07      	ble.n	8006124 <_dtoa_r+0xae4>
 8006114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006118:	d0ed      	beq.n	80060f6 <_dtoa_r+0xab6>
 800611a:	9a01      	ldr	r2, [sp, #4]
 800611c:	f109 0301 	add.w	r3, r9, #1
 8006120:	7013      	strb	r3, [r2, #0]
 8006122:	e73d      	b.n	8005fa0 <_dtoa_r+0x960>
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	9a08      	ldr	r2, [sp, #32]
 8006128:	f803 9c01 	strb.w	r9, [r3, #-1]
 800612c:	4293      	cmp	r3, r2
 800612e:	d043      	beq.n	80061b8 <_dtoa_r+0xb78>
 8006130:	4651      	mov	r1, sl
 8006132:	2300      	movs	r3, #0
 8006134:	220a      	movs	r2, #10
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fb90 	bl	800685c <__multadd>
 800613c:	45b8      	cmp	r8, r7
 800613e:	4682      	mov	sl, r0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	f04f 020a 	mov.w	r2, #10
 8006148:	4641      	mov	r1, r8
 800614a:	4620      	mov	r0, r4
 800614c:	d107      	bne.n	800615e <_dtoa_r+0xb1e>
 800614e:	f000 fb85 	bl	800685c <__multadd>
 8006152:	4680      	mov	r8, r0
 8006154:	4607      	mov	r7, r0
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	3301      	adds	r3, #1
 800615a:	9304      	str	r3, [sp, #16]
 800615c:	e775      	b.n	800604a <_dtoa_r+0xa0a>
 800615e:	f000 fb7d 	bl	800685c <__multadd>
 8006162:	4639      	mov	r1, r7
 8006164:	4680      	mov	r8, r0
 8006166:	2300      	movs	r3, #0
 8006168:	220a      	movs	r2, #10
 800616a:	4620      	mov	r0, r4
 800616c:	f000 fb76 	bl	800685c <__multadd>
 8006170:	4607      	mov	r7, r0
 8006172:	e7f0      	b.n	8006156 <_dtoa_r+0xb16>
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	9d00      	ldr	r5, [sp, #0]
 800617a:	4631      	mov	r1, r6
 800617c:	4650      	mov	r0, sl
 800617e:	f7ff f9d6 	bl	800552e <quorem>
 8006182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	f805 9b01 	strb.w	r9, [r5], #1
 800618c:	1aea      	subs	r2, r5, r3
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	4293      	cmp	r3, r2
 8006192:	dd07      	ble.n	80061a4 <_dtoa_r+0xb64>
 8006194:	4651      	mov	r1, sl
 8006196:	2300      	movs	r3, #0
 8006198:	220a      	movs	r2, #10
 800619a:	4620      	mov	r0, r4
 800619c:	f000 fb5e 	bl	800685c <__multadd>
 80061a0:	4682      	mov	sl, r0
 80061a2:	e7ea      	b.n	800617a <_dtoa_r+0xb3a>
 80061a4:	9b01      	ldr	r3, [sp, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfc8      	it	gt
 80061aa:	461d      	movgt	r5, r3
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	bfd8      	it	le
 80061b0:	2501      	movle	r5, #1
 80061b2:	441d      	add	r5, r3
 80061b4:	f04f 0800 	mov.w	r8, #0
 80061b8:	4651      	mov	r1, sl
 80061ba:	2201      	movs	r2, #1
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 fcfb 	bl	8006bb8 <__lshift>
 80061c2:	4631      	mov	r1, r6
 80061c4:	4682      	mov	sl, r0
 80061c6:	f000 fd63 	bl	8006c90 <__mcmp>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	dc96      	bgt.n	80060fc <_dtoa_r+0xabc>
 80061ce:	d102      	bne.n	80061d6 <_dtoa_r+0xb96>
 80061d0:	f019 0f01 	tst.w	r9, #1
 80061d4:	d192      	bne.n	80060fc <_dtoa_r+0xabc>
 80061d6:	462b      	mov	r3, r5
 80061d8:	461d      	mov	r5, r3
 80061da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061de:	2a30      	cmp	r2, #48	; 0x30
 80061e0:	d0fa      	beq.n	80061d8 <_dtoa_r+0xb98>
 80061e2:	e6dd      	b.n	8005fa0 <_dtoa_r+0x960>
 80061e4:	9a00      	ldr	r2, [sp, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d189      	bne.n	80060fe <_dtoa_r+0xabe>
 80061ea:	f10b 0b01 	add.w	fp, fp, #1
 80061ee:	2331      	movs	r3, #49	; 0x31
 80061f0:	e796      	b.n	8006120 <_dtoa_r+0xae0>
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <_dtoa_r+0xbdc>)
 80061f4:	f7ff ba99 	b.w	800572a <_dtoa_r+0xea>
 80061f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f47f aa6d 	bne.w	80056da <_dtoa_r+0x9a>
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <_dtoa_r+0xbe0>)
 8006202:	f7ff ba92 	b.w	800572a <_dtoa_r+0xea>
 8006206:	9b01      	ldr	r3, [sp, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	dcb5      	bgt.n	8006178 <_dtoa_r+0xb38>
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	2b02      	cmp	r3, #2
 8006210:	f73f aeb1 	bgt.w	8005f76 <_dtoa_r+0x936>
 8006214:	e7b0      	b.n	8006178 <_dtoa_r+0xb38>
 8006216:	bf00      	nop
 8006218:	08007bec 	.word	0x08007bec
 800621c:	08007b4c 	.word	0x08007b4c
 8006220:	08007b70 	.word	0x08007b70

08006224 <__ssputs_r>:
 8006224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	688e      	ldr	r6, [r1, #8]
 800622a:	461f      	mov	r7, r3
 800622c:	42be      	cmp	r6, r7
 800622e:	680b      	ldr	r3, [r1, #0]
 8006230:	4682      	mov	sl, r0
 8006232:	460c      	mov	r4, r1
 8006234:	4690      	mov	r8, r2
 8006236:	d82c      	bhi.n	8006292 <__ssputs_r+0x6e>
 8006238:	898a      	ldrh	r2, [r1, #12]
 800623a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800623e:	d026      	beq.n	800628e <__ssputs_r+0x6a>
 8006240:	6965      	ldr	r5, [r4, #20]
 8006242:	6909      	ldr	r1, [r1, #16]
 8006244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006248:	eba3 0901 	sub.w	r9, r3, r1
 800624c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006250:	1c7b      	adds	r3, r7, #1
 8006252:	444b      	add	r3, r9
 8006254:	106d      	asrs	r5, r5, #1
 8006256:	429d      	cmp	r5, r3
 8006258:	bf38      	it	cc
 800625a:	461d      	movcc	r5, r3
 800625c:	0553      	lsls	r3, r2, #21
 800625e:	d527      	bpl.n	80062b0 <__ssputs_r+0x8c>
 8006260:	4629      	mov	r1, r5
 8006262:	f000 f95f 	bl	8006524 <_malloc_r>
 8006266:	4606      	mov	r6, r0
 8006268:	b360      	cbz	r0, 80062c4 <__ssputs_r+0xa0>
 800626a:	6921      	ldr	r1, [r4, #16]
 800626c:	464a      	mov	r2, r9
 800626e:	f000 fef1 	bl	8007054 <memcpy>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	6126      	str	r6, [r4, #16]
 8006280:	6165      	str	r5, [r4, #20]
 8006282:	444e      	add	r6, r9
 8006284:	eba5 0509 	sub.w	r5, r5, r9
 8006288:	6026      	str	r6, [r4, #0]
 800628a:	60a5      	str	r5, [r4, #8]
 800628c:	463e      	mov	r6, r7
 800628e:	42be      	cmp	r6, r7
 8006290:	d900      	bls.n	8006294 <__ssputs_r+0x70>
 8006292:	463e      	mov	r6, r7
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	4632      	mov	r2, r6
 8006298:	4641      	mov	r1, r8
 800629a:	f000 fe6b 	bl	8006f74 <memmove>
 800629e:	68a3      	ldr	r3, [r4, #8]
 80062a0:	1b9b      	subs	r3, r3, r6
 80062a2:	60a3      	str	r3, [r4, #8]
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	4433      	add	r3, r6
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	2000      	movs	r0, #0
 80062ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b0:	462a      	mov	r2, r5
 80062b2:	f000 fe30 	bl	8006f16 <_realloc_r>
 80062b6:	4606      	mov	r6, r0
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d1e0      	bne.n	800627e <__ssputs_r+0x5a>
 80062bc:	6921      	ldr	r1, [r4, #16]
 80062be:	4650      	mov	r0, sl
 80062c0:	f000 ff0a 	bl	80070d8 <_free_r>
 80062c4:	230c      	movs	r3, #12
 80062c6:	f8ca 3000 	str.w	r3, [sl]
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d0:	81a3      	strh	r3, [r4, #12]
 80062d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d6:	e7e9      	b.n	80062ac <__ssputs_r+0x88>

080062d8 <_svfiprintf_r>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	4698      	mov	r8, r3
 80062de:	898b      	ldrh	r3, [r1, #12]
 80062e0:	061b      	lsls	r3, r3, #24
 80062e2:	b09d      	sub	sp, #116	; 0x74
 80062e4:	4607      	mov	r7, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	4614      	mov	r4, r2
 80062ea:	d50e      	bpl.n	800630a <_svfiprintf_r+0x32>
 80062ec:	690b      	ldr	r3, [r1, #16]
 80062ee:	b963      	cbnz	r3, 800630a <_svfiprintf_r+0x32>
 80062f0:	2140      	movs	r1, #64	; 0x40
 80062f2:	f000 f917 	bl	8006524 <_malloc_r>
 80062f6:	6028      	str	r0, [r5, #0]
 80062f8:	6128      	str	r0, [r5, #16]
 80062fa:	b920      	cbnz	r0, 8006306 <_svfiprintf_r+0x2e>
 80062fc:	230c      	movs	r3, #12
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006304:	e0d0      	b.n	80064a8 <_svfiprintf_r+0x1d0>
 8006306:	2340      	movs	r3, #64	; 0x40
 8006308:	616b      	str	r3, [r5, #20]
 800630a:	2300      	movs	r3, #0
 800630c:	9309      	str	r3, [sp, #36]	; 0x24
 800630e:	2320      	movs	r3, #32
 8006310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006314:	f8cd 800c 	str.w	r8, [sp, #12]
 8006318:	2330      	movs	r3, #48	; 0x30
 800631a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064c0 <_svfiprintf_r+0x1e8>
 800631e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006322:	f04f 0901 	mov.w	r9, #1
 8006326:	4623      	mov	r3, r4
 8006328:	469a      	mov	sl, r3
 800632a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800632e:	b10a      	cbz	r2, 8006334 <_svfiprintf_r+0x5c>
 8006330:	2a25      	cmp	r2, #37	; 0x25
 8006332:	d1f9      	bne.n	8006328 <_svfiprintf_r+0x50>
 8006334:	ebba 0b04 	subs.w	fp, sl, r4
 8006338:	d00b      	beq.n	8006352 <_svfiprintf_r+0x7a>
 800633a:	465b      	mov	r3, fp
 800633c:	4622      	mov	r2, r4
 800633e:	4629      	mov	r1, r5
 8006340:	4638      	mov	r0, r7
 8006342:	f7ff ff6f 	bl	8006224 <__ssputs_r>
 8006346:	3001      	adds	r0, #1
 8006348:	f000 80a9 	beq.w	800649e <_svfiprintf_r+0x1c6>
 800634c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800634e:	445a      	add	r2, fp
 8006350:	9209      	str	r2, [sp, #36]	; 0x24
 8006352:	f89a 3000 	ldrb.w	r3, [sl]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80a1 	beq.w	800649e <_svfiprintf_r+0x1c6>
 800635c:	2300      	movs	r3, #0
 800635e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006366:	f10a 0a01 	add.w	sl, sl, #1
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	9307      	str	r3, [sp, #28]
 800636e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006372:	931a      	str	r3, [sp, #104]	; 0x68
 8006374:	4654      	mov	r4, sl
 8006376:	2205      	movs	r2, #5
 8006378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637c:	4850      	ldr	r0, [pc, #320]	; (80064c0 <_svfiprintf_r+0x1e8>)
 800637e:	f7f9 ff2f 	bl	80001e0 <memchr>
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	b9d8      	cbnz	r0, 80063be <_svfiprintf_r+0xe6>
 8006386:	06d0      	lsls	r0, r2, #27
 8006388:	bf44      	itt	mi
 800638a:	2320      	movmi	r3, #32
 800638c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006390:	0711      	lsls	r1, r2, #28
 8006392:	bf44      	itt	mi
 8006394:	232b      	movmi	r3, #43	; 0x2b
 8006396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800639a:	f89a 3000 	ldrb.w	r3, [sl]
 800639e:	2b2a      	cmp	r3, #42	; 0x2a
 80063a0:	d015      	beq.n	80063ce <_svfiprintf_r+0xf6>
 80063a2:	9a07      	ldr	r2, [sp, #28]
 80063a4:	4654      	mov	r4, sl
 80063a6:	2000      	movs	r0, #0
 80063a8:	f04f 0c0a 	mov.w	ip, #10
 80063ac:	4621      	mov	r1, r4
 80063ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b2:	3b30      	subs	r3, #48	; 0x30
 80063b4:	2b09      	cmp	r3, #9
 80063b6:	d94d      	bls.n	8006454 <_svfiprintf_r+0x17c>
 80063b8:	b1b0      	cbz	r0, 80063e8 <_svfiprintf_r+0x110>
 80063ba:	9207      	str	r2, [sp, #28]
 80063bc:	e014      	b.n	80063e8 <_svfiprintf_r+0x110>
 80063be:	eba0 0308 	sub.w	r3, r0, r8
 80063c2:	fa09 f303 	lsl.w	r3, r9, r3
 80063c6:	4313      	orrs	r3, r2
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	46a2      	mov	sl, r4
 80063cc:	e7d2      	b.n	8006374 <_svfiprintf_r+0x9c>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	1d19      	adds	r1, r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	9103      	str	r1, [sp, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfbb      	ittet	lt
 80063da:	425b      	neglt	r3, r3
 80063dc:	f042 0202 	orrlt.w	r2, r2, #2
 80063e0:	9307      	strge	r3, [sp, #28]
 80063e2:	9307      	strlt	r3, [sp, #28]
 80063e4:	bfb8      	it	lt
 80063e6:	9204      	strlt	r2, [sp, #16]
 80063e8:	7823      	ldrb	r3, [r4, #0]
 80063ea:	2b2e      	cmp	r3, #46	; 0x2e
 80063ec:	d10c      	bne.n	8006408 <_svfiprintf_r+0x130>
 80063ee:	7863      	ldrb	r3, [r4, #1]
 80063f0:	2b2a      	cmp	r3, #42	; 0x2a
 80063f2:	d134      	bne.n	800645e <_svfiprintf_r+0x186>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	1d1a      	adds	r2, r3, #4
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	9203      	str	r2, [sp, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bfb8      	it	lt
 8006400:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006404:	3402      	adds	r4, #2
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80064d0 <_svfiprintf_r+0x1f8>
 800640c:	7821      	ldrb	r1, [r4, #0]
 800640e:	2203      	movs	r2, #3
 8006410:	4650      	mov	r0, sl
 8006412:	f7f9 fee5 	bl	80001e0 <memchr>
 8006416:	b138      	cbz	r0, 8006428 <_svfiprintf_r+0x150>
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	eba0 000a 	sub.w	r0, r0, sl
 800641e:	2240      	movs	r2, #64	; 0x40
 8006420:	4082      	lsls	r2, r0
 8006422:	4313      	orrs	r3, r2
 8006424:	3401      	adds	r4, #1
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642c:	4825      	ldr	r0, [pc, #148]	; (80064c4 <_svfiprintf_r+0x1ec>)
 800642e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006432:	2206      	movs	r2, #6
 8006434:	f7f9 fed4 	bl	80001e0 <memchr>
 8006438:	2800      	cmp	r0, #0
 800643a:	d038      	beq.n	80064ae <_svfiprintf_r+0x1d6>
 800643c:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <_svfiprintf_r+0x1f0>)
 800643e:	bb1b      	cbnz	r3, 8006488 <_svfiprintf_r+0x1b0>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	3307      	adds	r3, #7
 8006444:	f023 0307 	bic.w	r3, r3, #7
 8006448:	3308      	adds	r3, #8
 800644a:	9303      	str	r3, [sp, #12]
 800644c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644e:	4433      	add	r3, r6
 8006450:	9309      	str	r3, [sp, #36]	; 0x24
 8006452:	e768      	b.n	8006326 <_svfiprintf_r+0x4e>
 8006454:	fb0c 3202 	mla	r2, ip, r2, r3
 8006458:	460c      	mov	r4, r1
 800645a:	2001      	movs	r0, #1
 800645c:	e7a6      	b.n	80063ac <_svfiprintf_r+0xd4>
 800645e:	2300      	movs	r3, #0
 8006460:	3401      	adds	r4, #1
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	4619      	mov	r1, r3
 8006466:	f04f 0c0a 	mov.w	ip, #10
 800646a:	4620      	mov	r0, r4
 800646c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006470:	3a30      	subs	r2, #48	; 0x30
 8006472:	2a09      	cmp	r2, #9
 8006474:	d903      	bls.n	800647e <_svfiprintf_r+0x1a6>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0c6      	beq.n	8006408 <_svfiprintf_r+0x130>
 800647a:	9105      	str	r1, [sp, #20]
 800647c:	e7c4      	b.n	8006408 <_svfiprintf_r+0x130>
 800647e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006482:	4604      	mov	r4, r0
 8006484:	2301      	movs	r3, #1
 8006486:	e7f0      	b.n	800646a <_svfiprintf_r+0x192>
 8006488:	ab03      	add	r3, sp, #12
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	462a      	mov	r2, r5
 800648e:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <_svfiprintf_r+0x1f4>)
 8006490:	a904      	add	r1, sp, #16
 8006492:	4638      	mov	r0, r7
 8006494:	f7fe fb6a 	bl	8004b6c <_printf_float>
 8006498:	1c42      	adds	r2, r0, #1
 800649a:	4606      	mov	r6, r0
 800649c:	d1d6      	bne.n	800644c <_svfiprintf_r+0x174>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	065b      	lsls	r3, r3, #25
 80064a2:	f53f af2d 	bmi.w	8006300 <_svfiprintf_r+0x28>
 80064a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a8:	b01d      	add	sp, #116	; 0x74
 80064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ae:	ab03      	add	r3, sp, #12
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	462a      	mov	r2, r5
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <_svfiprintf_r+0x1f4>)
 80064b6:	a904      	add	r1, sp, #16
 80064b8:	4638      	mov	r0, r7
 80064ba:	f7fe fdfb 	bl	80050b4 <_printf_i>
 80064be:	e7eb      	b.n	8006498 <_svfiprintf_r+0x1c0>
 80064c0:	08007bfd 	.word	0x08007bfd
 80064c4:	08007c07 	.word	0x08007c07
 80064c8:	08004b6d 	.word	0x08004b6d
 80064cc:	08006225 	.word	0x08006225
 80064d0:	08007c03 	.word	0x08007c03

080064d4 <malloc>:
 80064d4:	4b02      	ldr	r3, [pc, #8]	; (80064e0 <malloc+0xc>)
 80064d6:	4601      	mov	r1, r0
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	f000 b823 	b.w	8006524 <_malloc_r>
 80064de:	bf00      	nop
 80064e0:	200000b8 	.word	0x200000b8

080064e4 <sbrk_aligned>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	4e0e      	ldr	r6, [pc, #56]	; (8006520 <sbrk_aligned+0x3c>)
 80064e8:	460c      	mov	r4, r1
 80064ea:	6831      	ldr	r1, [r6, #0]
 80064ec:	4605      	mov	r5, r0
 80064ee:	b911      	cbnz	r1, 80064f6 <sbrk_aligned+0x12>
 80064f0:	f000 fd8e 	bl	8007010 <_sbrk_r>
 80064f4:	6030      	str	r0, [r6, #0]
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 fd89 	bl	8007010 <_sbrk_r>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	d00a      	beq.n	8006518 <sbrk_aligned+0x34>
 8006502:	1cc4      	adds	r4, r0, #3
 8006504:	f024 0403 	bic.w	r4, r4, #3
 8006508:	42a0      	cmp	r0, r4
 800650a:	d007      	beq.n	800651c <sbrk_aligned+0x38>
 800650c:	1a21      	subs	r1, r4, r0
 800650e:	4628      	mov	r0, r5
 8006510:	f000 fd7e 	bl	8007010 <_sbrk_r>
 8006514:	3001      	adds	r0, #1
 8006516:	d101      	bne.n	800651c <sbrk_aligned+0x38>
 8006518:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800651c:	4620      	mov	r0, r4
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	20001510 	.word	0x20001510

08006524 <_malloc_r>:
 8006524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006528:	1ccd      	adds	r5, r1, #3
 800652a:	f025 0503 	bic.w	r5, r5, #3
 800652e:	3508      	adds	r5, #8
 8006530:	2d0c      	cmp	r5, #12
 8006532:	bf38      	it	cc
 8006534:	250c      	movcc	r5, #12
 8006536:	2d00      	cmp	r5, #0
 8006538:	4607      	mov	r7, r0
 800653a:	db01      	blt.n	8006540 <_malloc_r+0x1c>
 800653c:	42a9      	cmp	r1, r5
 800653e:	d905      	bls.n	800654c <_malloc_r+0x28>
 8006540:	230c      	movs	r3, #12
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	2600      	movs	r6, #0
 8006546:	4630      	mov	r0, r6
 8006548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800654c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006620 <_malloc_r+0xfc>
 8006550:	f000 f916 	bl	8006780 <__malloc_lock>
 8006554:	f8d8 3000 	ldr.w	r3, [r8]
 8006558:	461c      	mov	r4, r3
 800655a:	bb5c      	cbnz	r4, 80065b4 <_malloc_r+0x90>
 800655c:	4629      	mov	r1, r5
 800655e:	4638      	mov	r0, r7
 8006560:	f7ff ffc0 	bl	80064e4 <sbrk_aligned>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	4604      	mov	r4, r0
 8006568:	d155      	bne.n	8006616 <_malloc_r+0xf2>
 800656a:	f8d8 4000 	ldr.w	r4, [r8]
 800656e:	4626      	mov	r6, r4
 8006570:	2e00      	cmp	r6, #0
 8006572:	d145      	bne.n	8006600 <_malloc_r+0xdc>
 8006574:	2c00      	cmp	r4, #0
 8006576:	d048      	beq.n	800660a <_malloc_r+0xe6>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	4631      	mov	r1, r6
 800657c:	4638      	mov	r0, r7
 800657e:	eb04 0903 	add.w	r9, r4, r3
 8006582:	f000 fd45 	bl	8007010 <_sbrk_r>
 8006586:	4581      	cmp	r9, r0
 8006588:	d13f      	bne.n	800660a <_malloc_r+0xe6>
 800658a:	6821      	ldr	r1, [r4, #0]
 800658c:	1a6d      	subs	r5, r5, r1
 800658e:	4629      	mov	r1, r5
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff ffa7 	bl	80064e4 <sbrk_aligned>
 8006596:	3001      	adds	r0, #1
 8006598:	d037      	beq.n	800660a <_malloc_r+0xe6>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	442b      	add	r3, r5
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	f8d8 3000 	ldr.w	r3, [r8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d038      	beq.n	800661a <_malloc_r+0xf6>
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	42a2      	cmp	r2, r4
 80065ac:	d12b      	bne.n	8006606 <_malloc_r+0xe2>
 80065ae:	2200      	movs	r2, #0
 80065b0:	605a      	str	r2, [r3, #4]
 80065b2:	e00f      	b.n	80065d4 <_malloc_r+0xb0>
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	1b52      	subs	r2, r2, r5
 80065b8:	d41f      	bmi.n	80065fa <_malloc_r+0xd6>
 80065ba:	2a0b      	cmp	r2, #11
 80065bc:	d917      	bls.n	80065ee <_malloc_r+0xca>
 80065be:	1961      	adds	r1, r4, r5
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	6025      	str	r5, [r4, #0]
 80065c4:	bf18      	it	ne
 80065c6:	6059      	strne	r1, [r3, #4]
 80065c8:	6863      	ldr	r3, [r4, #4]
 80065ca:	bf08      	it	eq
 80065cc:	f8c8 1000 	streq.w	r1, [r8]
 80065d0:	5162      	str	r2, [r4, r5]
 80065d2:	604b      	str	r3, [r1, #4]
 80065d4:	4638      	mov	r0, r7
 80065d6:	f104 060b 	add.w	r6, r4, #11
 80065da:	f000 f8d7 	bl	800678c <__malloc_unlock>
 80065de:	f026 0607 	bic.w	r6, r6, #7
 80065e2:	1d23      	adds	r3, r4, #4
 80065e4:	1af2      	subs	r2, r6, r3
 80065e6:	d0ae      	beq.n	8006546 <_malloc_r+0x22>
 80065e8:	1b9b      	subs	r3, r3, r6
 80065ea:	50a3      	str	r3, [r4, r2]
 80065ec:	e7ab      	b.n	8006546 <_malloc_r+0x22>
 80065ee:	42a3      	cmp	r3, r4
 80065f0:	6862      	ldr	r2, [r4, #4]
 80065f2:	d1dd      	bne.n	80065b0 <_malloc_r+0x8c>
 80065f4:	f8c8 2000 	str.w	r2, [r8]
 80065f8:	e7ec      	b.n	80065d4 <_malloc_r+0xb0>
 80065fa:	4623      	mov	r3, r4
 80065fc:	6864      	ldr	r4, [r4, #4]
 80065fe:	e7ac      	b.n	800655a <_malloc_r+0x36>
 8006600:	4634      	mov	r4, r6
 8006602:	6876      	ldr	r6, [r6, #4]
 8006604:	e7b4      	b.n	8006570 <_malloc_r+0x4c>
 8006606:	4613      	mov	r3, r2
 8006608:	e7cc      	b.n	80065a4 <_malloc_r+0x80>
 800660a:	230c      	movs	r3, #12
 800660c:	603b      	str	r3, [r7, #0]
 800660e:	4638      	mov	r0, r7
 8006610:	f000 f8bc 	bl	800678c <__malloc_unlock>
 8006614:	e797      	b.n	8006546 <_malloc_r+0x22>
 8006616:	6025      	str	r5, [r4, #0]
 8006618:	e7dc      	b.n	80065d4 <_malloc_r+0xb0>
 800661a:	605b      	str	r3, [r3, #4]
 800661c:	deff      	udf	#255	; 0xff
 800661e:	bf00      	nop
 8006620:	2000150c 	.word	0x2000150c

08006624 <__sflush_r>:
 8006624:	898a      	ldrh	r2, [r1, #12]
 8006626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	4605      	mov	r5, r0
 800662c:	0710      	lsls	r0, r2, #28
 800662e:	460c      	mov	r4, r1
 8006630:	d458      	bmi.n	80066e4 <__sflush_r+0xc0>
 8006632:	684b      	ldr	r3, [r1, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc05      	bgt.n	8006644 <__sflush_r+0x20>
 8006638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	dc02      	bgt.n	8006644 <__sflush_r+0x20>
 800663e:	2000      	movs	r0, #0
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006646:	2e00      	cmp	r6, #0
 8006648:	d0f9      	beq.n	800663e <__sflush_r+0x1a>
 800664a:	2300      	movs	r3, #0
 800664c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006650:	682f      	ldr	r7, [r5, #0]
 8006652:	6a21      	ldr	r1, [r4, #32]
 8006654:	602b      	str	r3, [r5, #0]
 8006656:	d032      	beq.n	80066be <__sflush_r+0x9a>
 8006658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	075a      	lsls	r2, r3, #29
 800665e:	d505      	bpl.n	800666c <__sflush_r+0x48>
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	1ac0      	subs	r0, r0, r3
 8006664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006666:	b10b      	cbz	r3, 800666c <__sflush_r+0x48>
 8006668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800666a:	1ac0      	subs	r0, r0, r3
 800666c:	2300      	movs	r3, #0
 800666e:	4602      	mov	r2, r0
 8006670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006672:	6a21      	ldr	r1, [r4, #32]
 8006674:	4628      	mov	r0, r5
 8006676:	47b0      	blx	r6
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	d106      	bne.n	800668c <__sflush_r+0x68>
 800667e:	6829      	ldr	r1, [r5, #0]
 8006680:	291d      	cmp	r1, #29
 8006682:	d82b      	bhi.n	80066dc <__sflush_r+0xb8>
 8006684:	4a29      	ldr	r2, [pc, #164]	; (800672c <__sflush_r+0x108>)
 8006686:	410a      	asrs	r2, r1
 8006688:	07d6      	lsls	r6, r2, #31
 800668a:	d427      	bmi.n	80066dc <__sflush_r+0xb8>
 800668c:	2200      	movs	r2, #0
 800668e:	6062      	str	r2, [r4, #4]
 8006690:	04d9      	lsls	r1, r3, #19
 8006692:	6922      	ldr	r2, [r4, #16]
 8006694:	6022      	str	r2, [r4, #0]
 8006696:	d504      	bpl.n	80066a2 <__sflush_r+0x7e>
 8006698:	1c42      	adds	r2, r0, #1
 800669a:	d101      	bne.n	80066a0 <__sflush_r+0x7c>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b903      	cbnz	r3, 80066a2 <__sflush_r+0x7e>
 80066a0:	6560      	str	r0, [r4, #84]	; 0x54
 80066a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a4:	602f      	str	r7, [r5, #0]
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d0c9      	beq.n	800663e <__sflush_r+0x1a>
 80066aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ae:	4299      	cmp	r1, r3
 80066b0:	d002      	beq.n	80066b8 <__sflush_r+0x94>
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 fd10 	bl	80070d8 <_free_r>
 80066b8:	2000      	movs	r0, #0
 80066ba:	6360      	str	r0, [r4, #52]	; 0x34
 80066bc:	e7c0      	b.n	8006640 <__sflush_r+0x1c>
 80066be:	2301      	movs	r3, #1
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b0      	blx	r6
 80066c4:	1c41      	adds	r1, r0, #1
 80066c6:	d1c8      	bne.n	800665a <__sflush_r+0x36>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0c5      	beq.n	800665a <__sflush_r+0x36>
 80066ce:	2b1d      	cmp	r3, #29
 80066d0:	d001      	beq.n	80066d6 <__sflush_r+0xb2>
 80066d2:	2b16      	cmp	r3, #22
 80066d4:	d101      	bne.n	80066da <__sflush_r+0xb6>
 80066d6:	602f      	str	r7, [r5, #0]
 80066d8:	e7b1      	b.n	800663e <__sflush_r+0x1a>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	e7ad      	b.n	8006640 <__sflush_r+0x1c>
 80066e4:	690f      	ldr	r7, [r1, #16]
 80066e6:	2f00      	cmp	r7, #0
 80066e8:	d0a9      	beq.n	800663e <__sflush_r+0x1a>
 80066ea:	0793      	lsls	r3, r2, #30
 80066ec:	680e      	ldr	r6, [r1, #0]
 80066ee:	bf08      	it	eq
 80066f0:	694b      	ldreq	r3, [r1, #20]
 80066f2:	600f      	str	r7, [r1, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2300      	movne	r3, #0
 80066f8:	eba6 0807 	sub.w	r8, r6, r7
 80066fc:	608b      	str	r3, [r1, #8]
 80066fe:	f1b8 0f00 	cmp.w	r8, #0
 8006702:	dd9c      	ble.n	800663e <__sflush_r+0x1a>
 8006704:	6a21      	ldr	r1, [r4, #32]
 8006706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006708:	4643      	mov	r3, r8
 800670a:	463a      	mov	r2, r7
 800670c:	4628      	mov	r0, r5
 800670e:	47b0      	blx	r6
 8006710:	2800      	cmp	r0, #0
 8006712:	dc06      	bgt.n	8006722 <__sflush_r+0xfe>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006720:	e78e      	b.n	8006640 <__sflush_r+0x1c>
 8006722:	4407      	add	r7, r0
 8006724:	eba8 0800 	sub.w	r8, r8, r0
 8006728:	e7e9      	b.n	80066fe <__sflush_r+0xda>
 800672a:	bf00      	nop
 800672c:	dfbffffe 	.word	0xdfbffffe

08006730 <_fflush_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	690b      	ldr	r3, [r1, #16]
 8006734:	4605      	mov	r5, r0
 8006736:	460c      	mov	r4, r1
 8006738:	b913      	cbnz	r3, 8006740 <_fflush_r+0x10>
 800673a:	2500      	movs	r5, #0
 800673c:	4628      	mov	r0, r5
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	b118      	cbz	r0, 800674a <_fflush_r+0x1a>
 8006742:	6a03      	ldr	r3, [r0, #32]
 8006744:	b90b      	cbnz	r3, 800674a <_fflush_r+0x1a>
 8006746:	f7fe fe63 	bl	8005410 <__sinit>
 800674a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f3      	beq.n	800673a <_fflush_r+0xa>
 8006752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006754:	07d0      	lsls	r0, r2, #31
 8006756:	d404      	bmi.n	8006762 <_fflush_r+0x32>
 8006758:	0599      	lsls	r1, r3, #22
 800675a:	d402      	bmi.n	8006762 <_fflush_r+0x32>
 800675c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675e:	f7fe fee4 	bl	800552a <__retarget_lock_acquire_recursive>
 8006762:	4628      	mov	r0, r5
 8006764:	4621      	mov	r1, r4
 8006766:	f7ff ff5d 	bl	8006624 <__sflush_r>
 800676a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676c:	07da      	lsls	r2, r3, #31
 800676e:	4605      	mov	r5, r0
 8006770:	d4e4      	bmi.n	800673c <_fflush_r+0xc>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	059b      	lsls	r3, r3, #22
 8006776:	d4e1      	bmi.n	800673c <_fflush_r+0xc>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f7fe fed7 	bl	800552c <__retarget_lock_release_recursive>
 800677e:	e7dd      	b.n	800673c <_fflush_r+0xc>

08006780 <__malloc_lock>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__malloc_lock+0x8>)
 8006782:	f7fe bed2 	b.w	800552a <__retarget_lock_acquire_recursive>
 8006786:	bf00      	nop
 8006788:	20001508 	.word	0x20001508

0800678c <__malloc_unlock>:
 800678c:	4801      	ldr	r0, [pc, #4]	; (8006794 <__malloc_unlock+0x8>)
 800678e:	f7fe becd 	b.w	800552c <__retarget_lock_release_recursive>
 8006792:	bf00      	nop
 8006794:	20001508 	.word	0x20001508

08006798 <_Balloc>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	69c6      	ldr	r6, [r0, #28]
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	b976      	cbnz	r6, 80067c0 <_Balloc+0x28>
 80067a2:	2010      	movs	r0, #16
 80067a4:	f7ff fe96 	bl	80064d4 <malloc>
 80067a8:	4602      	mov	r2, r0
 80067aa:	61e0      	str	r0, [r4, #28]
 80067ac:	b920      	cbnz	r0, 80067b8 <_Balloc+0x20>
 80067ae:	4b18      	ldr	r3, [pc, #96]	; (8006810 <_Balloc+0x78>)
 80067b0:	4818      	ldr	r0, [pc, #96]	; (8006814 <_Balloc+0x7c>)
 80067b2:	216b      	movs	r1, #107	; 0x6b
 80067b4:	f000 fc5c 	bl	8007070 <__assert_func>
 80067b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067bc:	6006      	str	r6, [r0, #0]
 80067be:	60c6      	str	r6, [r0, #12]
 80067c0:	69e6      	ldr	r6, [r4, #28]
 80067c2:	68f3      	ldr	r3, [r6, #12]
 80067c4:	b183      	cbz	r3, 80067e8 <_Balloc+0x50>
 80067c6:	69e3      	ldr	r3, [r4, #28]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067ce:	b9b8      	cbnz	r0, 8006800 <_Balloc+0x68>
 80067d0:	2101      	movs	r1, #1
 80067d2:	fa01 f605 	lsl.w	r6, r1, r5
 80067d6:	1d72      	adds	r2, r6, #5
 80067d8:	0092      	lsls	r2, r2, #2
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fc66 	bl	80070ac <_calloc_r>
 80067e0:	b160      	cbz	r0, 80067fc <_Balloc+0x64>
 80067e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067e6:	e00e      	b.n	8006806 <_Balloc+0x6e>
 80067e8:	2221      	movs	r2, #33	; 0x21
 80067ea:	2104      	movs	r1, #4
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fc5d 	bl	80070ac <_calloc_r>
 80067f2:	69e3      	ldr	r3, [r4, #28]
 80067f4:	60f0      	str	r0, [r6, #12]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e4      	bne.n	80067c6 <_Balloc+0x2e>
 80067fc:	2000      	movs	r0, #0
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	6802      	ldr	r2, [r0, #0]
 8006802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006806:	2300      	movs	r3, #0
 8006808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800680c:	e7f7      	b.n	80067fe <_Balloc+0x66>
 800680e:	bf00      	nop
 8006810:	08007b7d 	.word	0x08007b7d
 8006814:	08007c0e 	.word	0x08007c0e

08006818 <_Bfree>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	69c6      	ldr	r6, [r0, #28]
 800681c:	4605      	mov	r5, r0
 800681e:	460c      	mov	r4, r1
 8006820:	b976      	cbnz	r6, 8006840 <_Bfree+0x28>
 8006822:	2010      	movs	r0, #16
 8006824:	f7ff fe56 	bl	80064d4 <malloc>
 8006828:	4602      	mov	r2, r0
 800682a:	61e8      	str	r0, [r5, #28]
 800682c:	b920      	cbnz	r0, 8006838 <_Bfree+0x20>
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <_Bfree+0x3c>)
 8006830:	4809      	ldr	r0, [pc, #36]	; (8006858 <_Bfree+0x40>)
 8006832:	218f      	movs	r1, #143	; 0x8f
 8006834:	f000 fc1c 	bl	8007070 <__assert_func>
 8006838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800683c:	6006      	str	r6, [r0, #0]
 800683e:	60c6      	str	r6, [r0, #12]
 8006840:	b13c      	cbz	r4, 8006852 <_Bfree+0x3a>
 8006842:	69eb      	ldr	r3, [r5, #28]
 8006844:	6862      	ldr	r2, [r4, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800684c:	6021      	str	r1, [r4, #0]
 800684e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	08007b7d 	.word	0x08007b7d
 8006858:	08007c0e 	.word	0x08007c0e

0800685c <__multadd>:
 800685c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006860:	690d      	ldr	r5, [r1, #16]
 8006862:	4607      	mov	r7, r0
 8006864:	460c      	mov	r4, r1
 8006866:	461e      	mov	r6, r3
 8006868:	f101 0c14 	add.w	ip, r1, #20
 800686c:	2000      	movs	r0, #0
 800686e:	f8dc 3000 	ldr.w	r3, [ip]
 8006872:	b299      	uxth	r1, r3
 8006874:	fb02 6101 	mla	r1, r2, r1, r6
 8006878:	0c1e      	lsrs	r6, r3, #16
 800687a:	0c0b      	lsrs	r3, r1, #16
 800687c:	fb02 3306 	mla	r3, r2, r6, r3
 8006880:	b289      	uxth	r1, r1
 8006882:	3001      	adds	r0, #1
 8006884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006888:	4285      	cmp	r5, r0
 800688a:	f84c 1b04 	str.w	r1, [ip], #4
 800688e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006892:	dcec      	bgt.n	800686e <__multadd+0x12>
 8006894:	b30e      	cbz	r6, 80068da <__multadd+0x7e>
 8006896:	68a3      	ldr	r3, [r4, #8]
 8006898:	42ab      	cmp	r3, r5
 800689a:	dc19      	bgt.n	80068d0 <__multadd+0x74>
 800689c:	6861      	ldr	r1, [r4, #4]
 800689e:	4638      	mov	r0, r7
 80068a0:	3101      	adds	r1, #1
 80068a2:	f7ff ff79 	bl	8006798 <_Balloc>
 80068a6:	4680      	mov	r8, r0
 80068a8:	b928      	cbnz	r0, 80068b6 <__multadd+0x5a>
 80068aa:	4602      	mov	r2, r0
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <__multadd+0x84>)
 80068ae:	480d      	ldr	r0, [pc, #52]	; (80068e4 <__multadd+0x88>)
 80068b0:	21ba      	movs	r1, #186	; 0xba
 80068b2:	f000 fbdd 	bl	8007070 <__assert_func>
 80068b6:	6922      	ldr	r2, [r4, #16]
 80068b8:	3202      	adds	r2, #2
 80068ba:	f104 010c 	add.w	r1, r4, #12
 80068be:	0092      	lsls	r2, r2, #2
 80068c0:	300c      	adds	r0, #12
 80068c2:	f000 fbc7 	bl	8007054 <memcpy>
 80068c6:	4621      	mov	r1, r4
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7ff ffa5 	bl	8006818 <_Bfree>
 80068ce:	4644      	mov	r4, r8
 80068d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068d4:	3501      	adds	r5, #1
 80068d6:	615e      	str	r6, [r3, #20]
 80068d8:	6125      	str	r5, [r4, #16]
 80068da:	4620      	mov	r0, r4
 80068dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e0:	08007bec 	.word	0x08007bec
 80068e4:	08007c0e 	.word	0x08007c0e

080068e8 <__hi0bits>:
 80068e8:	0c03      	lsrs	r3, r0, #16
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	b9d3      	cbnz	r3, 8006924 <__hi0bits+0x3c>
 80068ee:	0400      	lsls	r0, r0, #16
 80068f0:	2310      	movs	r3, #16
 80068f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068f6:	bf04      	itt	eq
 80068f8:	0200      	lsleq	r0, r0, #8
 80068fa:	3308      	addeq	r3, #8
 80068fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006900:	bf04      	itt	eq
 8006902:	0100      	lsleq	r0, r0, #4
 8006904:	3304      	addeq	r3, #4
 8006906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800690a:	bf04      	itt	eq
 800690c:	0080      	lsleq	r0, r0, #2
 800690e:	3302      	addeq	r3, #2
 8006910:	2800      	cmp	r0, #0
 8006912:	db05      	blt.n	8006920 <__hi0bits+0x38>
 8006914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006918:	f103 0301 	add.w	r3, r3, #1
 800691c:	bf08      	it	eq
 800691e:	2320      	moveq	r3, #32
 8006920:	4618      	mov	r0, r3
 8006922:	4770      	bx	lr
 8006924:	2300      	movs	r3, #0
 8006926:	e7e4      	b.n	80068f2 <__hi0bits+0xa>

08006928 <__lo0bits>:
 8006928:	6803      	ldr	r3, [r0, #0]
 800692a:	f013 0207 	ands.w	r2, r3, #7
 800692e:	d00c      	beq.n	800694a <__lo0bits+0x22>
 8006930:	07d9      	lsls	r1, r3, #31
 8006932:	d422      	bmi.n	800697a <__lo0bits+0x52>
 8006934:	079a      	lsls	r2, r3, #30
 8006936:	bf49      	itett	mi
 8006938:	085b      	lsrmi	r3, r3, #1
 800693a:	089b      	lsrpl	r3, r3, #2
 800693c:	6003      	strmi	r3, [r0, #0]
 800693e:	2201      	movmi	r2, #1
 8006940:	bf5c      	itt	pl
 8006942:	6003      	strpl	r3, [r0, #0]
 8006944:	2202      	movpl	r2, #2
 8006946:	4610      	mov	r0, r2
 8006948:	4770      	bx	lr
 800694a:	b299      	uxth	r1, r3
 800694c:	b909      	cbnz	r1, 8006952 <__lo0bits+0x2a>
 800694e:	0c1b      	lsrs	r3, r3, #16
 8006950:	2210      	movs	r2, #16
 8006952:	b2d9      	uxtb	r1, r3
 8006954:	b909      	cbnz	r1, 800695a <__lo0bits+0x32>
 8006956:	3208      	adds	r2, #8
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	0719      	lsls	r1, r3, #28
 800695c:	bf04      	itt	eq
 800695e:	091b      	lsreq	r3, r3, #4
 8006960:	3204      	addeq	r2, #4
 8006962:	0799      	lsls	r1, r3, #30
 8006964:	bf04      	itt	eq
 8006966:	089b      	lsreq	r3, r3, #2
 8006968:	3202      	addeq	r2, #2
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	d403      	bmi.n	8006976 <__lo0bits+0x4e>
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	f102 0201 	add.w	r2, r2, #1
 8006974:	d003      	beq.n	800697e <__lo0bits+0x56>
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	e7e5      	b.n	8006946 <__lo0bits+0x1e>
 800697a:	2200      	movs	r2, #0
 800697c:	e7e3      	b.n	8006946 <__lo0bits+0x1e>
 800697e:	2220      	movs	r2, #32
 8006980:	e7e1      	b.n	8006946 <__lo0bits+0x1e>
	...

08006984 <__i2b>:
 8006984:	b510      	push	{r4, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	2101      	movs	r1, #1
 800698a:	f7ff ff05 	bl	8006798 <_Balloc>
 800698e:	4602      	mov	r2, r0
 8006990:	b928      	cbnz	r0, 800699e <__i2b+0x1a>
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <__i2b+0x24>)
 8006994:	4805      	ldr	r0, [pc, #20]	; (80069ac <__i2b+0x28>)
 8006996:	f240 1145 	movw	r1, #325	; 0x145
 800699a:	f000 fb69 	bl	8007070 <__assert_func>
 800699e:	2301      	movs	r3, #1
 80069a0:	6144      	str	r4, [r0, #20]
 80069a2:	6103      	str	r3, [r0, #16]
 80069a4:	bd10      	pop	{r4, pc}
 80069a6:	bf00      	nop
 80069a8:	08007bec 	.word	0x08007bec
 80069ac:	08007c0e 	.word	0x08007c0e

080069b0 <__multiply>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	4691      	mov	r9, r2
 80069b6:	690a      	ldr	r2, [r1, #16]
 80069b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069bc:	429a      	cmp	r2, r3
 80069be:	bfb8      	it	lt
 80069c0:	460b      	movlt	r3, r1
 80069c2:	460c      	mov	r4, r1
 80069c4:	bfbc      	itt	lt
 80069c6:	464c      	movlt	r4, r9
 80069c8:	4699      	movlt	r9, r3
 80069ca:	6927      	ldr	r7, [r4, #16]
 80069cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069d0:	68a3      	ldr	r3, [r4, #8]
 80069d2:	6861      	ldr	r1, [r4, #4]
 80069d4:	eb07 060a 	add.w	r6, r7, sl
 80069d8:	42b3      	cmp	r3, r6
 80069da:	b085      	sub	sp, #20
 80069dc:	bfb8      	it	lt
 80069de:	3101      	addlt	r1, #1
 80069e0:	f7ff feda 	bl	8006798 <_Balloc>
 80069e4:	b930      	cbnz	r0, 80069f4 <__multiply+0x44>
 80069e6:	4602      	mov	r2, r0
 80069e8:	4b44      	ldr	r3, [pc, #272]	; (8006afc <__multiply+0x14c>)
 80069ea:	4845      	ldr	r0, [pc, #276]	; (8006b00 <__multiply+0x150>)
 80069ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80069f0:	f000 fb3e 	bl	8007070 <__assert_func>
 80069f4:	f100 0514 	add.w	r5, r0, #20
 80069f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069fc:	462b      	mov	r3, r5
 80069fe:	2200      	movs	r2, #0
 8006a00:	4543      	cmp	r3, r8
 8006a02:	d321      	bcc.n	8006a48 <__multiply+0x98>
 8006a04:	f104 0314 	add.w	r3, r4, #20
 8006a08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a0c:	f109 0314 	add.w	r3, r9, #20
 8006a10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a14:	9202      	str	r2, [sp, #8]
 8006a16:	1b3a      	subs	r2, r7, r4
 8006a18:	3a15      	subs	r2, #21
 8006a1a:	f022 0203 	bic.w	r2, r2, #3
 8006a1e:	3204      	adds	r2, #4
 8006a20:	f104 0115 	add.w	r1, r4, #21
 8006a24:	428f      	cmp	r7, r1
 8006a26:	bf38      	it	cc
 8006a28:	2204      	movcc	r2, #4
 8006a2a:	9201      	str	r2, [sp, #4]
 8006a2c:	9a02      	ldr	r2, [sp, #8]
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d80c      	bhi.n	8006a4e <__multiply+0x9e>
 8006a34:	2e00      	cmp	r6, #0
 8006a36:	dd03      	ble.n	8006a40 <__multiply+0x90>
 8006a38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05b      	beq.n	8006af8 <__multiply+0x148>
 8006a40:	6106      	str	r6, [r0, #16]
 8006a42:	b005      	add	sp, #20
 8006a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a48:	f843 2b04 	str.w	r2, [r3], #4
 8006a4c:	e7d8      	b.n	8006a00 <__multiply+0x50>
 8006a4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a52:	f1ba 0f00 	cmp.w	sl, #0
 8006a56:	d024      	beq.n	8006aa2 <__multiply+0xf2>
 8006a58:	f104 0e14 	add.w	lr, r4, #20
 8006a5c:	46a9      	mov	r9, r5
 8006a5e:	f04f 0c00 	mov.w	ip, #0
 8006a62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a66:	f8d9 1000 	ldr.w	r1, [r9]
 8006a6a:	fa1f fb82 	uxth.w	fp, r2
 8006a6e:	b289      	uxth	r1, r1
 8006a70:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a78:	f8d9 2000 	ldr.w	r2, [r9]
 8006a7c:	4461      	add	r1, ip
 8006a7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a82:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a8a:	b289      	uxth	r1, r1
 8006a8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a90:	4577      	cmp	r7, lr
 8006a92:	f849 1b04 	str.w	r1, [r9], #4
 8006a96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a9a:	d8e2      	bhi.n	8006a62 <__multiply+0xb2>
 8006a9c:	9a01      	ldr	r2, [sp, #4]
 8006a9e:	f845 c002 	str.w	ip, [r5, r2]
 8006aa2:	9a03      	ldr	r2, [sp, #12]
 8006aa4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	f1b9 0f00 	cmp.w	r9, #0
 8006aae:	d021      	beq.n	8006af4 <__multiply+0x144>
 8006ab0:	6829      	ldr	r1, [r5, #0]
 8006ab2:	f104 0c14 	add.w	ip, r4, #20
 8006ab6:	46ae      	mov	lr, r5
 8006ab8:	f04f 0a00 	mov.w	sl, #0
 8006abc:	f8bc b000 	ldrh.w	fp, [ip]
 8006ac0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ac4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ac8:	4452      	add	r2, sl
 8006aca:	b289      	uxth	r1, r1
 8006acc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ad0:	f84e 1b04 	str.w	r1, [lr], #4
 8006ad4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ad8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006adc:	f8be 1000 	ldrh.w	r1, [lr]
 8006ae0:	fb09 110a 	mla	r1, r9, sl, r1
 8006ae4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ae8:	4567      	cmp	r7, ip
 8006aea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006aee:	d8e5      	bhi.n	8006abc <__multiply+0x10c>
 8006af0:	9a01      	ldr	r2, [sp, #4]
 8006af2:	50a9      	str	r1, [r5, r2]
 8006af4:	3504      	adds	r5, #4
 8006af6:	e799      	b.n	8006a2c <__multiply+0x7c>
 8006af8:	3e01      	subs	r6, #1
 8006afa:	e79b      	b.n	8006a34 <__multiply+0x84>
 8006afc:	08007bec 	.word	0x08007bec
 8006b00:	08007c0e 	.word	0x08007c0e

08006b04 <__pow5mult>:
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b08:	4615      	mov	r5, r2
 8006b0a:	f012 0203 	ands.w	r2, r2, #3
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460f      	mov	r7, r1
 8006b12:	d007      	beq.n	8006b24 <__pow5mult+0x20>
 8006b14:	4c25      	ldr	r4, [pc, #148]	; (8006bac <__pow5mult+0xa8>)
 8006b16:	3a01      	subs	r2, #1
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b1e:	f7ff fe9d 	bl	800685c <__multadd>
 8006b22:	4607      	mov	r7, r0
 8006b24:	10ad      	asrs	r5, r5, #2
 8006b26:	d03d      	beq.n	8006ba4 <__pow5mult+0xa0>
 8006b28:	69f4      	ldr	r4, [r6, #28]
 8006b2a:	b97c      	cbnz	r4, 8006b4c <__pow5mult+0x48>
 8006b2c:	2010      	movs	r0, #16
 8006b2e:	f7ff fcd1 	bl	80064d4 <malloc>
 8006b32:	4602      	mov	r2, r0
 8006b34:	61f0      	str	r0, [r6, #28]
 8006b36:	b928      	cbnz	r0, 8006b44 <__pow5mult+0x40>
 8006b38:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <__pow5mult+0xac>)
 8006b3a:	481e      	ldr	r0, [pc, #120]	; (8006bb4 <__pow5mult+0xb0>)
 8006b3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b40:	f000 fa96 	bl	8007070 <__assert_func>
 8006b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b48:	6004      	str	r4, [r0, #0]
 8006b4a:	60c4      	str	r4, [r0, #12]
 8006b4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b54:	b94c      	cbnz	r4, 8006b6a <__pow5mult+0x66>
 8006b56:	f240 2171 	movw	r1, #625	; 0x271
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7ff ff12 	bl	8006984 <__i2b>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b66:	4604      	mov	r4, r0
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	f04f 0900 	mov.w	r9, #0
 8006b6e:	07eb      	lsls	r3, r5, #31
 8006b70:	d50a      	bpl.n	8006b88 <__pow5mult+0x84>
 8006b72:	4639      	mov	r1, r7
 8006b74:	4622      	mov	r2, r4
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ff1a 	bl	80069b0 <__multiply>
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4680      	mov	r8, r0
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff fe49 	bl	8006818 <_Bfree>
 8006b86:	4647      	mov	r7, r8
 8006b88:	106d      	asrs	r5, r5, #1
 8006b8a:	d00b      	beq.n	8006ba4 <__pow5mult+0xa0>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	b938      	cbnz	r0, 8006ba0 <__pow5mult+0x9c>
 8006b90:	4622      	mov	r2, r4
 8006b92:	4621      	mov	r1, r4
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff ff0b 	bl	80069b0 <__multiply>
 8006b9a:	6020      	str	r0, [r4, #0]
 8006b9c:	f8c0 9000 	str.w	r9, [r0]
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e7e4      	b.n	8006b6e <__pow5mult+0x6a>
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006baa:	bf00      	nop
 8006bac:	08007d58 	.word	0x08007d58
 8006bb0:	08007b7d 	.word	0x08007b7d
 8006bb4:	08007c0e 	.word	0x08007c0e

08006bb8 <__lshift>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	6849      	ldr	r1, [r1, #4]
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	4607      	mov	r7, r0
 8006bca:	4691      	mov	r9, r2
 8006bcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bd0:	f108 0601 	add.w	r6, r8, #1
 8006bd4:	42b3      	cmp	r3, r6
 8006bd6:	db0b      	blt.n	8006bf0 <__lshift+0x38>
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff fddd 	bl	8006798 <_Balloc>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b948      	cbnz	r0, 8006bf6 <__lshift+0x3e>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b28      	ldr	r3, [pc, #160]	; (8006c88 <__lshift+0xd0>)
 8006be6:	4829      	ldr	r0, [pc, #164]	; (8006c8c <__lshift+0xd4>)
 8006be8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006bec:	f000 fa40 	bl	8007070 <__assert_func>
 8006bf0:	3101      	adds	r1, #1
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	e7ee      	b.n	8006bd4 <__lshift+0x1c>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f100 0114 	add.w	r1, r0, #20
 8006bfc:	f100 0210 	add.w	r2, r0, #16
 8006c00:	4618      	mov	r0, r3
 8006c02:	4553      	cmp	r3, sl
 8006c04:	db33      	blt.n	8006c6e <__lshift+0xb6>
 8006c06:	6920      	ldr	r0, [r4, #16]
 8006c08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c0c:	f104 0314 	add.w	r3, r4, #20
 8006c10:	f019 091f 	ands.w	r9, r9, #31
 8006c14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c1c:	d02b      	beq.n	8006c76 <__lshift+0xbe>
 8006c1e:	f1c9 0e20 	rsb	lr, r9, #32
 8006c22:	468a      	mov	sl, r1
 8006c24:	2200      	movs	r2, #0
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	fa00 f009 	lsl.w	r0, r0, r9
 8006c2c:	4310      	orrs	r0, r2
 8006c2e:	f84a 0b04 	str.w	r0, [sl], #4
 8006c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c36:	459c      	cmp	ip, r3
 8006c38:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c3c:	d8f3      	bhi.n	8006c26 <__lshift+0x6e>
 8006c3e:	ebac 0304 	sub.w	r3, ip, r4
 8006c42:	3b15      	subs	r3, #21
 8006c44:	f023 0303 	bic.w	r3, r3, #3
 8006c48:	3304      	adds	r3, #4
 8006c4a:	f104 0015 	add.w	r0, r4, #21
 8006c4e:	4584      	cmp	ip, r0
 8006c50:	bf38      	it	cc
 8006c52:	2304      	movcc	r3, #4
 8006c54:	50ca      	str	r2, [r1, r3]
 8006c56:	b10a      	cbz	r2, 8006c5c <__lshift+0xa4>
 8006c58:	f108 0602 	add.w	r6, r8, #2
 8006c5c:	3e01      	subs	r6, #1
 8006c5e:	4638      	mov	r0, r7
 8006c60:	612e      	str	r6, [r5, #16]
 8006c62:	4621      	mov	r1, r4
 8006c64:	f7ff fdd8 	bl	8006818 <_Bfree>
 8006c68:	4628      	mov	r0, r5
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c72:	3301      	adds	r3, #1
 8006c74:	e7c5      	b.n	8006c02 <__lshift+0x4a>
 8006c76:	3904      	subs	r1, #4
 8006c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c80:	459c      	cmp	ip, r3
 8006c82:	d8f9      	bhi.n	8006c78 <__lshift+0xc0>
 8006c84:	e7ea      	b.n	8006c5c <__lshift+0xa4>
 8006c86:	bf00      	nop
 8006c88:	08007bec 	.word	0x08007bec
 8006c8c:	08007c0e 	.word	0x08007c0e

08006c90 <__mcmp>:
 8006c90:	b530      	push	{r4, r5, lr}
 8006c92:	6902      	ldr	r2, [r0, #16]
 8006c94:	690c      	ldr	r4, [r1, #16]
 8006c96:	1b12      	subs	r2, r2, r4
 8006c98:	d10e      	bne.n	8006cb8 <__mcmp+0x28>
 8006c9a:	f100 0314 	add.w	r3, r0, #20
 8006c9e:	3114      	adds	r1, #20
 8006ca0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ca4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ca8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006cac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006cb0:	42a5      	cmp	r5, r4
 8006cb2:	d003      	beq.n	8006cbc <__mcmp+0x2c>
 8006cb4:	d305      	bcc.n	8006cc2 <__mcmp+0x32>
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4610      	mov	r0, r2
 8006cba:	bd30      	pop	{r4, r5, pc}
 8006cbc:	4283      	cmp	r3, r0
 8006cbe:	d3f3      	bcc.n	8006ca8 <__mcmp+0x18>
 8006cc0:	e7fa      	b.n	8006cb8 <__mcmp+0x28>
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cc6:	e7f7      	b.n	8006cb8 <__mcmp+0x28>

08006cc8 <__mdiff>:
 8006cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	460c      	mov	r4, r1
 8006cce:	4606      	mov	r6, r0
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4690      	mov	r8, r2
 8006cd6:	f7ff ffdb 	bl	8006c90 <__mcmp>
 8006cda:	1e05      	subs	r5, r0, #0
 8006cdc:	d110      	bne.n	8006d00 <__mdiff+0x38>
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7ff fd59 	bl	8006798 <_Balloc>
 8006ce6:	b930      	cbnz	r0, 8006cf6 <__mdiff+0x2e>
 8006ce8:	4b3a      	ldr	r3, [pc, #232]	; (8006dd4 <__mdiff+0x10c>)
 8006cea:	4602      	mov	r2, r0
 8006cec:	f240 2137 	movw	r1, #567	; 0x237
 8006cf0:	4839      	ldr	r0, [pc, #228]	; (8006dd8 <__mdiff+0x110>)
 8006cf2:	f000 f9bd 	bl	8007070 <__assert_func>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	bfa4      	itt	ge
 8006d02:	4643      	movge	r3, r8
 8006d04:	46a0      	movge	r8, r4
 8006d06:	4630      	mov	r0, r6
 8006d08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d0c:	bfa6      	itte	ge
 8006d0e:	461c      	movge	r4, r3
 8006d10:	2500      	movge	r5, #0
 8006d12:	2501      	movlt	r5, #1
 8006d14:	f7ff fd40 	bl	8006798 <_Balloc>
 8006d18:	b920      	cbnz	r0, 8006d24 <__mdiff+0x5c>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <__mdiff+0x10c>)
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	f240 2145 	movw	r1, #581	; 0x245
 8006d22:	e7e5      	b.n	8006cf0 <__mdiff+0x28>
 8006d24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d28:	6926      	ldr	r6, [r4, #16]
 8006d2a:	60c5      	str	r5, [r0, #12]
 8006d2c:	f104 0914 	add.w	r9, r4, #20
 8006d30:	f108 0514 	add.w	r5, r8, #20
 8006d34:	f100 0e14 	add.w	lr, r0, #20
 8006d38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d40:	f108 0210 	add.w	r2, r8, #16
 8006d44:	46f2      	mov	sl, lr
 8006d46:	2100      	movs	r1, #0
 8006d48:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d50:	fa11 f88b 	uxtah	r8, r1, fp
 8006d54:	b299      	uxth	r1, r3
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	eba8 0801 	sub.w	r8, r8, r1
 8006d5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d64:	fa1f f888 	uxth.w	r8, r8
 8006d68:	1419      	asrs	r1, r3, #16
 8006d6a:	454e      	cmp	r6, r9
 8006d6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d70:	f84a 3b04 	str.w	r3, [sl], #4
 8006d74:	d8e8      	bhi.n	8006d48 <__mdiff+0x80>
 8006d76:	1b33      	subs	r3, r6, r4
 8006d78:	3b15      	subs	r3, #21
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	3304      	adds	r3, #4
 8006d80:	3415      	adds	r4, #21
 8006d82:	42a6      	cmp	r6, r4
 8006d84:	bf38      	it	cc
 8006d86:	2304      	movcc	r3, #4
 8006d88:	441d      	add	r5, r3
 8006d8a:	4473      	add	r3, lr
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	462e      	mov	r6, r5
 8006d90:	4566      	cmp	r6, ip
 8006d92:	d30e      	bcc.n	8006db2 <__mdiff+0xea>
 8006d94:	f10c 0203 	add.w	r2, ip, #3
 8006d98:	1b52      	subs	r2, r2, r5
 8006d9a:	f022 0203 	bic.w	r2, r2, #3
 8006d9e:	3d03      	subs	r5, #3
 8006da0:	45ac      	cmp	ip, r5
 8006da2:	bf38      	it	cc
 8006da4:	2200      	movcc	r2, #0
 8006da6:	4413      	add	r3, r2
 8006da8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006dac:	b17a      	cbz	r2, 8006dce <__mdiff+0x106>
 8006dae:	6107      	str	r7, [r0, #16]
 8006db0:	e7a4      	b.n	8006cfc <__mdiff+0x34>
 8006db2:	f856 8b04 	ldr.w	r8, [r6], #4
 8006db6:	fa11 f288 	uxtah	r2, r1, r8
 8006dba:	1414      	asrs	r4, r2, #16
 8006dbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006dc0:	b292      	uxth	r2, r2
 8006dc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006dc6:	f84e 2b04 	str.w	r2, [lr], #4
 8006dca:	1421      	asrs	r1, r4, #16
 8006dcc:	e7e0      	b.n	8006d90 <__mdiff+0xc8>
 8006dce:	3f01      	subs	r7, #1
 8006dd0:	e7ea      	b.n	8006da8 <__mdiff+0xe0>
 8006dd2:	bf00      	nop
 8006dd4:	08007bec 	.word	0x08007bec
 8006dd8:	08007c0e 	.word	0x08007c0e

08006ddc <__d2b>:
 8006ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	460f      	mov	r7, r1
 8006de2:	2101      	movs	r1, #1
 8006de4:	ec59 8b10 	vmov	r8, r9, d0
 8006de8:	4616      	mov	r6, r2
 8006dea:	f7ff fcd5 	bl	8006798 <_Balloc>
 8006dee:	4604      	mov	r4, r0
 8006df0:	b930      	cbnz	r0, 8006e00 <__d2b+0x24>
 8006df2:	4602      	mov	r2, r0
 8006df4:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <__d2b+0xac>)
 8006df6:	4825      	ldr	r0, [pc, #148]	; (8006e8c <__d2b+0xb0>)
 8006df8:	f240 310f 	movw	r1, #783	; 0x30f
 8006dfc:	f000 f938 	bl	8007070 <__assert_func>
 8006e00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e08:	bb2d      	cbnz	r5, 8006e56 <__d2b+0x7a>
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	f1b8 0300 	subs.w	r3, r8, #0
 8006e10:	d026      	beq.n	8006e60 <__d2b+0x84>
 8006e12:	4668      	mov	r0, sp
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	f7ff fd87 	bl	8006928 <__lo0bits>
 8006e1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e1e:	b1e8      	cbz	r0, 8006e5c <__d2b+0x80>
 8006e20:	f1c0 0320 	rsb	r3, r0, #32
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	40c2      	lsrs	r2, r0
 8006e2c:	6163      	str	r3, [r4, #20]
 8006e2e:	9201      	str	r2, [sp, #4]
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	61a3      	str	r3, [r4, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf14      	ite	ne
 8006e38:	2202      	movne	r2, #2
 8006e3a:	2201      	moveq	r2, #1
 8006e3c:	6122      	str	r2, [r4, #16]
 8006e3e:	b1bd      	cbz	r5, 8006e70 <__d2b+0x94>
 8006e40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e44:	4405      	add	r5, r0
 8006e46:	603d      	str	r5, [r7, #0]
 8006e48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e4c:	6030      	str	r0, [r6, #0]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	b003      	add	sp, #12
 8006e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e5a:	e7d6      	b.n	8006e0a <__d2b+0x2e>
 8006e5c:	6161      	str	r1, [r4, #20]
 8006e5e:	e7e7      	b.n	8006e30 <__d2b+0x54>
 8006e60:	a801      	add	r0, sp, #4
 8006e62:	f7ff fd61 	bl	8006928 <__lo0bits>
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	6163      	str	r3, [r4, #20]
 8006e6a:	3020      	adds	r0, #32
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	e7e5      	b.n	8006e3c <__d2b+0x60>
 8006e70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e78:	6038      	str	r0, [r7, #0]
 8006e7a:	6918      	ldr	r0, [r3, #16]
 8006e7c:	f7ff fd34 	bl	80068e8 <__hi0bits>
 8006e80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e84:	e7e2      	b.n	8006e4c <__d2b+0x70>
 8006e86:	bf00      	nop
 8006e88:	08007bec 	.word	0x08007bec
 8006e8c:	08007c0e 	.word	0x08007c0e

08006e90 <__sread>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	460c      	mov	r4, r1
 8006e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e98:	f000 f8a8 	bl	8006fec <_read_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	bfab      	itete	ge
 8006ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ea4:	181b      	addge	r3, r3, r0
 8006ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eaa:	bfac      	ite	ge
 8006eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eae:	81a3      	strhlt	r3, [r4, #12]
 8006eb0:	bd10      	pop	{r4, pc}

08006eb2 <__swrite>:
 8006eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	898b      	ldrh	r3, [r1, #12]
 8006eba:	05db      	lsls	r3, r3, #23
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	4616      	mov	r6, r2
 8006ec2:	d505      	bpl.n	8006ed0 <__swrite+0x1e>
 8006ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec8:	2302      	movs	r3, #2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f000 f87c 	bl	8006fc8 <_lseek_r>
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eda:	81a3      	strh	r3, [r4, #12]
 8006edc:	4632      	mov	r2, r6
 8006ede:	463b      	mov	r3, r7
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee6:	f000 b8a3 	b.w	8007030 <_write_r>

08006eea <__sseek>:
 8006eea:	b510      	push	{r4, lr}
 8006eec:	460c      	mov	r4, r1
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 f869 	bl	8006fc8 <_lseek_r>
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	bf15      	itete	ne
 8006efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f06:	81a3      	strheq	r3, [r4, #12]
 8006f08:	bf18      	it	ne
 8006f0a:	81a3      	strhne	r3, [r4, #12]
 8006f0c:	bd10      	pop	{r4, pc}

08006f0e <__sclose>:
 8006f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f12:	f000 b849 	b.w	8006fa8 <_close_r>

08006f16 <_realloc_r>:
 8006f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	460e      	mov	r6, r1
 8006f20:	b921      	cbnz	r1, 8006f2c <_realloc_r+0x16>
 8006f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f26:	4611      	mov	r1, r2
 8006f28:	f7ff bafc 	b.w	8006524 <_malloc_r>
 8006f2c:	b92a      	cbnz	r2, 8006f3a <_realloc_r+0x24>
 8006f2e:	f000 f8d3 	bl	80070d8 <_free_r>
 8006f32:	4625      	mov	r5, r4
 8006f34:	4628      	mov	r0, r5
 8006f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f3a:	f000 f92b 	bl	8007194 <_malloc_usable_size_r>
 8006f3e:	4284      	cmp	r4, r0
 8006f40:	4607      	mov	r7, r0
 8006f42:	d802      	bhi.n	8006f4a <_realloc_r+0x34>
 8006f44:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f48:	d812      	bhi.n	8006f70 <_realloc_r+0x5a>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	f7ff fae9 	bl	8006524 <_malloc_r>
 8006f52:	4605      	mov	r5, r0
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d0ed      	beq.n	8006f34 <_realloc_r+0x1e>
 8006f58:	42bc      	cmp	r4, r7
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	bf28      	it	cs
 8006f60:	463a      	movcs	r2, r7
 8006f62:	f000 f877 	bl	8007054 <memcpy>
 8006f66:	4631      	mov	r1, r6
 8006f68:	4640      	mov	r0, r8
 8006f6a:	f000 f8b5 	bl	80070d8 <_free_r>
 8006f6e:	e7e1      	b.n	8006f34 <_realloc_r+0x1e>
 8006f70:	4635      	mov	r5, r6
 8006f72:	e7df      	b.n	8006f34 <_realloc_r+0x1e>

08006f74 <memmove>:
 8006f74:	4288      	cmp	r0, r1
 8006f76:	b510      	push	{r4, lr}
 8006f78:	eb01 0402 	add.w	r4, r1, r2
 8006f7c:	d902      	bls.n	8006f84 <memmove+0x10>
 8006f7e:	4284      	cmp	r4, r0
 8006f80:	4623      	mov	r3, r4
 8006f82:	d807      	bhi.n	8006f94 <memmove+0x20>
 8006f84:	1e43      	subs	r3, r0, #1
 8006f86:	42a1      	cmp	r1, r4
 8006f88:	d008      	beq.n	8006f9c <memmove+0x28>
 8006f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f92:	e7f8      	b.n	8006f86 <memmove+0x12>
 8006f94:	4402      	add	r2, r0
 8006f96:	4601      	mov	r1, r0
 8006f98:	428a      	cmp	r2, r1
 8006f9a:	d100      	bne.n	8006f9e <memmove+0x2a>
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fa6:	e7f7      	b.n	8006f98 <memmove+0x24>

08006fa8 <_close_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_close_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7fb f8f8 	bl	80021a8 <_close>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_close_r+0x1a>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_close_r+0x1a>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20001514 	.word	0x20001514

08006fc8 <_lseek_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	; (8006fe8 <_lseek_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7fb f90d 	bl	80021f6 <_lseek>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_lseek_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_lseek_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20001514 	.word	0x20001514

08006fec <_read_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	; (800700c <_read_r+0x20>)
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	602a      	str	r2, [r5, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f7fb f89b 	bl	8002136 <_read>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d102      	bne.n	800700a <_read_r+0x1e>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	b103      	cbz	r3, 800700a <_read_r+0x1e>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	20001514 	.word	0x20001514

08007010 <_sbrk_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d06      	ldr	r5, [pc, #24]	; (800702c <_sbrk_r+0x1c>)
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fb f8f8 	bl	8002210 <_sbrk>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_sbrk_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_sbrk_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20001514 	.word	0x20001514

08007030 <_write_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d07      	ldr	r5, [pc, #28]	; (8007050 <_write_r+0x20>)
 8007034:	4604      	mov	r4, r0
 8007036:	4608      	mov	r0, r1
 8007038:	4611      	mov	r1, r2
 800703a:	2200      	movs	r2, #0
 800703c:	602a      	str	r2, [r5, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f7fb f896 	bl	8002170 <_write>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_write_r+0x1e>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_write_r+0x1e>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	20001514 	.word	0x20001514

08007054 <memcpy>:
 8007054:	440a      	add	r2, r1
 8007056:	4291      	cmp	r1, r2
 8007058:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800705c:	d100      	bne.n	8007060 <memcpy+0xc>
 800705e:	4770      	bx	lr
 8007060:	b510      	push	{r4, lr}
 8007062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800706a:	4291      	cmp	r1, r2
 800706c:	d1f9      	bne.n	8007062 <memcpy+0xe>
 800706e:	bd10      	pop	{r4, pc}

08007070 <__assert_func>:
 8007070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007072:	4614      	mov	r4, r2
 8007074:	461a      	mov	r2, r3
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <__assert_func+0x2c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4605      	mov	r5, r0
 800707c:	68d8      	ldr	r0, [r3, #12]
 800707e:	b14c      	cbz	r4, 8007094 <__assert_func+0x24>
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <__assert_func+0x30>)
 8007082:	9100      	str	r1, [sp, #0]
 8007084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007088:	4906      	ldr	r1, [pc, #24]	; (80070a4 <__assert_func+0x34>)
 800708a:	462b      	mov	r3, r5
 800708c:	f000 f88a 	bl	80071a4 <fiprintf>
 8007090:	f000 f8a7 	bl	80071e2 <abort>
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <__assert_func+0x38>)
 8007096:	461c      	mov	r4, r3
 8007098:	e7f3      	b.n	8007082 <__assert_func+0x12>
 800709a:	bf00      	nop
 800709c:	200000b8 	.word	0x200000b8
 80070a0:	08007e6f 	.word	0x08007e6f
 80070a4:	08007e7c 	.word	0x08007e7c
 80070a8:	08007eaa 	.word	0x08007eaa

080070ac <_calloc_r>:
 80070ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ae:	fba1 2402 	umull	r2, r4, r1, r2
 80070b2:	b94c      	cbnz	r4, 80070c8 <_calloc_r+0x1c>
 80070b4:	4611      	mov	r1, r2
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	f7ff fa34 	bl	8006524 <_malloc_r>
 80070bc:	9a01      	ldr	r2, [sp, #4]
 80070be:	4605      	mov	r5, r0
 80070c0:	b930      	cbnz	r0, 80070d0 <_calloc_r+0x24>
 80070c2:	4628      	mov	r0, r5
 80070c4:	b003      	add	sp, #12
 80070c6:	bd30      	pop	{r4, r5, pc}
 80070c8:	220c      	movs	r2, #12
 80070ca:	6002      	str	r2, [r0, #0]
 80070cc:	2500      	movs	r5, #0
 80070ce:	e7f8      	b.n	80070c2 <_calloc_r+0x16>
 80070d0:	4621      	mov	r1, r4
 80070d2:	f7fe f9f3 	bl	80054bc <memset>
 80070d6:	e7f4      	b.n	80070c2 <_calloc_r+0x16>

080070d8 <_free_r>:
 80070d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070da:	2900      	cmp	r1, #0
 80070dc:	d044      	beq.n	8007168 <_free_r+0x90>
 80070de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e2:	9001      	str	r0, [sp, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f1a1 0404 	sub.w	r4, r1, #4
 80070ea:	bfb8      	it	lt
 80070ec:	18e4      	addlt	r4, r4, r3
 80070ee:	f7ff fb47 	bl	8006780 <__malloc_lock>
 80070f2:	4a1e      	ldr	r2, [pc, #120]	; (800716c <_free_r+0x94>)
 80070f4:	9801      	ldr	r0, [sp, #4]
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	b933      	cbnz	r3, 8007108 <_free_r+0x30>
 80070fa:	6063      	str	r3, [r4, #4]
 80070fc:	6014      	str	r4, [r2, #0]
 80070fe:	b003      	add	sp, #12
 8007100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007104:	f7ff bb42 	b.w	800678c <__malloc_unlock>
 8007108:	42a3      	cmp	r3, r4
 800710a:	d908      	bls.n	800711e <_free_r+0x46>
 800710c:	6825      	ldr	r5, [r4, #0]
 800710e:	1961      	adds	r1, r4, r5
 8007110:	428b      	cmp	r3, r1
 8007112:	bf01      	itttt	eq
 8007114:	6819      	ldreq	r1, [r3, #0]
 8007116:	685b      	ldreq	r3, [r3, #4]
 8007118:	1949      	addeq	r1, r1, r5
 800711a:	6021      	streq	r1, [r4, #0]
 800711c:	e7ed      	b.n	80070fa <_free_r+0x22>
 800711e:	461a      	mov	r2, r3
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	b10b      	cbz	r3, 8007128 <_free_r+0x50>
 8007124:	42a3      	cmp	r3, r4
 8007126:	d9fa      	bls.n	800711e <_free_r+0x46>
 8007128:	6811      	ldr	r1, [r2, #0]
 800712a:	1855      	adds	r5, r2, r1
 800712c:	42a5      	cmp	r5, r4
 800712e:	d10b      	bne.n	8007148 <_free_r+0x70>
 8007130:	6824      	ldr	r4, [r4, #0]
 8007132:	4421      	add	r1, r4
 8007134:	1854      	adds	r4, r2, r1
 8007136:	42a3      	cmp	r3, r4
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	d1e0      	bne.n	80070fe <_free_r+0x26>
 800713c:	681c      	ldr	r4, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	6053      	str	r3, [r2, #4]
 8007142:	440c      	add	r4, r1
 8007144:	6014      	str	r4, [r2, #0]
 8007146:	e7da      	b.n	80070fe <_free_r+0x26>
 8007148:	d902      	bls.n	8007150 <_free_r+0x78>
 800714a:	230c      	movs	r3, #12
 800714c:	6003      	str	r3, [r0, #0]
 800714e:	e7d6      	b.n	80070fe <_free_r+0x26>
 8007150:	6825      	ldr	r5, [r4, #0]
 8007152:	1961      	adds	r1, r4, r5
 8007154:	428b      	cmp	r3, r1
 8007156:	bf04      	itt	eq
 8007158:	6819      	ldreq	r1, [r3, #0]
 800715a:	685b      	ldreq	r3, [r3, #4]
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	bf04      	itt	eq
 8007160:	1949      	addeq	r1, r1, r5
 8007162:	6021      	streq	r1, [r4, #0]
 8007164:	6054      	str	r4, [r2, #4]
 8007166:	e7ca      	b.n	80070fe <_free_r+0x26>
 8007168:	b003      	add	sp, #12
 800716a:	bd30      	pop	{r4, r5, pc}
 800716c:	2000150c 	.word	0x2000150c

08007170 <__ascii_mbtowc>:
 8007170:	b082      	sub	sp, #8
 8007172:	b901      	cbnz	r1, 8007176 <__ascii_mbtowc+0x6>
 8007174:	a901      	add	r1, sp, #4
 8007176:	b142      	cbz	r2, 800718a <__ascii_mbtowc+0x1a>
 8007178:	b14b      	cbz	r3, 800718e <__ascii_mbtowc+0x1e>
 800717a:	7813      	ldrb	r3, [r2, #0]
 800717c:	600b      	str	r3, [r1, #0]
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	1e10      	subs	r0, r2, #0
 8007182:	bf18      	it	ne
 8007184:	2001      	movne	r0, #1
 8007186:	b002      	add	sp, #8
 8007188:	4770      	bx	lr
 800718a:	4610      	mov	r0, r2
 800718c:	e7fb      	b.n	8007186 <__ascii_mbtowc+0x16>
 800718e:	f06f 0001 	mvn.w	r0, #1
 8007192:	e7f8      	b.n	8007186 <__ascii_mbtowc+0x16>

08007194 <_malloc_usable_size_r>:
 8007194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007198:	1f18      	subs	r0, r3, #4
 800719a:	2b00      	cmp	r3, #0
 800719c:	bfbc      	itt	lt
 800719e:	580b      	ldrlt	r3, [r1, r0]
 80071a0:	18c0      	addlt	r0, r0, r3
 80071a2:	4770      	bx	lr

080071a4 <fiprintf>:
 80071a4:	b40e      	push	{r1, r2, r3}
 80071a6:	b503      	push	{r0, r1, lr}
 80071a8:	4601      	mov	r1, r0
 80071aa:	ab03      	add	r3, sp, #12
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <fiprintf+0x20>)
 80071ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b2:	6800      	ldr	r0, [r0, #0]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	f000 f845 	bl	8007244 <_vfiprintf_r>
 80071ba:	b002      	add	sp, #8
 80071bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c0:	b003      	add	sp, #12
 80071c2:	4770      	bx	lr
 80071c4:	200000b8 	.word	0x200000b8

080071c8 <__ascii_wctomb>:
 80071c8:	b149      	cbz	r1, 80071de <__ascii_wctomb+0x16>
 80071ca:	2aff      	cmp	r2, #255	; 0xff
 80071cc:	bf85      	ittet	hi
 80071ce:	238a      	movhi	r3, #138	; 0x8a
 80071d0:	6003      	strhi	r3, [r0, #0]
 80071d2:	700a      	strbls	r2, [r1, #0]
 80071d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80071d8:	bf98      	it	ls
 80071da:	2001      	movls	r0, #1
 80071dc:	4770      	bx	lr
 80071de:	4608      	mov	r0, r1
 80071e0:	4770      	bx	lr

080071e2 <abort>:
 80071e2:	b508      	push	{r3, lr}
 80071e4:	2006      	movs	r0, #6
 80071e6:	f000 fa89 	bl	80076fc <raise>
 80071ea:	2001      	movs	r0, #1
 80071ec:	f7fa ff99 	bl	8002122 <_exit>

080071f0 <__sfputc_r>:
 80071f0:	6893      	ldr	r3, [r2, #8]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	b410      	push	{r4}
 80071f8:	6093      	str	r3, [r2, #8]
 80071fa:	da08      	bge.n	800720e <__sfputc_r+0x1e>
 80071fc:	6994      	ldr	r4, [r2, #24]
 80071fe:	42a3      	cmp	r3, r4
 8007200:	db01      	blt.n	8007206 <__sfputc_r+0x16>
 8007202:	290a      	cmp	r1, #10
 8007204:	d103      	bne.n	800720e <__sfputc_r+0x1e>
 8007206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720a:	f000 b935 	b.w	8007478 <__swbuf_r>
 800720e:	6813      	ldr	r3, [r2, #0]
 8007210:	1c58      	adds	r0, r3, #1
 8007212:	6010      	str	r0, [r2, #0]
 8007214:	7019      	strb	r1, [r3, #0]
 8007216:	4608      	mov	r0, r1
 8007218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800721c:	4770      	bx	lr

0800721e <__sfputs_r>:
 800721e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007220:	4606      	mov	r6, r0
 8007222:	460f      	mov	r7, r1
 8007224:	4614      	mov	r4, r2
 8007226:	18d5      	adds	r5, r2, r3
 8007228:	42ac      	cmp	r4, r5
 800722a:	d101      	bne.n	8007230 <__sfputs_r+0x12>
 800722c:	2000      	movs	r0, #0
 800722e:	e007      	b.n	8007240 <__sfputs_r+0x22>
 8007230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007234:	463a      	mov	r2, r7
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ffda 	bl	80071f0 <__sfputc_r>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d1f3      	bne.n	8007228 <__sfputs_r+0xa>
 8007240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007244 <_vfiprintf_r>:
 8007244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	460d      	mov	r5, r1
 800724a:	b09d      	sub	sp, #116	; 0x74
 800724c:	4614      	mov	r4, r2
 800724e:	4698      	mov	r8, r3
 8007250:	4606      	mov	r6, r0
 8007252:	b118      	cbz	r0, 800725c <_vfiprintf_r+0x18>
 8007254:	6a03      	ldr	r3, [r0, #32]
 8007256:	b90b      	cbnz	r3, 800725c <_vfiprintf_r+0x18>
 8007258:	f7fe f8da 	bl	8005410 <__sinit>
 800725c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725e:	07d9      	lsls	r1, r3, #31
 8007260:	d405      	bmi.n	800726e <_vfiprintf_r+0x2a>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	059a      	lsls	r2, r3, #22
 8007266:	d402      	bmi.n	800726e <_vfiprintf_r+0x2a>
 8007268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800726a:	f7fe f95e 	bl	800552a <__retarget_lock_acquire_recursive>
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	071b      	lsls	r3, r3, #28
 8007272:	d501      	bpl.n	8007278 <_vfiprintf_r+0x34>
 8007274:	692b      	ldr	r3, [r5, #16]
 8007276:	b99b      	cbnz	r3, 80072a0 <_vfiprintf_r+0x5c>
 8007278:	4629      	mov	r1, r5
 800727a:	4630      	mov	r0, r6
 800727c:	f000 f93a 	bl	80074f4 <__swsetup_r>
 8007280:	b170      	cbz	r0, 80072a0 <_vfiprintf_r+0x5c>
 8007282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007284:	07dc      	lsls	r4, r3, #31
 8007286:	d504      	bpl.n	8007292 <_vfiprintf_r+0x4e>
 8007288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800728c:	b01d      	add	sp, #116	; 0x74
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	89ab      	ldrh	r3, [r5, #12]
 8007294:	0598      	lsls	r0, r3, #22
 8007296:	d4f7      	bmi.n	8007288 <_vfiprintf_r+0x44>
 8007298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800729a:	f7fe f947 	bl	800552c <__retarget_lock_release_recursive>
 800729e:	e7f3      	b.n	8007288 <_vfiprintf_r+0x44>
 80072a0:	2300      	movs	r3, #0
 80072a2:	9309      	str	r3, [sp, #36]	; 0x24
 80072a4:	2320      	movs	r3, #32
 80072a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ae:	2330      	movs	r3, #48	; 0x30
 80072b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007464 <_vfiprintf_r+0x220>
 80072b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072b8:	f04f 0901 	mov.w	r9, #1
 80072bc:	4623      	mov	r3, r4
 80072be:	469a      	mov	sl, r3
 80072c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c4:	b10a      	cbz	r2, 80072ca <_vfiprintf_r+0x86>
 80072c6:	2a25      	cmp	r2, #37	; 0x25
 80072c8:	d1f9      	bne.n	80072be <_vfiprintf_r+0x7a>
 80072ca:	ebba 0b04 	subs.w	fp, sl, r4
 80072ce:	d00b      	beq.n	80072e8 <_vfiprintf_r+0xa4>
 80072d0:	465b      	mov	r3, fp
 80072d2:	4622      	mov	r2, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	4630      	mov	r0, r6
 80072d8:	f7ff ffa1 	bl	800721e <__sfputs_r>
 80072dc:	3001      	adds	r0, #1
 80072de:	f000 80a9 	beq.w	8007434 <_vfiprintf_r+0x1f0>
 80072e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e4:	445a      	add	r2, fp
 80072e6:	9209      	str	r2, [sp, #36]	; 0x24
 80072e8:	f89a 3000 	ldrb.w	r3, [sl]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80a1 	beq.w	8007434 <_vfiprintf_r+0x1f0>
 80072f2:	2300      	movs	r3, #0
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072fc:	f10a 0a01 	add.w	sl, sl, #1
 8007300:	9304      	str	r3, [sp, #16]
 8007302:	9307      	str	r3, [sp, #28]
 8007304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007308:	931a      	str	r3, [sp, #104]	; 0x68
 800730a:	4654      	mov	r4, sl
 800730c:	2205      	movs	r2, #5
 800730e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007312:	4854      	ldr	r0, [pc, #336]	; (8007464 <_vfiprintf_r+0x220>)
 8007314:	f7f8 ff64 	bl	80001e0 <memchr>
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	b9d8      	cbnz	r0, 8007354 <_vfiprintf_r+0x110>
 800731c:	06d1      	lsls	r1, r2, #27
 800731e:	bf44      	itt	mi
 8007320:	2320      	movmi	r3, #32
 8007322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007326:	0713      	lsls	r3, r2, #28
 8007328:	bf44      	itt	mi
 800732a:	232b      	movmi	r3, #43	; 0x2b
 800732c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007330:	f89a 3000 	ldrb.w	r3, [sl]
 8007334:	2b2a      	cmp	r3, #42	; 0x2a
 8007336:	d015      	beq.n	8007364 <_vfiprintf_r+0x120>
 8007338:	9a07      	ldr	r2, [sp, #28]
 800733a:	4654      	mov	r4, sl
 800733c:	2000      	movs	r0, #0
 800733e:	f04f 0c0a 	mov.w	ip, #10
 8007342:	4621      	mov	r1, r4
 8007344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007348:	3b30      	subs	r3, #48	; 0x30
 800734a:	2b09      	cmp	r3, #9
 800734c:	d94d      	bls.n	80073ea <_vfiprintf_r+0x1a6>
 800734e:	b1b0      	cbz	r0, 800737e <_vfiprintf_r+0x13a>
 8007350:	9207      	str	r2, [sp, #28]
 8007352:	e014      	b.n	800737e <_vfiprintf_r+0x13a>
 8007354:	eba0 0308 	sub.w	r3, r0, r8
 8007358:	fa09 f303 	lsl.w	r3, r9, r3
 800735c:	4313      	orrs	r3, r2
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	46a2      	mov	sl, r4
 8007362:	e7d2      	b.n	800730a <_vfiprintf_r+0xc6>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	1d19      	adds	r1, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	9103      	str	r1, [sp, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfbb      	ittet	lt
 8007370:	425b      	neglt	r3, r3
 8007372:	f042 0202 	orrlt.w	r2, r2, #2
 8007376:	9307      	strge	r3, [sp, #28]
 8007378:	9307      	strlt	r3, [sp, #28]
 800737a:	bfb8      	it	lt
 800737c:	9204      	strlt	r2, [sp, #16]
 800737e:	7823      	ldrb	r3, [r4, #0]
 8007380:	2b2e      	cmp	r3, #46	; 0x2e
 8007382:	d10c      	bne.n	800739e <_vfiprintf_r+0x15a>
 8007384:	7863      	ldrb	r3, [r4, #1]
 8007386:	2b2a      	cmp	r3, #42	; 0x2a
 8007388:	d134      	bne.n	80073f4 <_vfiprintf_r+0x1b0>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	9203      	str	r2, [sp, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfb8      	it	lt
 8007396:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800739a:	3402      	adds	r4, #2
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007474 <_vfiprintf_r+0x230>
 80073a2:	7821      	ldrb	r1, [r4, #0]
 80073a4:	2203      	movs	r2, #3
 80073a6:	4650      	mov	r0, sl
 80073a8:	f7f8 ff1a 	bl	80001e0 <memchr>
 80073ac:	b138      	cbz	r0, 80073be <_vfiprintf_r+0x17a>
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	eba0 000a 	sub.w	r0, r0, sl
 80073b4:	2240      	movs	r2, #64	; 0x40
 80073b6:	4082      	lsls	r2, r0
 80073b8:	4313      	orrs	r3, r2
 80073ba:	3401      	adds	r4, #1
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c2:	4829      	ldr	r0, [pc, #164]	; (8007468 <_vfiprintf_r+0x224>)
 80073c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073c8:	2206      	movs	r2, #6
 80073ca:	f7f8 ff09 	bl	80001e0 <memchr>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d03f      	beq.n	8007452 <_vfiprintf_r+0x20e>
 80073d2:	4b26      	ldr	r3, [pc, #152]	; (800746c <_vfiprintf_r+0x228>)
 80073d4:	bb1b      	cbnz	r3, 800741e <_vfiprintf_r+0x1da>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	3307      	adds	r3, #7
 80073da:	f023 0307 	bic.w	r3, r3, #7
 80073de:	3308      	adds	r3, #8
 80073e0:	9303      	str	r3, [sp, #12]
 80073e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e4:	443b      	add	r3, r7
 80073e6:	9309      	str	r3, [sp, #36]	; 0x24
 80073e8:	e768      	b.n	80072bc <_vfiprintf_r+0x78>
 80073ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ee:	460c      	mov	r4, r1
 80073f0:	2001      	movs	r0, #1
 80073f2:	e7a6      	b.n	8007342 <_vfiprintf_r+0xfe>
 80073f4:	2300      	movs	r3, #0
 80073f6:	3401      	adds	r4, #1
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	4619      	mov	r1, r3
 80073fc:	f04f 0c0a 	mov.w	ip, #10
 8007400:	4620      	mov	r0, r4
 8007402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007406:	3a30      	subs	r2, #48	; 0x30
 8007408:	2a09      	cmp	r2, #9
 800740a:	d903      	bls.n	8007414 <_vfiprintf_r+0x1d0>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0c6      	beq.n	800739e <_vfiprintf_r+0x15a>
 8007410:	9105      	str	r1, [sp, #20]
 8007412:	e7c4      	b.n	800739e <_vfiprintf_r+0x15a>
 8007414:	fb0c 2101 	mla	r1, ip, r1, r2
 8007418:	4604      	mov	r4, r0
 800741a:	2301      	movs	r3, #1
 800741c:	e7f0      	b.n	8007400 <_vfiprintf_r+0x1bc>
 800741e:	ab03      	add	r3, sp, #12
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	462a      	mov	r2, r5
 8007424:	4b12      	ldr	r3, [pc, #72]	; (8007470 <_vfiprintf_r+0x22c>)
 8007426:	a904      	add	r1, sp, #16
 8007428:	4630      	mov	r0, r6
 800742a:	f7fd fb9f 	bl	8004b6c <_printf_float>
 800742e:	4607      	mov	r7, r0
 8007430:	1c78      	adds	r0, r7, #1
 8007432:	d1d6      	bne.n	80073e2 <_vfiprintf_r+0x19e>
 8007434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007436:	07d9      	lsls	r1, r3, #31
 8007438:	d405      	bmi.n	8007446 <_vfiprintf_r+0x202>
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	059a      	lsls	r2, r3, #22
 800743e:	d402      	bmi.n	8007446 <_vfiprintf_r+0x202>
 8007440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007442:	f7fe f873 	bl	800552c <__retarget_lock_release_recursive>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	065b      	lsls	r3, r3, #25
 800744a:	f53f af1d 	bmi.w	8007288 <_vfiprintf_r+0x44>
 800744e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007450:	e71c      	b.n	800728c <_vfiprintf_r+0x48>
 8007452:	ab03      	add	r3, sp, #12
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	462a      	mov	r2, r5
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <_vfiprintf_r+0x22c>)
 800745a:	a904      	add	r1, sp, #16
 800745c:	4630      	mov	r0, r6
 800745e:	f7fd fe29 	bl	80050b4 <_printf_i>
 8007462:	e7e4      	b.n	800742e <_vfiprintf_r+0x1ea>
 8007464:	08007bfd 	.word	0x08007bfd
 8007468:	08007c07 	.word	0x08007c07
 800746c:	08004b6d 	.word	0x08004b6d
 8007470:	0800721f 	.word	0x0800721f
 8007474:	08007c03 	.word	0x08007c03

08007478 <__swbuf_r>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	460e      	mov	r6, r1
 800747c:	4614      	mov	r4, r2
 800747e:	4605      	mov	r5, r0
 8007480:	b118      	cbz	r0, 800748a <__swbuf_r+0x12>
 8007482:	6a03      	ldr	r3, [r0, #32]
 8007484:	b90b      	cbnz	r3, 800748a <__swbuf_r+0x12>
 8007486:	f7fd ffc3 	bl	8005410 <__sinit>
 800748a:	69a3      	ldr	r3, [r4, #24]
 800748c:	60a3      	str	r3, [r4, #8]
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	071a      	lsls	r2, r3, #28
 8007492:	d525      	bpl.n	80074e0 <__swbuf_r+0x68>
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	b31b      	cbz	r3, 80074e0 <__swbuf_r+0x68>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	6922      	ldr	r2, [r4, #16]
 800749c:	1a98      	subs	r0, r3, r2
 800749e:	6963      	ldr	r3, [r4, #20]
 80074a0:	b2f6      	uxtb	r6, r6
 80074a2:	4283      	cmp	r3, r0
 80074a4:	4637      	mov	r7, r6
 80074a6:	dc04      	bgt.n	80074b2 <__swbuf_r+0x3a>
 80074a8:	4621      	mov	r1, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7ff f940 	bl	8006730 <_fflush_r>
 80074b0:	b9e0      	cbnz	r0, 80074ec <__swbuf_r+0x74>
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	60a3      	str	r3, [r4, #8]
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	6022      	str	r2, [r4, #0]
 80074be:	701e      	strb	r6, [r3, #0]
 80074c0:	6962      	ldr	r2, [r4, #20]
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d004      	beq.n	80074d2 <__swbuf_r+0x5a>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	07db      	lsls	r3, r3, #31
 80074cc:	d506      	bpl.n	80074dc <__swbuf_r+0x64>
 80074ce:	2e0a      	cmp	r6, #10
 80074d0:	d104      	bne.n	80074dc <__swbuf_r+0x64>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4628      	mov	r0, r5
 80074d6:	f7ff f92b 	bl	8006730 <_fflush_r>
 80074da:	b938      	cbnz	r0, 80074ec <__swbuf_r+0x74>
 80074dc:	4638      	mov	r0, r7
 80074de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e0:	4621      	mov	r1, r4
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 f806 	bl	80074f4 <__swsetup_r>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d0d5      	beq.n	8007498 <__swbuf_r+0x20>
 80074ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074f0:	e7f4      	b.n	80074dc <__swbuf_r+0x64>
	...

080074f4 <__swsetup_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4b2a      	ldr	r3, [pc, #168]	; (80075a0 <__swsetup_r+0xac>)
 80074f8:	4605      	mov	r5, r0
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	460c      	mov	r4, r1
 80074fe:	b118      	cbz	r0, 8007508 <__swsetup_r+0x14>
 8007500:	6a03      	ldr	r3, [r0, #32]
 8007502:	b90b      	cbnz	r3, 8007508 <__swsetup_r+0x14>
 8007504:	f7fd ff84 	bl	8005410 <__sinit>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800750e:	0718      	lsls	r0, r3, #28
 8007510:	d422      	bmi.n	8007558 <__swsetup_r+0x64>
 8007512:	06d9      	lsls	r1, r3, #27
 8007514:	d407      	bmi.n	8007526 <__swsetup_r+0x32>
 8007516:	2309      	movs	r3, #9
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007524:	e034      	b.n	8007590 <__swsetup_r+0x9c>
 8007526:	0758      	lsls	r0, r3, #29
 8007528:	d512      	bpl.n	8007550 <__swsetup_r+0x5c>
 800752a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752c:	b141      	cbz	r1, 8007540 <__swsetup_r+0x4c>
 800752e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007532:	4299      	cmp	r1, r3
 8007534:	d002      	beq.n	800753c <__swsetup_r+0x48>
 8007536:	4628      	mov	r0, r5
 8007538:	f7ff fdce 	bl	80070d8 <_free_r>
 800753c:	2300      	movs	r3, #0
 800753e:	6363      	str	r3, [r4, #52]	; 0x34
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	2300      	movs	r3, #0
 800754a:	6063      	str	r3, [r4, #4]
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	f043 0308 	orr.w	r3, r3, #8
 8007556:	81a3      	strh	r3, [r4, #12]
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	b94b      	cbnz	r3, 8007570 <__swsetup_r+0x7c>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007566:	d003      	beq.n	8007570 <__swsetup_r+0x7c>
 8007568:	4621      	mov	r1, r4
 800756a:	4628      	mov	r0, r5
 800756c:	f000 f840 	bl	80075f0 <__smakebuf_r>
 8007570:	89a0      	ldrh	r0, [r4, #12]
 8007572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007576:	f010 0301 	ands.w	r3, r0, #1
 800757a:	d00a      	beq.n	8007592 <__swsetup_r+0x9e>
 800757c:	2300      	movs	r3, #0
 800757e:	60a3      	str	r3, [r4, #8]
 8007580:	6963      	ldr	r3, [r4, #20]
 8007582:	425b      	negs	r3, r3
 8007584:	61a3      	str	r3, [r4, #24]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	b943      	cbnz	r3, 800759c <__swsetup_r+0xa8>
 800758a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800758e:	d1c4      	bne.n	800751a <__swsetup_r+0x26>
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	0781      	lsls	r1, r0, #30
 8007594:	bf58      	it	pl
 8007596:	6963      	ldrpl	r3, [r4, #20]
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	e7f4      	b.n	8007586 <__swsetup_r+0x92>
 800759c:	2000      	movs	r0, #0
 800759e:	e7f7      	b.n	8007590 <__swsetup_r+0x9c>
 80075a0:	200000b8 	.word	0x200000b8

080075a4 <__swhatbuf_r>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	460c      	mov	r4, r1
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	2900      	cmp	r1, #0
 80075ae:	b096      	sub	sp, #88	; 0x58
 80075b0:	4615      	mov	r5, r2
 80075b2:	461e      	mov	r6, r3
 80075b4:	da0d      	bge.n	80075d2 <__swhatbuf_r+0x2e>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075bc:	f04f 0100 	mov.w	r1, #0
 80075c0:	bf0c      	ite	eq
 80075c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075c6:	2340      	movne	r3, #64	; 0x40
 80075c8:	2000      	movs	r0, #0
 80075ca:	6031      	str	r1, [r6, #0]
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	b016      	add	sp, #88	; 0x58
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
 80075d2:	466a      	mov	r2, sp
 80075d4:	f000 f848 	bl	8007668 <_fstat_r>
 80075d8:	2800      	cmp	r0, #0
 80075da:	dbec      	blt.n	80075b6 <__swhatbuf_r+0x12>
 80075dc:	9901      	ldr	r1, [sp, #4]
 80075de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075e6:	4259      	negs	r1, r3
 80075e8:	4159      	adcs	r1, r3
 80075ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ee:	e7eb      	b.n	80075c8 <__swhatbuf_r+0x24>

080075f0 <__smakebuf_r>:
 80075f0:	898b      	ldrh	r3, [r1, #12]
 80075f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075f4:	079d      	lsls	r5, r3, #30
 80075f6:	4606      	mov	r6, r0
 80075f8:	460c      	mov	r4, r1
 80075fa:	d507      	bpl.n	800760c <__smakebuf_r+0x1c>
 80075fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	6123      	str	r3, [r4, #16]
 8007604:	2301      	movs	r3, #1
 8007606:	6163      	str	r3, [r4, #20]
 8007608:	b002      	add	sp, #8
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	ab01      	add	r3, sp, #4
 800760e:	466a      	mov	r2, sp
 8007610:	f7ff ffc8 	bl	80075a4 <__swhatbuf_r>
 8007614:	9900      	ldr	r1, [sp, #0]
 8007616:	4605      	mov	r5, r0
 8007618:	4630      	mov	r0, r6
 800761a:	f7fe ff83 	bl	8006524 <_malloc_r>
 800761e:	b948      	cbnz	r0, 8007634 <__smakebuf_r+0x44>
 8007620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007624:	059a      	lsls	r2, r3, #22
 8007626:	d4ef      	bmi.n	8007608 <__smakebuf_r+0x18>
 8007628:	f023 0303 	bic.w	r3, r3, #3
 800762c:	f043 0302 	orr.w	r3, r3, #2
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	e7e3      	b.n	80075fc <__smakebuf_r+0xc>
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	6020      	str	r0, [r4, #0]
 8007638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	6163      	str	r3, [r4, #20]
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	6120      	str	r0, [r4, #16]
 8007646:	b15b      	cbz	r3, 8007660 <__smakebuf_r+0x70>
 8007648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800764c:	4630      	mov	r0, r6
 800764e:	f000 f81d 	bl	800768c <_isatty_r>
 8007652:	b128      	cbz	r0, 8007660 <__smakebuf_r+0x70>
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	431d      	orrs	r5, r3
 8007664:	81a5      	strh	r5, [r4, #12]
 8007666:	e7cf      	b.n	8007608 <__smakebuf_r+0x18>

08007668 <_fstat_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d07      	ldr	r5, [pc, #28]	; (8007688 <_fstat_r+0x20>)
 800766c:	2300      	movs	r3, #0
 800766e:	4604      	mov	r4, r0
 8007670:	4608      	mov	r0, r1
 8007672:	4611      	mov	r1, r2
 8007674:	602b      	str	r3, [r5, #0]
 8007676:	f7fa fda3 	bl	80021c0 <_fstat>
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	d102      	bne.n	8007684 <_fstat_r+0x1c>
 800767e:	682b      	ldr	r3, [r5, #0]
 8007680:	b103      	cbz	r3, 8007684 <_fstat_r+0x1c>
 8007682:	6023      	str	r3, [r4, #0]
 8007684:	bd38      	pop	{r3, r4, r5, pc}
 8007686:	bf00      	nop
 8007688:	20001514 	.word	0x20001514

0800768c <_isatty_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d06      	ldr	r5, [pc, #24]	; (80076a8 <_isatty_r+0x1c>)
 8007690:	2300      	movs	r3, #0
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	602b      	str	r3, [r5, #0]
 8007698:	f7fa fda2 	bl	80021e0 <_isatty>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_isatty_r+0x1a>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_isatty_r+0x1a>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20001514 	.word	0x20001514

080076ac <_raise_r>:
 80076ac:	291f      	cmp	r1, #31
 80076ae:	b538      	push	{r3, r4, r5, lr}
 80076b0:	4604      	mov	r4, r0
 80076b2:	460d      	mov	r5, r1
 80076b4:	d904      	bls.n	80076c0 <_raise_r+0x14>
 80076b6:	2316      	movs	r3, #22
 80076b8:	6003      	str	r3, [r0, #0]
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80076c2:	b112      	cbz	r2, 80076ca <_raise_r+0x1e>
 80076c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076c8:	b94b      	cbnz	r3, 80076de <_raise_r+0x32>
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 f830 	bl	8007730 <_getpid_r>
 80076d0:	462a      	mov	r2, r5
 80076d2:	4601      	mov	r1, r0
 80076d4:	4620      	mov	r0, r4
 80076d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076da:	f000 b817 	b.w	800770c <_kill_r>
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d00a      	beq.n	80076f8 <_raise_r+0x4c>
 80076e2:	1c59      	adds	r1, r3, #1
 80076e4:	d103      	bne.n	80076ee <_raise_r+0x42>
 80076e6:	2316      	movs	r3, #22
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	2001      	movs	r0, #1
 80076ec:	e7e7      	b.n	80076be <_raise_r+0x12>
 80076ee:	2400      	movs	r4, #0
 80076f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076f4:	4628      	mov	r0, r5
 80076f6:	4798      	blx	r3
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7e0      	b.n	80076be <_raise_r+0x12>

080076fc <raise>:
 80076fc:	4b02      	ldr	r3, [pc, #8]	; (8007708 <raise+0xc>)
 80076fe:	4601      	mov	r1, r0
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	f7ff bfd3 	b.w	80076ac <_raise_r>
 8007706:	bf00      	nop
 8007708:	200000b8 	.word	0x200000b8

0800770c <_kill_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	4d07      	ldr	r5, [pc, #28]	; (800772c <_kill_r+0x20>)
 8007710:	2300      	movs	r3, #0
 8007712:	4604      	mov	r4, r0
 8007714:	4608      	mov	r0, r1
 8007716:	4611      	mov	r1, r2
 8007718:	602b      	str	r3, [r5, #0]
 800771a:	f7fa fcf2 	bl	8002102 <_kill>
 800771e:	1c43      	adds	r3, r0, #1
 8007720:	d102      	bne.n	8007728 <_kill_r+0x1c>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	b103      	cbz	r3, 8007728 <_kill_r+0x1c>
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	bd38      	pop	{r3, r4, r5, pc}
 800772a:	bf00      	nop
 800772c:	20001514 	.word	0x20001514

08007730 <_getpid_r>:
 8007730:	f7fa bcdf 	b.w	80020f2 <_getpid>

08007734 <_init>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr

08007740 <_fini>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr
